
Project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006994  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d54  08006d54  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006d54  08006d54  00016d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d5c  08006d5c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d5c  08006d5c  00016d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d60  08006d60  00016d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001140  20000074  08006dd8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011b4  08006dd8  000211b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001965c  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036ee  00000000  00000000  00039700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029b52  00000000  00000000  0003f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018b8b  00000000  00000000  000691da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd0f1  00000000  00000000  00081d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ee56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005964  00000000  00000000  0017eea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b0c 	.word	0x08006b0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006b0c 	.word	0x08006b0c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <shiftOut>:
/*
 * shiftOut
 *     credit to MFS_EXAMPLE Author
 */
void shiftOut(uint8_t val)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	for(int ii=0x80; ii; ii>>=1)
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	e024      	b.n	800052e <shiftOut+0x5a>
	{
	  HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port,SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_RESET);    // clear clock pin
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f001 fbf3 	bl	8001cd8 <HAL_GPIO_WritePin>
	  if(ii & val)						                                                     // if this bit in `value` is set
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4013      	ands	r3, r2
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <shiftOut+0x38>
		  HAL_GPIO_WritePin(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin,GPIO_PIN_SET);  //   set it in shift register
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 fbe7 	bl	8001cd8 <HAL_GPIO_WritePin>
 800050a:	e006      	b.n	800051a <shiftOut+0x46>
	  else
		  HAL_GPIO_WritePin(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin,GPIO_PIN_RESET); 	//   else clear it
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fbdf 	bl	8001cd8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port,SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_SET);       // set clock pin
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f001 fbd8 	bl	8001cd8 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	105b      	asrs	r3, r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1d7      	bne.n	80004e4 <shiftOut+0x10>
	}
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <WriteNumberToSegment>:
 * WriteNUmberToSegment
 *     Write a decimal number between 0 and 9 to one of the 4 digits of the display
 *     credit to MFS_EXAMPLE Author
 */
void WriteNumberToSegment(int Segment, int Value)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <WriteNumberToSegment+0x44>)
 8000550:	f001 fbc2 	bl	8001cd8 <HAL_GPIO_WritePin>
	shiftOut(SEGMENT_MAP[Value]);
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <WriteNumberToSegment+0x48>)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffb9 	bl	80004d4 <shiftOut>
	shiftOut(SEGMENT_SELECT[Segment] );
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <WriteNumberToSegment+0x4c>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffb2 	bl	80004d4 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <WriteNumberToSegment+0x44>)
 8000576:	f001 fbaf 	bl	8001cd8 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400
 8000588:	08006c9c 	.word	0x08006c9c
 800058c:	08006ca8 	.word	0x08006ca8

08000590 <display_score>:


void display_score(uint16_t score)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	int onesNum = 		(score / 1) % 10;
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <display_score+0xb0>)
 800059e:	fba3 1302 	umull	r1, r3, r3, r2
 80005a2:	08d9      	lsrs	r1, r3, #3
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	617b      	str	r3, [r7, #20]
	int tensNum = 		(score / 10) % 10;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <display_score+0xb0>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <display_score+0xb0>)
 80005c0:	fba3 1302 	umull	r1, r3, r3, r2
 80005c4:	08d9      	lsrs	r1, r3, #3
 80005c6:	460b      	mov	r3, r1
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	440b      	add	r3, r1
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	613b      	str	r3, [r7, #16]
	int hundredsNum = 	(score / 100) % 10;
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <display_score+0xb4>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	095b      	lsrs	r3, r3, #5
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <display_score+0xb0>)
 80005e2:	fba3 1302 	umull	r1, r3, r3, r2
 80005e6:	08d9      	lsrs	r1, r3, #3
 80005e8:	460b      	mov	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	60fb      	str	r3, [r7, #12]
	int thousandsNum = 	(score / 1000) % 10;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <display_score+0xb8>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	099b      	lsrs	r3, r3, #6
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <display_score+0xb0>)
 8000604:	fba3 1302 	umull	r1, r3, r3, r2
 8000608:	08d9      	lsrs	r1, r3, #3
 800060a:	460b      	mov	r3, r1
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	60bb      	str	r3, [r7, #8]
	WriteNumberToSegment(THOUSANDS, thousandsNum);
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ff90 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(HUNDREDS, hundredsNum);
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff8c 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(TENS, tensNum);
 8000628:	6939      	ldr	r1, [r7, #16]
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff ff88 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(ONES, onesNum);
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	2003      	movs	r0, #3
 8000634:	f7ff ff84 	bl	8000540 <WriteNumberToSegment>
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	51eb851f 	.word	0x51eb851f
 8000648:	10624dd3 	.word	0x10624dd3

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000090 	.word	0x20000090
 800067c:	20000144 	.word	0x20000144

08000680 <start_game>:
/*
 * start_game()
 * 		game initializer
 */
void start_game()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rPress button 2 to calibrate Player Servo", 42, HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	222a      	movs	r2, #42	; 0x2a
 800068a:	4907      	ldr	r1, [pc, #28]	; (80006a8 <start_game+0x28>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <start_game+0x2c>)
 800068e:	f004 f9d9 	bl	8004a44 <HAL_UART_Transmit>
	game.game_state = SETUP; // player servo configuration will happen first
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <start_game+0x30>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	game.score = 0;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <start_game+0x30>)
 800069a:	2200      	movs	r2, #0
 800069c:	805a      	strh	r2, [r3, #2]
	game.round = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <start_game+0x30>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08006b24 	.word	0x08006b24
 80006ac:	200003a8 	.word	0x200003a8
 80006b0:	20000344 	.word	0x20000344

080006b4 <set_game_state>:

/**
 * set the game state
 */
void set_game_state(GAME_STATE game_state)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	game.game_state = game_state;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <set_game_state+0x1c>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	7013      	strb	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000344 	.word	0x20000344

080006d4 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback function for GPIO interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	2b10      	cmp	r3, #16
 80006e2:	d00f      	beq.n	8000704 <HAL_GPIO_EXTI_Callback+0x30>
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	dc21      	bgt.n	800072c <HAL_GPIO_EXTI_Callback+0x58>
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d015      	beq.n	8000718 <HAL_GPIO_EXTI_Callback+0x44>
 80006ec:	2b02      	cmp	r3, #2
 80006ee:	d11d      	bne.n	800072c <HAL_GPIO_EXTI_Callback+0x58>
	{
	case ShieldBtn1_Pin:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rbtn1", 6, HAL_MAX_DELAY);
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	2206      	movs	r2, #6
 80006f6:	4911      	ldr	r1, [pc, #68]	; (800073c <HAL_GPIO_EXTI_Callback+0x68>)
 80006f8:	4811      	ldr	r0, [pc, #68]	; (8000740 <HAL_GPIO_EXTI_Callback+0x6c>)
 80006fa:	f004 f9a3 	bl	8004a44 <HAL_UART_Transmit>
		handle_btn1();
 80006fe:	f000 f827 	bl	8000750 <handle_btn1>
		break;
 8000702:	e013      	b.n	800072c <HAL_GPIO_EXTI_Callback+0x58>
	case ShieldBtn2_Pin:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rbtn2", 6, HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	2206      	movs	r2, #6
 800070a:	490e      	ldr	r1, [pc, #56]	; (8000744 <HAL_GPIO_EXTI_Callback+0x70>)
 800070c:	480c      	ldr	r0, [pc, #48]	; (8000740 <HAL_GPIO_EXTI_Callback+0x6c>)
 800070e:	f004 f999 	bl	8004a44 <HAL_UART_Transmit>
		handle_btn2();
 8000712:	f000 f85d 	bl	80007d0 <handle_btn2>
		break;
 8000716:	e009      	b.n	800072c <HAL_GPIO_EXTI_Callback+0x58>
	case ShieldBtn3_Pin:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rbtn3", 6, HAL_MAX_DELAY);
 8000718:	f04f 33ff 	mov.w	r3, #4294967295
 800071c:	2206      	movs	r2, #6
 800071e:	490a      	ldr	r1, [pc, #40]	; (8000748 <HAL_GPIO_EXTI_Callback+0x74>)
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000722:	f004 f98f 	bl	8004a44 <HAL_UART_Transmit>
		handle_btn3();
 8000726:	f000 f8f9 	bl	800091c <handle_btn3>
		break;
 800072a:	bf00      	nop
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin); // having issue with shield reading 2 button presses instead of 1, clear the interrupt here
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_GPIO_EXTI_Callback+0x78>)
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	6153      	str	r3, [r2, #20]
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	08006b50 	.word	0x08006b50
 8000740:	200003a8 	.word	0x200003a8
 8000744:	08006b58 	.word	0x08006b58
 8000748:	08006b60 	.word	0x08006b60
 800074c:	40010400 	.word	0x40010400

08000750 <handle_btn1>:
/*
 * handle_btn1()
 * 	button 1 pressed, determine its functionality depending on game state
 */
void handle_btn1()
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	switch(game.game_state)
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <handle_btn1+0x6c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b06      	cmp	r3, #6
 800075a:	d82c      	bhi.n	80007b6 <handle_btn1+0x66>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <handle_btn1+0x14>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	080007b7 	.word	0x080007b7
 8000768:	08000781 	.word	0x08000781
 800076c:	08000789 	.word	0x08000789
 8000770:	08000791 	.word	0x08000791
 8000774:	08000799 	.word	0x08000799
 8000778:	080007a1 	.word	0x080007a1
 800077c:	080007b7 	.word	0x080007b7
	{
	case SETUP:
		// nothing to do in this state
		break;
	case CAL_P0:
		increment_pos0_duty_cycle(&servo_player);
 8000780:	480f      	ldr	r0, [pc, #60]	; (80007c0 <handle_btn1+0x70>)
 8000782:	f000 fd71 	bl	8001268 <increment_pos0_duty_cycle>
		break;
 8000786:	e017      	b.n	80007b8 <handle_btn1+0x68>
	case CAL_P5:
		increment_pos5_duty_cycle(&servo_player);
 8000788:	480d      	ldr	r0, [pc, #52]	; (80007c0 <handle_btn1+0x70>)
 800078a:	f000 fd99 	bl	80012c0 <increment_pos5_duty_cycle>
		break;
 800078e:	e013      	b.n	80007b8 <handle_btn1+0x68>
	case CAL_CP0:
		increment_pos0_duty_cycle(&servo_cpu);
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <handle_btn1+0x74>)
 8000792:	f000 fd69 	bl	8001268 <increment_pos0_duty_cycle>
		break;
 8000796:	e00f      	b.n	80007b8 <handle_btn1+0x68>
	case CAL_CP5:
		increment_pos5_duty_cycle(&servo_cpu);
 8000798:	480a      	ldr	r0, [pc, #40]	; (80007c4 <handle_btn1+0x74>)
 800079a:	f000 fd91 	bl	80012c0 <increment_pos5_duty_cycle>
		break;
 800079e:	e00b      	b.n	80007b8 <handle_btn1+0x68>
	case PLAYING:
		// btn1 to move right
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rMOVING LEFT", 13, HAL_MAX_DELAY);
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	220d      	movs	r2, #13
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <handle_btn1+0x78>)
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <handle_btn1+0x7c>)
 80007aa:	f004 f94b 	bl	8004a44 <HAL_UART_Transmit>
		move_servo_left(&servo_player);
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <handle_btn1+0x70>)
 80007b0:	f000 fce3 	bl	800117a <move_servo_left>
		break;
 80007b4:	e000      	b.n	80007b8 <handle_btn1+0x68>
	case OVER:
		// button should start a new game
		break;
	default:
		break;
 80007b6:	bf00      	nop
	}
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000344 	.word	0x20000344
 80007c0:	20000430 	.word	0x20000430
 80007c4:	20000440 	.word	0x20000440
 80007c8:	08006b68 	.word	0x08006b68
 80007cc:	200003a8 	.word	0x200003a8

080007d0 <handle_btn2>:
/*
 * handle_btn2()
 * 	button 2 pressed, determine what it should do depending on the game state
 */
void handle_btn2()
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	switch(game.game_state)
 80007d4:	4b47      	ldr	r3, [pc, #284]	; (80008f4 <handle_btn2+0x124>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b06      	cmp	r3, #6
 80007da:	f200 8087 	bhi.w	80008ec <handle_btn2+0x11c>
 80007de:	a201      	add	r2, pc, #4	; (adr r2, 80007e4 <handle_btn2+0x14>)
 80007e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e4:	08000801 	.word	0x08000801
 80007e8:	08000837 	.word	0x08000837
 80007ec:	08000855 	.word	0x08000855
 80007f0:	08000871 	.word	0x08000871
 80007f4:	0800088f 	.word	0x0800088f
 80007f8:	080008ed 	.word	0x080008ed
 80007fc:	080008bb 	.word	0x080008bb
	{
	case SETUP:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER SERVO POSITION 0", 35, HAL_MAX_DELAY);
 8000800:	f04f 33ff 	mov.w	r3, #4294967295
 8000804:	2223      	movs	r2, #35	; 0x23
 8000806:	493c      	ldr	r1, [pc, #240]	; (80008f8 <handle_btn2+0x128>)
 8000808:	483c      	ldr	r0, [pc, #240]	; (80008fc <handle_btn2+0x12c>)
 800080a:	f004 f91b 	bl	8004a44 <HAL_UART_Transmit>
		init_servo(&servo_player, SERVO_PLAYER);
 800080e:	2101      	movs	r1, #1
 8000810:	483b      	ldr	r0, [pc, #236]	; (8000900 <handle_btn2+0x130>)
 8000812:	f000 fc15 	bl	8001040 <init_servo>
		init_servo(&servo_cpu, SERVO_CPU);
 8000816:	2102      	movs	r1, #2
 8000818:	483a      	ldr	r0, [pc, #232]	; (8000904 <handle_btn2+0x134>)
 800081a:	f000 fc11 	bl	8001040 <init_servo>
		move_servo_to_pos(&servo_player, POS0);
 800081e:	2100      	movs	r1, #0
 8000820:	4837      	ldr	r0, [pc, #220]	; (8000900 <handle_btn2+0x130>)
 8000822:	f000 fcd1 	bl	80011c8 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 8000826:	2100      	movs	r1, #0
 8000828:	4836      	ldr	r0, [pc, #216]	; (8000904 <handle_btn2+0x134>)
 800082a:	f000 fccd 	bl	80011c8 <move_servo_to_pos>
		set_game_state(CAL_P0);
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ff40 	bl	80006b4 <set_game_state>
		break;
 8000834:	e05b      	b.n	80008ee <handle_btn2+0x11e>
	case CAL_P0:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER SERVO POSITION 5", 35, HAL_MAX_DELAY);
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2223      	movs	r2, #35	; 0x23
 800083c:	4932      	ldr	r1, [pc, #200]	; (8000908 <handle_btn2+0x138>)
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <handle_btn2+0x12c>)
 8000840:	f004 f900 	bl	8004a44 <HAL_UART_Transmit>
		move_servo_to_pos(&servo_player, POS5);
 8000844:	2105      	movs	r1, #5
 8000846:	482e      	ldr	r0, [pc, #184]	; (8000900 <handle_btn2+0x130>)
 8000848:	f000 fcbe 	bl	80011c8 <move_servo_to_pos>
		set_game_state(CAL_P5);
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff ff31 	bl	80006b4 <set_game_state>
		break;
 8000852:	e04c      	b.n	80008ee <handle_btn2+0x11e>
	case CAL_P5:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER CPU POSITION 0", 33, HAL_MAX_DELAY);
 8000854:	f04f 33ff 	mov.w	r3, #4294967295
 8000858:	2221      	movs	r2, #33	; 0x21
 800085a:	492c      	ldr	r1, [pc, #176]	; (800090c <handle_btn2+0x13c>)
 800085c:	4827      	ldr	r0, [pc, #156]	; (80008fc <handle_btn2+0x12c>)
 800085e:	f004 f8f1 	bl	8004a44 <HAL_UART_Transmit>
		set_duty_cycles(&servo_player);
 8000862:	4827      	ldr	r0, [pc, #156]	; (8000900 <handle_btn2+0x130>)
 8000864:	f000 fc08 	bl	8001078 <set_duty_cycles>
		set_game_state(CAL_CP0);
 8000868:	2003      	movs	r0, #3
 800086a:	f7ff ff23 	bl	80006b4 <set_game_state>
		break;
 800086e:	e03e      	b.n	80008ee <handle_btn2+0x11e>
	case CAL_CP0:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER CPU POSITION 5", 33, HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2221      	movs	r2, #33	; 0x21
 8000876:	4926      	ldr	r1, [pc, #152]	; (8000910 <handle_btn2+0x140>)
 8000878:	4820      	ldr	r0, [pc, #128]	; (80008fc <handle_btn2+0x12c>)
 800087a:	f004 f8e3 	bl	8004a44 <HAL_UART_Transmit>
		move_servo_to_pos(&servo_cpu, POS5);
 800087e:	2105      	movs	r1, #5
 8000880:	4820      	ldr	r0, [pc, #128]	; (8000904 <handle_btn2+0x134>)
 8000882:	f000 fca1 	bl	80011c8 <move_servo_to_pos>
		set_game_state(CAL_CP5);
 8000886:	2004      	movs	r0, #4
 8000888:	f7ff ff14 	bl	80006b4 <set_game_state>
		break;
 800088c:	e02f      	b.n	80008ee <handle_btn2+0x11e>
	case CAL_CP5:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATED PRESS BTN2 TO START GAME", 37, HAL_MAX_DELAY);
 800088e:	f04f 33ff 	mov.w	r3, #4294967295
 8000892:	2225      	movs	r2, #37	; 0x25
 8000894:	491f      	ldr	r1, [pc, #124]	; (8000914 <handle_btn2+0x144>)
 8000896:	4819      	ldr	r0, [pc, #100]	; (80008fc <handle_btn2+0x12c>)
 8000898:	f004 f8d4 	bl	8004a44 <HAL_UART_Transmit>
		set_duty_cycles(&servo_cpu);
 800089c:	4819      	ldr	r0, [pc, #100]	; (8000904 <handle_btn2+0x134>)
 800089e:	f000 fbeb 	bl	8001078 <set_duty_cycles>
		move_servo_to_pos(&servo_player, POS0);
 80008a2:	2100      	movs	r1, #0
 80008a4:	4816      	ldr	r0, [pc, #88]	; (8000900 <handle_btn2+0x130>)
 80008a6:	f000 fc8f 	bl	80011c8 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <handle_btn2+0x134>)
 80008ae:	f000 fc8b 	bl	80011c8 <move_servo_to_pos>
		set_game_state(PLAYING);
 80008b2:	2005      	movs	r0, #5
 80008b4:	f7ff fefe 	bl	80006b4 <set_game_state>
		break;
 80008b8:	e019      	b.n	80008ee <handle_btn2+0x11e>
	case OVER:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rSTARTING NEW GAME", 19, HAL_MAX_DELAY);
 80008ba:	f04f 33ff 	mov.w	r3, #4294967295
 80008be:	2213      	movs	r2, #19
 80008c0:	4915      	ldr	r1, [pc, #84]	; (8000918 <handle_btn2+0x148>)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <handle_btn2+0x12c>)
 80008c4:	f004 f8be 	bl	8004a44 <HAL_UART_Transmit>
		game.score = 0;
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <handle_btn2+0x124>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	805a      	strh	r2, [r3, #2]
		game.round = 0;
 80008ce:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <handle_btn2+0x124>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	711a      	strb	r2, [r3, #4]
		move_servo_to_pos(&servo_player, POS0);
 80008d4:	2100      	movs	r1, #0
 80008d6:	480a      	ldr	r0, [pc, #40]	; (8000900 <handle_btn2+0x130>)
 80008d8:	f000 fc76 	bl	80011c8 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 80008dc:	2100      	movs	r1, #0
 80008de:	4809      	ldr	r0, [pc, #36]	; (8000904 <handle_btn2+0x134>)
 80008e0:	f000 fc72 	bl	80011c8 <move_servo_to_pos>
		set_game_state(PLAYING);
 80008e4:	2005      	movs	r0, #5
 80008e6:	f7ff fee5 	bl	80006b4 <set_game_state>
		break;
 80008ea:	e000      	b.n	80008ee <handle_btn2+0x11e>
	default:
		break;
 80008ec:	bf00      	nop
	}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000344 	.word	0x20000344
 80008f8:	08006b78 	.word	0x08006b78
 80008fc:	200003a8 	.word	0x200003a8
 8000900:	20000430 	.word	0x20000430
 8000904:	20000440 	.word	0x20000440
 8000908:	08006b9c 	.word	0x08006b9c
 800090c:	08006bc0 	.word	0x08006bc0
 8000910:	08006be4 	.word	0x08006be4
 8000914:	08006c08 	.word	0x08006c08
 8000918:	08006c30 	.word	0x08006c30

0800091c <handle_btn3>:
/*
 * handle_btn3()
 * 	determine what button 3 should do depending on the game state
 */
void handle_btn3()
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	switch(game.game_state)
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <handle_btn3+0x68>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b05      	cmp	r3, #5
 8000926:	d82a      	bhi.n	800097e <handle_btn3+0x62>
 8000928:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <handle_btn3+0x14>)
 800092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092e:	bf00      	nop
 8000930:	0800097f 	.word	0x0800097f
 8000934:	08000949 	.word	0x08000949
 8000938:	08000951 	.word	0x08000951
 800093c:	08000959 	.word	0x08000959
 8000940:	08000961 	.word	0x08000961
 8000944:	08000969 	.word	0x08000969
	{
	case SETUP:
		// nothing to do here
		break;
	case CAL_P0:
		decrement_pos0_duty_cycle(&servo_player);
 8000948:	480f      	ldr	r0, [pc, #60]	; (8000988 <handle_btn3+0x6c>)
 800094a:	f000 fc77 	bl	800123c <decrement_pos0_duty_cycle>
		break;
 800094e:	e017      	b.n	8000980 <handle_btn3+0x64>
	case CAL_P5:
		decrement_pos5_duty_cycle(&servo_player);
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <handle_btn3+0x6c>)
 8000952:	f000 fc9f 	bl	8001294 <decrement_pos5_duty_cycle>
		break;
 8000956:	e013      	b.n	8000980 <handle_btn3+0x64>
	case CAL_CP0:
		decrement_pos0_duty_cycle(&servo_cpu);
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <handle_btn3+0x70>)
 800095a:	f000 fc6f 	bl	800123c <decrement_pos0_duty_cycle>
		break;
 800095e:	e00f      	b.n	8000980 <handle_btn3+0x64>
	case CAL_CP5:
		decrement_pos5_duty_cycle(&servo_cpu);
 8000960:	480a      	ldr	r0, [pc, #40]	; (800098c <handle_btn3+0x70>)
 8000962:	f000 fc97 	bl	8001294 <decrement_pos5_duty_cycle>
		break;
 8000966:	e00b      	b.n	8000980 <handle_btn3+0x64>
	case PLAYING:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rMOVING RIGHT", 14, HAL_MAX_DELAY);
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	220e      	movs	r2, #14
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <handle_btn3+0x74>)
 8000970:	4808      	ldr	r0, [pc, #32]	; (8000994 <handle_btn3+0x78>)
 8000972:	f004 f867 	bl	8004a44 <HAL_UART_Transmit>
		move_servo_right(&servo_player);
 8000976:	4804      	ldr	r0, [pc, #16]	; (8000988 <handle_btn3+0x6c>)
 8000978:	f000 fbd8 	bl	800112c <move_servo_right>
		break;
 800097c:	e000      	b.n	8000980 <handle_btn3+0x64>
	default:
		break;
 800097e:	bf00      	nop
	}
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000344 	.word	0x20000344
 8000988:	20000430 	.word	0x20000430
 800098c:	20000440 	.word	0x20000440
 8000990:	08006c44 	.word	0x08006c44
 8000994:	200003a8 	.word	0x200003a8

08000998 <game_task>:
/**
 * game_task()
 * 	the main game task, play through the rounds and such
 */
void game_task()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
	start_game();
 800099e:	f7ff fe6f 	bl	8000680 <start_game>
	uint16_t delay;
	while(1)
	{
		switch(game.game_state)
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <game_task+0x48>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	d118      	bne.n	80009dc <game_task+0x44>
		{
		case PLAYING:
			delay = get_random_delay();
 80009aa:	f000 fb2b 	bl	8001004 <get_random_delay>
 80009ae:	4603      	mov	r3, r0
 80009b0:	80fb      	strh	r3, [r7, #6]
			vTaskDelay(delay / portTICK_PERIOD_MS);
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 f81d 	bl	80059f4 <vTaskDelay>
			if(game.round < 5)
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <game_task+0x48>)
 80009bc:	791b      	ldrb	r3, [r3, #4]
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d802      	bhi.n	80009c8 <game_task+0x30>
			{
				move_cpu_to_random_pos();
 80009c2:	f000 fc1f 	bl	8001204 <move_cpu_to_random_pos>
 80009c6:	e002      	b.n	80009ce <game_task+0x36>
			}
			else
			{
				game.game_state = OVER;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <game_task+0x48>)
 80009ca:	2206      	movs	r2, #6
 80009cc:	701a      	strb	r2, [r3, #0]
			}
			game.round += 1;
 80009ce:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <game_task+0x48>)
 80009d0:	791b      	ldrb	r3, [r3, #4]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b02      	ldr	r3, [pc, #8]	; (80009e0 <game_task+0x48>)
 80009d8:	711a      	strb	r2, [r3, #4]
			break;
 80009da:	e000      	b.n	80009de <game_task+0x46>
		default:
			break;
 80009dc:	bf00      	nop
		switch(game.game_state)
 80009de:	e7e0      	b.n	80009a2 <game_task+0xa>
 80009e0:	20000344 	.word	0x20000344

080009e4 <score_task>:
/*
 * score_task()
 * 	calculate the score of this game
 */
void score_task()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	while(1)
	{
		switch(game.game_state)
 80009e8:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <score_task+0x44>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b05      	cmp	r3, #5
 80009ee:	d118      	bne.n	8000a22 <score_task+0x3e>
		{
		case PLAYING:
			while(game.game_state == PLAYING)
 80009f0:	e012      	b.n	8000a18 <score_task+0x34>
			{
				// increment the score if the player and cpu-servo are not in the same position and the cpu-servo is stable (not moving)
				if(servo_player.servo_position != servo_cpu.servo_position &&
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <score_task+0x48>)
 80009f4:	785a      	ldrb	r2, [r3, #1]
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <score_task+0x4c>)
 80009f8:	785b      	ldrb	r3, [r3, #1]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d009      	beq.n	8000a12 <score_task+0x2e>
						servo_cpu.SERVO_STATE == STABLE)
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <score_task+0x4c>)
 8000a00:	789b      	ldrb	r3, [r3, #2]
				if(servo_player.servo_position != servo_cpu.servo_position &&
 8000a02:	2b02      	cmp	r3, #2
 8000a04:	d105      	bne.n	8000a12 <score_task+0x2e>
					game.score += 1;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <score_task+0x44>)
 8000a08:	885b      	ldrh	r3, [r3, #2]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <score_task+0x44>)
 8000a10:	805a      	strh	r2, [r3, #2]
				vTaskDelay(10 / portTICK_PERIOD_MS);
 8000a12:	200a      	movs	r0, #10
 8000a14:	f004 ffee 	bl	80059f4 <vTaskDelay>
			while(game.game_state == PLAYING)
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <score_task+0x44>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	d0e8      	beq.n	80009f2 <score_task+0xe>
			}
			break;
 8000a20:	e000      	b.n	8000a24 <score_task+0x40>
		default:
			break;
 8000a22:	bf00      	nop
		switch(game.game_state)
 8000a24:	e7e0      	b.n	80009e8 <score_task+0x4>
 8000a26:	bf00      	nop
 8000a28:	20000344 	.word	0x20000344
 8000a2c:	20000430 	.word	0x20000430
 8000a30:	20000440 	.word	0x20000440

08000a34 <display_task>:
/*
 * display_task()
 * 	send the score to the seven-segment display
 */
void display_task()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	while(1)
	{
		display_score(game.score);
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <display_task+0x10>)
 8000a3a:	885b      	ldrh	r3, [r3, #2]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fda7 	bl	8000590 <display_score>
 8000a42:	e7f9      	b.n	8000a38 <display_task+0x4>
 8000a44:	20000344 	.word	0x20000344

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4e:	f000 fe77 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a52:	f000 f857 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a56:	f000 f96f 	bl	8000d38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a5a:	f000 f93d 	bl	8000cd8 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000a5e:	f000 f8a3 	bl	8000ba8 <MX_RNG_Init>
  MX_TIM3_Init();
 8000a62:	f000 f8b5 	bl	8000bd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a66:	2100      	movs	r1, #0
 8000a68:	481d      	ldr	r0, [pc, #116]	; (8000ae0 <main+0x98>)
 8000a6a:	f002 fe9b 	bl	80037a4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a6e:	2104      	movs	r1, #4
 8000a70:	481b      	ldr	r0, [pc, #108]	; (8000ae0 <main+0x98>)
 8000a72:	f002 fe97 	bl	80037a4 <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <main+0x9c>)
 8000a78:	463c      	mov	r4, r7
 8000a7a:	461d      	mov	r5, r3
 8000a7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a80:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a84:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fcf3 	bl	8005478 <osThreadCreate>
 8000a92:	4603      	mov	r3, r0
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <main+0xa0>)
 8000a96:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(game_task, "Game", 128, NULL, 3, &game_handler);
 8000a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2280      	movs	r2, #128	; 0x80
 8000aa6:	4911      	ldr	r1, [pc, #68]	; (8000aec <main+0xa4>)
 8000aa8:	4811      	ldr	r0, [pc, #68]	; (8000af0 <main+0xa8>)
 8000aaa:	f004 fe56 	bl	800575a <xTaskCreate>
  xTaskCreate(display_task, "Display", 128, NULL, 3, &display_handler);
 8000aae:	f107 0320 	add.w	r3, r7, #32
 8000ab2:	9301      	str	r3, [sp, #4]
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	490d      	ldr	r1, [pc, #52]	; (8000af4 <main+0xac>)
 8000abe:	480e      	ldr	r0, [pc, #56]	; (8000af8 <main+0xb0>)
 8000ac0:	f004 fe4b 	bl	800575a <xTaskCreate>
  xTaskCreate(score_task, "Score", 128, NULL, 3, &score_handler);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	9301      	str	r3, [sp, #4]
 8000aca:	2303      	movs	r3, #3
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	490a      	ldr	r1, [pc, #40]	; (8000afc <main+0xb4>)
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <main+0xb8>)
 8000ad6:	f004 fe40 	bl	800575a <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ada:	f004 fcc6 	bl	800546a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <main+0x96>
 8000ae0:	2000035c 	.word	0x2000035c
 8000ae4:	08006c78 	.word	0x08006c78
 8000ae8:	2000042c 	.word	0x2000042c
 8000aec:	08006c60 	.word	0x08006c60
 8000af0:	08000999 	.word	0x08000999
 8000af4:	08006c68 	.word	0x08006c68
 8000af8:	08000a35 	.word	0x08000a35
 8000afc:	08006c70 	.word	0x08006c70
 8000b00:	080009e5 	.word	0x080009e5

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b096      	sub	sp, #88	; 0x58
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2244      	movs	r2, #68	; 0x44
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f005 ff30 	bl	8006978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2a:	f001 f913 	bl	8001d54 <HAL_PWREx_ControlVoltageScaling>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b34:	f000 fa44 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b46:	2302      	movs	r3, #2
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b52:	230a      	movs	r3, #10
 8000b54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b56:	2307      	movs	r3, #7
 8000b58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 f94a 	bl	8001e00 <HAL_RCC_OscConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b72:	f000 fa25 	bl	8000fc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b76:	230f      	movs	r3, #15
 8000b78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2104      	movs	r1, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f001 fd12 	bl	80025b8 <HAL_RCC_ClockConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b9a:	f000 fa11 	bl	8000fc0 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	; 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <MX_RNG_Init+0x20>)
 8000bae:	4a07      	ldr	r2, [pc, #28]	; (8000bcc <MX_RNG_Init+0x24>)
 8000bb0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_RNG_Init+0x20>)
 8000bb4:	f002 fc12 	bl	80033dc <HAL_RNG_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000bbe:	f000 f9ff 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000034c 	.word	0x2000034c
 8000bcc:	50060800 	.word	0x50060800

08000bd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08e      	sub	sp, #56	; 0x38
 8000bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]
 8000bfe:	615a      	str	r2, [r3, #20]
 8000c00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <MX_TIM3_Init+0x104>)
 8000c06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800 - 1;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c0a:	f240 321f 	movw	r2, #799	; 0x31f
 8000c0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000 - 1;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c2a:	4829      	ldr	r0, [pc, #164]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c2c:	f002 fc91 	bl	8003552 <HAL_TIM_Base_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000c36:	f000 f9c3 	bl	8000fc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4822      	ldr	r0, [pc, #136]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c48:	f003 f8e6 	bl	8003e18 <HAL_TIM_ConfigClockSource>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000c52:	f000 f9b5 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c56:	481e      	ldr	r0, [pc, #120]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c58:	f002 fd42 	bl	80036e0 <HAL_TIM_PWM_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c62:	f000 f9ad 	bl	8000fc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4816      	ldr	r0, [pc, #88]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c76:	f003 fdf1 	bl	800485c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000c80:	f000 f99e 	bl	8000fc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c84:	2360      	movs	r3, #96	; 0x60
 8000c86:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000c9c:	f002 ffa8 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000ca6:	f000 f98b 	bl	8000fc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000caa:	463b      	mov	r3, r7
 8000cac:	2204      	movs	r2, #4
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000cb2:	f002 ff9d 	bl	8003bf0 <HAL_TIM_PWM_ConfigChannel>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000cbc:	f000 f980 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000cc0:	4803      	ldr	r0, [pc, #12]	; (8000cd0 <MX_TIM3_Init+0x100>)
 8000cc2:	f000 fb9f 	bl	8001404 <HAL_TIM_MspPostInit>

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	; 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2000035c 	.word	0x2000035c
 8000cd4:	40000400 	.word	0x40000400

08000cd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <MX_USART2_UART_Init+0x5c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART2_UART_Init+0x58>)
 8000d1c:	f003 fe44 	bl	80049a8 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d26:	f000 f94b 	bl	8000fc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200003a8 	.word	0x200003a8
 8000d34:	40004400 	.word	0x40004400

08000d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	4b8c      	ldr	r3, [pc, #560]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	4a8b      	ldr	r2, [pc, #556]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d54:	f043 0304 	orr.w	r3, r3, #4
 8000d58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d5a:	4b89      	ldr	r3, [pc, #548]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	f003 0304 	and.w	r3, r3, #4
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d66:	4b86      	ldr	r3, [pc, #536]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	4a85      	ldr	r2, [pc, #532]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d72:	4b83      	ldr	r3, [pc, #524]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b80      	ldr	r3, [pc, #512]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	4a7f      	ldr	r2, [pc, #508]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b7d      	ldr	r3, [pc, #500]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d96:	4b7a      	ldr	r3, [pc, #488]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a79      	ldr	r2, [pc, #484]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b77      	ldr	r3, [pc, #476]	; (8000f80 <MX_GPIO_Init+0x248>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2120      	movs	r1, #32
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f000 ff8f 	bl	8001cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0314 	add.w	r3, r7, #20
 8000dce:	4619      	mov	r1, r3
 8000dd0:	486c      	ldr	r0, [pc, #432]	; (8000f84 <MX_GPIO_Init+0x24c>)
 8000dd2:	f000 fdd7 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : ShieldBtn1_Pin ShieldBtn2_Pin */
  GPIO_InitStruct.Pin = ShieldBtn1_Pin|ShieldBtn2_Pin;
 8000dd6:	2312      	movs	r3, #18
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dda:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	4619      	mov	r1, r3
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f000 fdc9 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000df2:	2320      	movs	r3, #32
 8000df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0c:	f000 fdba 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : ShieldBtn3_Pin */
  GPIO_InitStruct.Pin = ShieldBtn3_Pin;
 8000e10:	2301      	movs	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ShieldBtn3_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4858      	ldr	r0, [pc, #352]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000e26:	f000 fdad 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHLD_A5_Pin SHLD_A4_Pin */
   GPIO_InitStruct.Pin = SHLD_A5_Pin|SHLD_A4_Pin;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4851      	ldr	r0, [pc, #324]	; (8000f84 <MX_GPIO_Init+0x24c>)
 8000e3e:	f000 fda1 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pins : SHLD_A0_Pin SHLD_D2_Pin */
   GPIO_InitStruct.Pin = SHLD_A0_Pin|SHLD_D2_Pin;
 8000e42:	f240 4301 	movw	r3, #1025	; 0x401
 8000e46:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f000 fd93 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
   GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 8000e5e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e62:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e64:	2301      	movs	r3, #1
 8000e66:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	4619      	mov	r1, r3
 8000e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7a:	f000 fd83 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pins : SHLD_D6_Pin SHLD_D5_Pin */
   GPIO_InitStruct.Pin = SHLD_D6_Pin|SHLD_D5_Pin;
 8000e7e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000e82:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	4619      	mov	r1, r3
 8000e92:	483d      	ldr	r0, [pc, #244]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000e94:	f000 fd76 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pin : SHLD_D9_Pin */
   GPIO_InitStruct.Pin = SHLD_D9_Pin;
 8000e98:	2380      	movs	r3, #128	; 0x80
 8000e9a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(SHLD_D9_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4836      	ldr	r0, [pc, #216]	; (8000f84 <MX_GPIO_Init+0x24c>)
 8000eac:	f000 fd6a 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
   GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 8000eb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000eb4:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f000 fd5a 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pin : SHLD_D3_Pin */
   GPIO_InitStruct.Pin = SHLD_D3_Pin;
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ed4:	2311      	movs	r3, #17
 8000ed6:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(SHLD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4828      	ldr	r0, [pc, #160]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000ee8:	f000 fd4c 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
   GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000eec:	2320      	movs	r3, #32
 8000eee:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0314 	add.w	r3, r7, #20
 8000f00:	4619      	mov	r1, r3
 8000f02:	4821      	ldr	r0, [pc, #132]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000f04:	f000 fd3e 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pin : SHLD_D10_Pin */
   GPIO_InitStruct.Pin = SHLD_D10_Pin;
 8000f08:	2340      	movs	r3, #64	; 0x40
 8000f0a:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(SHLD_D10_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000f20:	f000 fd30 	bl	8001984 <HAL_GPIO_Init>

   /*Configure GPIO pins : SHLD_D15_Pin SHLD_D14_Pin */
   GPIO_InitStruct.Pin = SHLD_D15_Pin|SHLD_D14_Pin;
 8000f24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f28:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f36:	2304      	movs	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_GPIO_Init+0x250>)
 8000f42:	f000 fd1f 	bl	8001984 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2105      	movs	r1, #5
 8000f4a:	2006      	movs	r0, #6
 8000f4c:	f000 fcf0 	bl	8001930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f50:	2006      	movs	r0, #6
 8000f52:	f000 fd09 	bl	8001968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2105      	movs	r1, #5
 8000f5a:	2007      	movs	r0, #7
 8000f5c:	f000 fce8 	bl	8001930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000f60:	2007      	movs	r0, #7
 8000f62:	f000 fd01 	bl	8001968 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2105      	movs	r1, #5
 8000f6a:	200a      	movs	r0, #10
 8000f6c:	f000 fce0 	bl	8001930 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000f70:	200a      	movs	r0, #10
 8000f72:	f000 fcf9 	bl	8001968 <HAL_NVIC_EnableIRQ>

}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800
 8000f88:	48000400 	.word	0x48000400

08000f8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f004 fabb 	bl	8005510 <osDelay>
 8000f9a:	e7fb      	b.n	8000f94 <StartDefaultTask+0x8>

08000f9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fae:	f000 fbe7 	bl	8001780 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40001000 	.word	0x40001000

08000fc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <Error_Handler+0x8>
	...

08000fcc <get_random_position>:
/*
 * get_random_position()
 * 		return a position between 0-5
 */
uint8_t get_random_position()
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
	uint8_t position;
	uint32_t myrng = HAL_RNG_GetRandomNumber(&hrng);
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <get_random_position+0x30>)
 8000fd4:	f002 faa8 	bl	8003528 <HAL_RNG_GetRandomNumber>
 8000fd8:	6078      	str	r0, [r7, #4]
	position = myrng % NUM_POSITIONS;
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <get_random_position+0x34>)
 8000fde:	fba3 2301 	umull	r2, r3, r3, r1
 8000fe2:	089a      	lsrs	r2, r3, #2
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	1aca      	subs	r2, r1, r3
 8000fee:	4613      	mov	r3, r2
 8000ff0:	70fb      	strb	r3, [r7, #3]
	return position;
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000034c 	.word	0x2000034c
 8001000:	aaaaaaab 	.word	0xaaaaaaab

08001004 <get_random_delay>:
/*
 * get_random_delay()
 * 		return a random delay for the game to use between 1-4 seconds
 */
uint16_t get_random_delay()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
	uint32_t delay;
	uint32_t myrng = HAL_RNG_GetRandomNumber(&hrng);
 800100a:	480c      	ldr	r0, [pc, #48]	; (800103c <get_random_delay+0x38>)
 800100c:	f002 fa8c 	bl	8003528 <HAL_RNG_GetRandomNumber>
 8001010:	60f8      	str	r0, [r7, #12]
	uint32_t range = FOUR_SEC - ONE_SEC;
 8001012:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001016:	60bb      	str	r3, [r7, #8]
	delay = ( myrng % range ) + ONE_SEC;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	fb01 f202 	mul.w	r2, r1, r2
 8001026:	1a9b      	subs	r3, r3, r2
 8001028:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800102c:	607b      	str	r3, [r7, #4]
	return delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b29b      	uxth	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000034c 	.word	0x2000034c

08001040 <init_servo>:

/*
 * initialize this servo's parameters
 */
void init_servo(Servo_t *servo, uint8_t servo_id)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	460b      	mov	r3, r1
 800104a:	70fb      	strb	r3, [r7, #3]
	servo->ID = servo_id;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78fa      	ldrb	r2, [r7, #3]
 8001050:	701a      	strb	r2, [r3, #0]
	servo->SERVO_STATE = STABLE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	709a      	strb	r2, [r3, #2]
	servo->servo_position = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	705a      	strb	r2, [r3, #1]
	servo->duty_cycle_arr[POS0] = 70; // estimate of position 0 to be calibrated from
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2246      	movs	r2, #70	; 0x46
 8001062:	809a      	strh	r2, [r3, #4]
	servo->duty_cycle_arr[POS5] = 180; // initial guess for position 5 to be calibrated from
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	22b4      	movs	r2, #180	; 0xb4
 8001068:	81da      	strh	r2, [r3, #14]
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <set_duty_cycles>:
/*
 * set_duty_cycles(servo)
 * 		calculate the duty cycles to be used at each position
 */
void set_duty_cycles(Servo_t *servo)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	// compute the range of motion after calibration
	uint16_t range = (servo->duty_cycle_arr[POS5] - servo->duty_cycle_arr[POS0]);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	89da      	ldrh	r2, [r3, #14]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	889b      	ldrh	r3, [r3, #4]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	81fb      	strh	r3, [r7, #14]

	// separate that range into equal steps, int division so will be some error
	uint16_t step = range / 5;
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	4a17      	ldr	r2, [pc, #92]	; (80010ec <set_duty_cycles+0x74>)
 8001090:	fba2 2303 	umull	r2, r3, r2, r3
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	81bb      	strh	r3, [r7, #12]

	// set all positional duty cycles
	servo->duty_cycle_arr[POS1] = servo->duty_cycle_arr[POS0] + (POS1 * step);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	889a      	ldrh	r2, [r3, #4]
 800109c:	89bb      	ldrh	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	80da      	strh	r2, [r3, #6]
	servo->duty_cycle_arr[POS2] = servo->duty_cycle_arr[POS0] + (POS2 * step);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	889a      	ldrh	r2, [r3, #4]
 80010aa:	89bb      	ldrh	r3, [r7, #12]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	811a      	strh	r2, [r3, #8]
	servo->duty_cycle_arr[POS3] = servo->duty_cycle_arr[POS0] + (POS3 * step);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	889a      	ldrh	r2, [r3, #4]
 80010bc:	89bb      	ldrh	r3, [r7, #12]
 80010be:	4619      	mov	r1, r3
 80010c0:	0049      	lsls	r1, r1, #1
 80010c2:	440b      	add	r3, r1
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	815a      	strh	r2, [r3, #10]
	servo->duty_cycle_arr[POS4] = servo->duty_cycle_arr[POS0] + (POS4 * step);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	889a      	ldrh	r2, [r3, #4]
 80010d2:	89bb      	ldrh	r3, [r7, #12]
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b29a      	uxth	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	819a      	strh	r2, [r3, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	cccccccd 	.word	0xcccccccd

080010f0 <set_pwm>:
/*
 * set_pwm
 * 	function to inject new duty cycle to pwm timer
 */
void set_pwm(uint8_t servo, uint16_t duty)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	460a      	mov	r2, r1
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	4613      	mov	r3, r2
 80010fe:	80bb      	strh	r3, [r7, #4]
	switch ( servo )
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d002      	beq.n	800110c <set_pwm+0x1c>
 8001106:	2b02      	cmp	r3, #2
 8001108:	d004      	beq.n	8001114 <set_pwm+0x24>
			break;
		case 2:
			TIM3->CCR2 = duty;
			break;
		default:
			break;
 800110a:	e007      	b.n	800111c <set_pwm+0x2c>
			TIM3->CCR1 = duty;
 800110c:	4a06      	ldr	r2, [pc, #24]	; (8001128 <set_pwm+0x38>)
 800110e:	88bb      	ldrh	r3, [r7, #4]
 8001110:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8001112:	e003      	b.n	800111c <set_pwm+0x2c>
			TIM3->CCR2 = duty;
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <set_pwm+0x38>)
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800111a:	bf00      	nop
	}
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	40000400 	.word	0x40000400

0800112c <move_servo_right>:
/*
 * move_servo_right
 * adjust the duty cycle of the servo to move it right by one position
 */
void move_servo_right(Servo_t *servo)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	// where is the servo rn?
	uint8_t current_position = servo->servo_position;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	73fb      	strb	r3, [r7, #15]
	switch(current_position)
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d017      	beq.n	8001170 <move_servo_right+0x44>
	{
	case POS0:
		// cannot move further right from this position
		break;
	default:
		servo->SERVO_STATE = MOVING;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	709a      	strb	r2, [r3, #2]
		set_pwm(servo->ID, servo->duty_cycle_arr[current_position - 1]);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7818      	ldrb	r0, [r3, #0]
 800114a:	7bfb      	ldrb	r3, [r7, #15]
 800114c:	3b01      	subs	r3, #1
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	889b      	ldrh	r3, [r3, #4]
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff ffca 	bl	80010f0 <set_pwm>
		servo->servo_position -= 1;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	785b      	ldrb	r3, [r3, #1]
 8001160:	3b01      	subs	r3, #1
 8001162:	b2da      	uxtb	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	705a      	strb	r2, [r3, #1]
		servo->SERVO_STATE = STABLE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2202      	movs	r2, #2
 800116c:	709a      	strb	r2, [r3, #2]
		break;
 800116e:	e000      	b.n	8001172 <move_servo_right+0x46>
		break;
 8001170:	bf00      	nop
	}

}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <move_servo_left>:
/*
 * move_servo_left
 * adjust the duty cycel of the servo to move it left by one position
 */
void move_servo_left(Servo_t *servo)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
	// where is the servo rn?
	uint8_t current_position = servo->servo_position;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	785b      	ldrb	r3, [r3, #1]
 8001186:	73fb      	strb	r3, [r7, #15]
	switch(current_position)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d017      	beq.n	80011be <move_servo_left+0x44>
	{
	case POS5:
		// cannot move further left from this position
		break;
	default:
		servo->SERVO_STATE = MOVING;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2201      	movs	r2, #1
 8001192:	709a      	strb	r2, [r3, #2]
		set_pwm(servo->ID, servo->duty_cycle_arr[current_position + 1]);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	7818      	ldrb	r0, [r3, #0]
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	3301      	adds	r3, #1
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff ffa3 	bl	80010f0 <set_pwm>
		servo->servo_position += 1;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	785b      	ldrb	r3, [r3, #1]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	705a      	strb	r2, [r3, #1]
		servo->SERVO_STATE = STABLE;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2202      	movs	r2, #2
 80011ba:	709a      	strb	r2, [r3, #2]
		break;
 80011bc:	e000      	b.n	80011c0 <move_servo_left+0x46>
		break;
 80011be:	bf00      	nop
	}
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <move_servo_to_pos>:
/*
 * move_servo_to_pos
 *  Move the servo to a specific position
 */
void move_servo_to_pos(Servo_t *servo, uint8_t position)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
	servo->SERVO_STATE = MOVING;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	709a      	strb	r2, [r3, #2]
	servo->servo_position = position;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	705a      	strb	r2, [r3, #1]
	set_pwm(servo->ID, servo->duty_cycle_arr[position]);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7818      	ldrb	r0, [r3, #0]
 80011e4:	78fb      	ldrb	r3, [r7, #3]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff ff7e 	bl	80010f0 <set_pwm>
	servo->SERVO_STATE = STABLE;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2202      	movs	r2, #2
 80011f8:	709a      	strb	r2, [r3, #2]
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <move_cpu_to_random_pos>:

void move_cpu_to_random_pos()
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
	// get a random position
	uint8_t position = get_random_position();
 800120a:	f7ff fedf 	bl	8000fcc <get_random_position>
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	// ensure not moving to same position
	while(position == servo_cpu.servo_position)
 8001212:	e003      	b.n	800121c <move_cpu_to_random_pos+0x18>
	{
		position = get_random_position();
 8001214:	f7ff feda 	bl	8000fcc <get_random_position>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
	while(position == servo_cpu.servo_position)
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <move_cpu_to_random_pos+0x34>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	79fa      	ldrb	r2, [r7, #7]
 8001222:	429a      	cmp	r2, r3
 8001224:	d0f6      	beq.n	8001214 <move_cpu_to_random_pos+0x10>
	}
	move_servo_to_pos(&servo_cpu, position);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4619      	mov	r1, r3
 800122a:	4803      	ldr	r0, [pc, #12]	; (8001238 <move_cpu_to_random_pos+0x34>)
 800122c:	f7ff ffcc 	bl	80011c8 <move_servo_to_pos>
}
 8001230:	bf00      	nop
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000440 	.word	0x20000440

0800123c <decrement_pos0_duty_cycle>:
 * --------------------------------------------------------------------
 * Increment and Decrement duty cycle functions
 * 		calibration routine helper functions
 */
void decrement_pos0_duty_cycle(Servo_t *servo)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS0] -= 2;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	889b      	ldrh	r3, [r3, #4]
 8001248:	3b02      	subs	r3, #2
 800124a:	b29a      	uxth	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	809a      	strh	r2, [r3, #4]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS0]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	889b      	ldrh	r3, [r3, #4]
 8001258:	4619      	mov	r1, r3
 800125a:	4610      	mov	r0, r2
 800125c:	f7ff ff48 	bl	80010f0 <set_pwm>
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <increment_pos0_duty_cycle>:
void increment_pos0_duty_cycle(Servo_t *servo)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS0] += 2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	889b      	ldrh	r3, [r3, #4]
 8001274:	3302      	adds	r3, #2
 8001276:	b29a      	uxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	809a      	strh	r2, [r3, #4]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS0]);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	889b      	ldrh	r3, [r3, #4]
 8001284:	4619      	mov	r1, r3
 8001286:	4610      	mov	r0, r2
 8001288:	f7ff ff32 	bl	80010f0 <set_pwm>
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <decrement_pos5_duty_cycle>:
void decrement_pos5_duty_cycle(Servo_t *servo)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS5] -= 2;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	89db      	ldrh	r3, [r3, #14]
 80012a0:	3b02      	subs	r3, #2
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	81da      	strh	r2, [r3, #14]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS5]);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	89db      	ldrh	r3, [r3, #14]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f7ff ff1c 	bl	80010f0 <set_pwm>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <increment_pos5_duty_cycle>:
void increment_pos5_duty_cycle(Servo_t *servo)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS5] += 2;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	89db      	ldrh	r3, [r3, #14]
 80012cc:	3302      	adds	r3, #2
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	81da      	strh	r2, [r3, #14]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS5]);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781a      	ldrb	r2, [r3, #0]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	89db      	ldrh	r3, [r3, #14]
 80012dc:	4619      	mov	r1, r3
 80012de:	4610      	mov	r0, r2
 80012e0:	f7ff ff06 	bl	80010f0 <set_pwm>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_MspInit+0x4c>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a10      	ldr	r2, [pc, #64]	; (8001338 <HAL_MspInit+0x4c>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <HAL_MspInit+0x4c>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_MspInit+0x4c>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <HAL_MspInit+0x4c>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001314:	6593      	str	r3, [r2, #88]	; 0x58
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_MspInit+0x4c>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800131a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	210f      	movs	r1, #15
 8001326:	f06f 0001 	mvn.w	r0, #1
 800132a:	f000 fb01 	bl	8001930 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b0a6      	sub	sp, #152	; 0x98
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2288      	movs	r2, #136	; 0x88
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f005 fb13 	bl	8006978 <memset>
  if(hrng->Instance==RNG)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a19      	ldr	r2, [pc, #100]	; (80013bc <HAL_RNG_MspInit+0x80>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d12b      	bne.n	80013b4 <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800135c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001360:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001362:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800136a:	2302      	movs	r3, #2
 800136c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800136e:	2301      	movs	r3, #1
 8001370:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001372:	2308      	movs	r3, #8
 8001374:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001376:	2307      	movs	r3, #7
 8001378:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 800137a:	2304      	movs	r3, #4
 800137c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001382:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fb69 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001398:	f7ff fe12 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <HAL_RNG_MspInit+0x84>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	4a07      	ldr	r2, [pc, #28]	; (80013c0 <HAL_RNG_MspInit+0x84>)
 80013a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a8:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <HAL_RNG_MspInit+0x84>)
 80013aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80013b4:	bf00      	nop
 80013b6:	3798      	adds	r7, #152	; 0x98
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	50060800 	.word	0x50060800
 80013c0:	40021000 	.word	0x40021000

080013c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a0a      	ldr	r2, [pc, #40]	; (80013fc <HAL_TIM_Base_MspInit+0x38>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10b      	bne.n	80013ee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	6593      	str	r3, [r2, #88]	; 0x58
 80013e2:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_TIM_Base_MspInit+0x3c>)
 80013e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40000400 	.word	0x40000400
 8001400:	40021000 	.word	0x40021000

08001404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <HAL_TIM_MspPostInit+0x9c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d137      	bne.n	8001496 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0304 	and.w	r3, r3, #4
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 8001444:	f043 0302 	orr.w	r3, r3, #2
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <HAL_TIM_MspPostInit+0xa0>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001466:	2302      	movs	r3, #2
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146a:	f107 0314 	add.w	r3, r7, #20
 800146e:	4619      	mov	r1, r3
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <HAL_TIM_MspPostInit+0xa4>)
 8001472:	f000 fa87 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001476:	2310      	movs	r3, #16
 8001478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001486:	2302      	movs	r3, #2
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	4619      	mov	r1, r3
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <HAL_TIM_MspPostInit+0xa8>)
 8001492:	f000 fa77 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001496:	bf00      	nop
 8001498:	3728      	adds	r7, #40	; 0x28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40000400 	.word	0x40000400
 80014a4:	40021000 	.word	0x40021000
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000400 	.word	0x48000400

080014b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ac      	sub	sp, #176	; 0xb0
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2288      	movs	r2, #136	; 0x88
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f005 fa51 	bl	8006978 <memset>
  if(huart->Instance==USART2)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <HAL_UART_MspInit+0xb0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d13b      	bne.n	8001558 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4618      	mov	r0, r3
 80014ee:	f001 fab9 	bl	8002a64 <HAL_RCCEx_PeriphCLKConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014f8:	f7ff fd62 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_UART_MspInit+0xb4>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	4a18      	ldr	r2, [pc, #96]	; (8001564 <HAL_UART_MspInit+0xb4>)
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	6593      	str	r3, [r2, #88]	; 0x58
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_UART_MspInit+0xb4>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_UART_MspInit+0xb4>)
 8001516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_UART_MspInit+0xb4>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_UART_MspInit+0xb4>)
 8001522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001524:	f003 0301 	and.w	r3, r3, #1
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152c:	230c      	movs	r3, #12
 800152e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001544:	2307      	movs	r3, #7
 8001546:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800154e:	4619      	mov	r1, r3
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f000 fa16 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	37b0      	adds	r7, #176	; 0xb0
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40004400 	.word	0x40004400
 8001564:	40021000 	.word	0x40021000

08001568 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_InitTick+0xe0>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_InitTick+0xe0>)
 800157c:	f043 0310 	orr.w	r3, r3, #16
 8001580:	6593      	str	r3, [r2, #88]	; 0x58
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_InitTick+0xe0>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	f003 0310 	and.w	r3, r3, #16
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800158e:	f107 0210 	add.w	r2, r7, #16
 8001592:	f107 0314 	add.w	r3, r7, #20
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f001 f9d1 	bl	8002940 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015a8:	f001 f99e 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 80015ac:	6378      	str	r0, [r7, #52]	; 0x34
 80015ae:	e004      	b.n	80015ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015b0:	f001 f99a 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 80015b4:	4603      	mov	r3, r0
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	4a23      	ldr	r2, [pc, #140]	; (800164c <HAL_InitTick+0xe4>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0c9b      	lsrs	r3, r3, #18
 80015c4:	3b01      	subs	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <HAL_InitTick+0xe8>)
 80015ca:	4a22      	ldr	r2, [pc, #136]	; (8001654 <HAL_InitTick+0xec>)
 80015cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015ce:	4b20      	ldr	r3, [pc, #128]	; (8001650 <HAL_InitTick+0xe8>)
 80015d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015d6:	4a1e      	ldr	r2, [pc, #120]	; (8001650 <HAL_InitTick+0xe8>)
 80015d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_InitTick+0xe8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_InitTick+0xe8>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_InitTick+0xe8>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015ee:	4818      	ldr	r0, [pc, #96]	; (8001650 <HAL_InitTick+0xe8>)
 80015f0:	f001 ffaf 	bl	8003552 <HAL_TIM_Base_Init>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11b      	bne.n	800163a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <HAL_InitTick+0xe8>)
 8001604:	f001 fffc 	bl	8003600 <HAL_TIM_Base_Start_IT>
 8001608:	4603      	mov	r3, r0
 800160a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800160e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001612:	2b00      	cmp	r3, #0
 8001614:	d111      	bne.n	800163a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001616:	2036      	movs	r0, #54	; 0x36
 8001618:	f000 f9a6 	bl	8001968 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b0f      	cmp	r3, #15
 8001620:	d808      	bhi.n	8001634 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001622:	2200      	movs	r2, #0
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	2036      	movs	r0, #54	; 0x36
 8001628:	f000 f982 	bl	8001930 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_InitTick+0xf0>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e002      	b.n	800163a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800163a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800163e:	4618      	mov	r0, r3
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	431bde83 	.word	0x431bde83
 8001650:	20000450 	.word	0x20000450
 8001654:	40001000 	.word	0x40001000
 8001658:	20000004 	.word	0x20000004

0800165c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <NMI_Handler+0x4>

08001662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <MemManage_Handler+0x4>

0800166e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <BusFault_Handler+0x4>

08001674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <UsageFault_Handler+0x4>

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn3_Pin);
 800168c:	2001      	movs	r0, #1
 800168e:	f000 fb3b 	bl	8001d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}

08001696 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn1_Pin);
 800169a:	2002      	movs	r0, #2
 800169c:	f000 fb34 	bl	8001d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn2_Pin);
 80016a8:	2010      	movs	r0, #16
 80016aa:	f000 fb2d 	bl	8001d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <TIM6_DAC_IRQHandler+0x10>)
 80016ba:	f002 f979 	bl	80039b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000450 	.word	0x20000450

080016c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001724 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	; (8001728 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	; (800172c <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <LoopForever+0xe>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	; (8001738 <LoopForever+0x16>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f005 f907 	bl	800692c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171e:	f7ff f993 	bl	8000a48 <main>

08001722 <LoopForever>:

LoopForever:
    b LoopForever
 8001722:	e7fe      	b.n	8001722 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001724:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001730:	08006d64 	.word	0x08006d64
  ldr r2, =_sbss
 8001734:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001738:	200011b4 	.word	0x200011b4

0800173c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC1_2_IRQHandler>
	...

08001740 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <HAL_Init+0x3c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a0b      	ldr	r2, [pc, #44]	; (800177c <HAL_Init+0x3c>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001756:	2003      	movs	r0, #3
 8001758:	f000 f8df 	bl	800191a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800175c:	200f      	movs	r0, #15
 800175e:	f7ff ff03 	bl	8001568 <HAL_InitTick>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d002      	beq.n	800176e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	71fb      	strb	r3, [r7, #7]
 800176c:	e001      	b.n	8001772 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800176e:	f7ff fdbd 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001772:	79fb      	ldrb	r3, [r7, #7]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40022000 	.word	0x40022000

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000008 	.word	0x20000008
 80017a4:	2000049c 	.word	0x2000049c

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	2000049c 	.word	0x2000049c

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	; (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	; 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	; 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ff4c 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001942:	f7ff ff61 	bl	8001808 <__NVIC_GetPriorityGrouping>
 8001946:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	68b9      	ldr	r1, [r7, #8]
 800194c:	6978      	ldr	r0, [r7, #20]
 800194e:	f7ff ffb1 	bl	80018b4 <NVIC_EncodePriority>
 8001952:	4602      	mov	r2, r0
 8001954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001958:	4611      	mov	r1, r2
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff80 	bl	8001860 <__NVIC_SetPriority>
}
 8001960:	bf00      	nop
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff54 	bl	8001824 <__NVIC_EnableIRQ>
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e17f      	b.n	8001c94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8171 	beq.w	8001c8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d005      	beq.n	80019c4 <HAL_GPIO_Init+0x40>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d118      	bne.n	8001a64 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	f003 0201 	and.w	r2, r3, #1
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d017      	beq.n	8001aa0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	6939      	ldr	r1, [r7, #16]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ac 	beq.w	8001c8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	4b5f      	ldr	r3, [pc, #380]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b3a:	4a5e      	ldr	r2, [pc, #376]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	6613      	str	r3, [r2, #96]	; 0x60
 8001b42:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <HAL_GPIO_Init+0x330>)
 8001b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_GPIO_Init+0x334>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b78:	d025      	beq.n	8001bc6 <HAL_GPIO_Init+0x242>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a4f      	ldr	r2, [pc, #316]	; (8001cbc <HAL_GPIO_Init+0x338>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d01f      	beq.n	8001bc2 <HAL_GPIO_Init+0x23e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a4e      	ldr	r2, [pc, #312]	; (8001cc0 <HAL_GPIO_Init+0x33c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d019      	beq.n	8001bbe <HAL_GPIO_Init+0x23a>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a4d      	ldr	r2, [pc, #308]	; (8001cc4 <HAL_GPIO_Init+0x340>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0x236>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a4c      	ldr	r2, [pc, #304]	; (8001cc8 <HAL_GPIO_Init+0x344>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00d      	beq.n	8001bb6 <HAL_GPIO_Init+0x232>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4b      	ldr	r2, [pc, #300]	; (8001ccc <HAL_GPIO_Init+0x348>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d007      	beq.n	8001bb2 <HAL_GPIO_Init+0x22e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4a      	ldr	r2, [pc, #296]	; (8001cd0 <HAL_GPIO_Init+0x34c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_GPIO_Init+0x22a>
 8001baa:	2306      	movs	r3, #6
 8001bac:	e00c      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bae:	2307      	movs	r3, #7
 8001bb0:	e00a      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bb2:	2305      	movs	r3, #5
 8001bb4:	e008      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	e006      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e004      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e000      	b.n	8001bc8 <HAL_GPIO_Init+0x244>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	f002 0203 	and.w	r2, r2, #3
 8001bce:	0092      	lsls	r2, r2, #2
 8001bd0:	4093      	lsls	r3, r2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bd8:	4937      	ldr	r1, [pc, #220]	; (8001cb8 <HAL_GPIO_Init+0x334>)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	089b      	lsrs	r3, r3, #2
 8001bde:	3302      	adds	r3, #2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be6:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c0a:	4a32      	ldr	r2, [pc, #200]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c10:	4b30      	ldr	r3, [pc, #192]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c34:	4a27      	ldr	r2, [pc, #156]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c88:	4a12      	ldr	r2, [pc, #72]	; (8001cd4 <HAL_GPIO_Init+0x350>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f47f ae78 	bne.w	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001ca4:	bf00      	nop
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010000 	.word	0x40010000
 8001cbc:	48000400 	.word	0x48000400
 8001cc0:	48000800 	.word	0x48000800
 8001cc4:	48000c00 	.word	0x48000c00
 8001cc8:	48001000 	.word	0x48001000
 8001ccc:	48001400 	.word	0x48001400
 8001cd0:	48001800 	.word	0x48001800
 8001cd4:	40010400 	.word	0x40010400

08001cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	807b      	strh	r3, [r7, #2]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce8:	787b      	ldrb	r3, [r7, #1]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cee:	887a      	ldrh	r2, [r7, #2]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cf4:	e002      	b.n	8001cfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d12:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d1e:	4a05      	ldr	r2, [pc, #20]	; (8001d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fcd4 	bl	80006d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010400 	.word	0x40010400

08001d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40007000 	.word	0x40007000

08001d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d62:	d130      	bne.n	8001dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d64:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d70:	d038      	beq.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d72:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d7a:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2232      	movs	r2, #50	; 0x32
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	4a1b      	ldr	r2, [pc, #108]	; (8001dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d92:	0c9b      	lsrs	r3, r3, #18
 8001d94:	3301      	adds	r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d98:	e002      	b.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dac:	d102      	bne.n	8001db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1f2      	bne.n	8001d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db4:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dc0:	d110      	bne.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e00f      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dc6:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd2:	d007      	beq.n	8001de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ddc:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40007000 	.word	0x40007000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b088      	sub	sp, #32
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e3ca      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e12:	4b97      	ldr	r3, [pc, #604]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e1c:	4b94      	ldr	r3, [pc, #592]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80e4 	beq.w	8001ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4a>
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2b0c      	cmp	r3, #12
 8001e3e:	f040 808b 	bne.w	8001f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 8087 	bne.w	8001f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e4a:	4b89      	ldr	r3, [pc, #548]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x62>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e3a2      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a1a      	ldr	r2, [r3, #32]
 8001e66:	4b82      	ldr	r3, [pc, #520]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d004      	beq.n	8001e7c <HAL_RCC_OscConfig+0x7c>
 8001e72:	4b7f      	ldr	r3, [pc, #508]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_OscConfig+0x88>
 8001e7c:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e82:	091b      	lsrs	r3, r3, #4
 8001e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d223      	bcs.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fd87 	bl	80029a4 <RCC_SetFlashLatencyFromMSIRange>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e383      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ea0:	4b73      	ldr	r3, [pc, #460]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a72      	ldr	r2, [pc, #456]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b70      	ldr	r3, [pc, #448]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	496d      	ldr	r1, [pc, #436]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ebe:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	4968      	ldr	r1, [pc, #416]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
 8001ed2:	e025      	b.n	8001f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a65      	ldr	r2, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	4960      	ldr	r1, [pc, #384]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	495b      	ldr	r1, [pc, #364]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 fd47 	bl	80029a4 <RCC_SetFlashLatencyFromMSIRange>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e343      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f20:	f000 fc4a 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b52      	ldr	r3, [pc, #328]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	4950      	ldr	r1, [pc, #320]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
 8001f3c:	4a4e      	ldr	r2, [pc, #312]	; (8002078 <HAL_RCC_OscConfig+0x278>)
 8001f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <HAL_RCC_OscConfig+0x27c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fb0f 	bl	8001568 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d052      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	e327      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d032      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a42      	ldr	r2, [pc, #264]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fc1c 	bl	80017a8 <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f74:	f7ff fc18 	bl	80017a8 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e310      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f92:	4b37      	ldr	r3, [pc, #220]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a36      	ldr	r2, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f98:	f043 0308 	orr.w	r3, r3, #8
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b34      	ldr	r3, [pc, #208]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1b      	ldr	r3, [r3, #32]
 8001faa:	4931      	ldr	r1, [pc, #196]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	492c      	ldr	r1, [pc, #176]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e01a      	b.n	8001ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a29      	ldr	r2, [pc, #164]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fbe9 	bl	80017a8 <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fda:	f7ff fbe5 	bl	80017a8 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e2dd      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x1da>
 8001ff8:	e000      	b.n	8001ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d074      	beq.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d005      	beq.n	800201a <HAL_RCC_OscConfig+0x21a>
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d10e      	bne.n	8002032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d10b      	bne.n	8002032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d064      	beq.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d160      	bne.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e2ba      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x24a>
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	e026      	b.n	8002098 <HAL_RCC_OscConfig+0x298>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002052:	d115      	bne.n	8002080 <HAL_RCC_OscConfig+0x280>
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a05      	ldr	r2, [pc, #20]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 800205a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a02      	ldr	r2, [pc, #8]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8002066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	e014      	b.n	8002098 <HAL_RCC_OscConfig+0x298>
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000
 8002074:	08006cac 	.word	0x08006cac
 8002078:	20000000 	.word	0x20000000
 800207c:	20000004 	.word	0x20000004
 8002080:	4ba0      	ldr	r3, [pc, #640]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a9f      	ldr	r2, [pc, #636]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b9d      	ldr	r3, [pc, #628]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a9c      	ldr	r2, [pc, #624]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff fb82 	bl	80017a8 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fb7e 	bl	80017a8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	; 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e276      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ba:	4b92      	ldr	r3, [pc, #584]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x2a8>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff fb6e 	bl	80017a8 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fb6a 	bl	80017a8 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	; 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e262      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2d0>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d060      	beq.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	2b04      	cmp	r3, #4
 8002102:	d005      	beq.n	8002110 <HAL_RCC_OscConfig+0x310>
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	2b0c      	cmp	r3, #12
 8002108:	d119      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d116      	bne.n	800213e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002110:	4b7c      	ldr	r3, [pc, #496]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002118:	2b00      	cmp	r3, #0
 800211a:	d005      	beq.n	8002128 <HAL_RCC_OscConfig+0x328>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e23f      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	4973      	ldr	r1, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002138:	4313      	orrs	r3, r2
 800213a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800213c:	e040      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d023      	beq.n	800218e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002146:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7ff fb29 	bl	80017a8 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215a:	f7ff fb25 	bl	80017a8 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b02      	cmp	r3, #2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e21d      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800216c:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002178:	4b62      	ldr	r3, [pc, #392]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	061b      	lsls	r3, r3, #24
 8002186:	495f      	ldr	r1, [pc, #380]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
 800218c:	e018      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5c      	ldr	r2, [pc, #368]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff fb05 	bl	80017a8 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a2:	f7ff fb01 	bl	80017a8 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e1f9      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1f0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0308 	and.w	r3, r3, #8
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03c      	beq.n	8002246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	695b      	ldr	r3, [r3, #20]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d4:	4b4b      	ldr	r3, [pc, #300]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021da:	4a4a      	ldr	r2, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff fae0 	bl	80017a8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fadc 	bl	80017a8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1d4      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <HAL_RCC_OscConfig+0x3ec>
 800220c:	e01b      	b.n	8002246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002214:	4a3b      	ldr	r2, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff fac3 	bl	80017a8 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002226:	f7ff fabf 	bl	80017a8 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e1b7      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002238:	4b32      	ldr	r3, [pc, #200]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800223a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80a6 	beq.w	80023a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800225a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b27      	ldr	r3, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002268:	4a26      	ldr	r2, [pc, #152]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	; 0x58
 8002270:	4b24      	ldr	r3, [pc, #144]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a1d      	ldr	r2, [pc, #116]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7ff fa86 	bl	80017a8 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7ff fa82 	bl	80017a8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e17a      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	4b15      	ldr	r3, [pc, #84]	; (8002308 <HAL_RCC_OscConfig+0x508>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d108      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4d8>
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	4a0d      	ldr	r2, [pc, #52]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d6:	e029      	b.n	800232c <HAL_RCC_OscConfig+0x52c>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	d115      	bne.n	800230c <HAL_RCC_OscConfig+0x50c>
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e6:	4a07      	ldr	r2, [pc, #28]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022f0:	4b04      	ldr	r3, [pc, #16]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f6:	4a03      	ldr	r2, [pc, #12]	; (8002304 <HAL_RCC_OscConfig+0x504>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002300:	e014      	b.n	800232c <HAL_RCC_OscConfig+0x52c>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	4b9c      	ldr	r3, [pc, #624]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800230e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002312:	4a9b      	ldr	r2, [pc, #620]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002314:	f023 0301 	bic.w	r3, r3, #1
 8002318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800231c:	4b98      	ldr	r3, [pc, #608]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800231e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002322:	4a97      	ldr	r2, [pc, #604]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002324:	f023 0304 	bic.w	r3, r3, #4
 8002328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d016      	beq.n	8002362 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7ff fa38 	bl	80017a8 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800233a:	e00a      	b.n	8002352 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7ff fa34 	bl	80017a8 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e12a      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b8b      	ldr	r3, [pc, #556]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ed      	beq.n	800233c <HAL_RCC_OscConfig+0x53c>
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002362:	f7ff fa21 	bl	80017a8 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002368:	e00a      	b.n	8002380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7ff fa1d 	bl	80017a8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e113      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002380:	4b7f      	ldr	r3, [pc, #508]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1ed      	bne.n	800236a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800238e:	7ffb      	ldrb	r3, [r7, #31]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d105      	bne.n	80023a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002394:	4b7a      	ldr	r3, [pc, #488]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	4a79      	ldr	r2, [pc, #484]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800239a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800239e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80fe 	beq.w	80025a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80d0 	bne.w	8002554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023b4:	4b72      	ldr	r3, [pc, #456]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0203 	and.w	r2, r3, #3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d130      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	3b01      	subs	r3, #1
 80023d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d127      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d11f      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023f4:	2a07      	cmp	r2, #7
 80023f6:	bf14      	ite	ne
 80023f8:	2201      	movne	r2, #1
 80023fa:	2200      	moveq	r2, #0
 80023fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fe:	4293      	cmp	r3, r2
 8002400:	d113      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d109      	bne.n	800242a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002426:	429a      	cmp	r2, r3
 8002428:	d06e      	beq.n	8002508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d069      	beq.n	8002504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002430:	4b53      	ldr	r3, [pc, #332]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d105      	bne.n	8002448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0ad      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800244c:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4b      	ldr	r2, [pc, #300]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002458:	f7ff f9a6 	bl	80017a8 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff f9a2 	bl	80017a8 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e09a      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002472:	4b43      	ldr	r3, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	4b40      	ldr	r3, [pc, #256]	; (8002584 <HAL_RCC_OscConfig+0x784>)
 8002484:	4013      	ands	r3, r2
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800248e:	3a01      	subs	r2, #1
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	4311      	orrs	r1, r2
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002498:	0212      	lsls	r2, r2, #8
 800249a:	4311      	orrs	r1, r2
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024a0:	0852      	lsrs	r2, r2, #1
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0552      	lsls	r2, r2, #21
 80024a6:	4311      	orrs	r1, r2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ac:	0852      	lsrs	r2, r2, #1
 80024ae:	3a01      	subs	r2, #1
 80024b0:	0652      	lsls	r2, r2, #25
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024b8:	0912      	lsrs	r2, r2, #4
 80024ba:	0452      	lsls	r2, r2, #17
 80024bc:	430a      	orrs	r2, r1
 80024be:	4930      	ldr	r1, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2d      	ldr	r2, [pc, #180]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4a2a      	ldr	r2, [pc, #168]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024dc:	f7ff f964 	bl	80017a8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e4:	f7ff f960 	bl	80017a8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e058      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002502:	e050      	b.n	80025a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e04f      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d148      	bne.n	80025a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002514:	4b1a      	ldr	r3, [pc, #104]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a19      	ldr	r2, [pc, #100]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a16      	ldr	r2, [pc, #88]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800252c:	f7ff f93c 	bl	80017a8 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff f938 	bl	80017a8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e030      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x734>
 8002552:	e028      	b.n	80025a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	2b0c      	cmp	r3, #12
 8002558:	d023      	beq.n	80025a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800255a:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a08      	ldr	r2, [pc, #32]	; (8002580 <HAL_RCC_OscConfig+0x780>)
 8002560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff f91f 	bl	80017a8 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256c:	e00c      	b.n	8002588 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7ff f91b 	bl	80017a8 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d905      	bls.n	8002588 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e013      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
 8002580:	40021000 	.word	0x40021000
 8002584:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_OscConfig+0x7b0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ec      	bne.n	800256e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002594:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_RCC_OscConfig+0x7b0>)
 8002596:	68da      	ldr	r2, [r3, #12]
 8002598:	4905      	ldr	r1, [pc, #20]	; (80025b0 <HAL_RCC_OscConfig+0x7b0>)
 800259a:	4b06      	ldr	r3, [pc, #24]	; (80025b4 <HAL_RCC_OscConfig+0x7b4>)
 800259c:	4013      	ands	r3, r2
 800259e:	60cb      	str	r3, [r1, #12]
 80025a0:	e001      	b.n	80025a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3720      	adds	r7, #32
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000
 80025b4:	feeefffc 	.word	0xfeeefffc

080025b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0e7      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025cc:	4b75      	ldr	r3, [pc, #468]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d910      	bls.n	80025fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4970      	ldr	r1, [pc, #448]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b6e      	ldr	r3, [pc, #440]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0cf      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d010      	beq.n	800262a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	4b66      	ldr	r3, [pc, #408]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002614:	429a      	cmp	r2, r3
 8002616:	d908      	bls.n	800262a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4960      	ldr	r1, [pc, #384]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	4313      	orrs	r3, r2
 8002628:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d04c      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b03      	cmp	r3, #3
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800263e:	4b5a      	ldr	r3, [pc, #360]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d121      	bne.n	800268e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0a6      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d115      	bne.n	800268e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e09a      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d107      	bne.n	800267e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800266e:	4b4e      	ldr	r3, [pc, #312]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d109      	bne.n	800268e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e08e      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e086      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800268e:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	4943      	ldr	r1, [pc, #268]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a0:	f7ff f882 	bl	80017a8 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	e00a      	b.n	80026be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a8:	f7ff f87e 	bl	80017a8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e06e      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026be:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 020c 	and.w	r2, r3, #12
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d1eb      	bne.n	80026a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689a      	ldr	r2, [r3, #8]
 80026e0:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d208      	bcs.n	80026fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	492b      	ldr	r1, [pc, #172]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d210      	bcs.n	800272e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f023 0207 	bic.w	r2, r3, #7
 8002714:	4923      	ldr	r1, [pc, #140]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <HAL_RCC_ClockConfig+0x1ec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d001      	beq.n	800272e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e036      	b.n	800279c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	4918      	ldr	r1, [pc, #96]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002748:	4313      	orrs	r3, r2
 800274a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0308 	and.w	r3, r3, #8
 8002754:	2b00      	cmp	r3, #0
 8002756:	d009      	beq.n	800276c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4910      	ldr	r1, [pc, #64]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	4313      	orrs	r3, r2
 800276a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800276c:	f000 f824 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b0d      	ldr	r3, [pc, #52]	; (80027a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	091b      	lsrs	r3, r3, #4
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	490b      	ldr	r1, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1f4>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	fa22 f303 	lsr.w	r3, r2, r3
 8002788:	4a09      	ldr	r2, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800278c:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1fc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fe fee9 	bl	8001568 <HAL_InitTick>
 8002796:	4603      	mov	r3, r0
 8002798:	72fb      	strb	r3, [r7, #11]

  return status;
 800279a:	7afb      	ldrb	r3, [r7, #11]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08006cac 	.word	0x08006cac
 80027b0:	20000000 	.word	0x20000000
 80027b4:	20000004 	.word	0x20000004

080027b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b089      	sub	sp, #36	; 0x24
 80027bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c6:	4b3e      	ldr	r3, [pc, #248]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 030c 	and.w	r3, r3, #12
 80027ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d0:	4b3b      	ldr	r3, [pc, #236]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x34>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b0c      	cmp	r3, #12
 80027e4:	d121      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d11e      	bne.n	800282a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027ec:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0308 	and.w	r3, r3, #8
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027f8:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027fe:	0a1b      	lsrs	r3, r3, #8
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	61fb      	str	r3, [r7, #28]
 8002806:	e005      	b.n	8002814 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002814:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800281c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d102      	bne.n	8002836 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002832:	61bb      	str	r3, [r7, #24]
 8002834:	e004      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d101      	bne.n	8002840 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800283c:	4b23      	ldr	r3, [pc, #140]	; (80028cc <HAL_RCC_GetSysClockFreq+0x114>)
 800283e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b0c      	cmp	r3, #12
 8002844:	d134      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002846:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d003      	beq.n	800285e <HAL_RCC_GetSysClockFreq+0xa6>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d003      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0xac>
 800285c:	e005      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002860:	617b      	str	r3, [r7, #20]
      break;
 8002862:	e005      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_GetSysClockFreq+0x114>)
 8002866:	617b      	str	r3, [r7, #20]
      break;
 8002868:	e002      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	617b      	str	r3, [r7, #20]
      break;
 800286e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	3301      	adds	r3, #1
 800287c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800287e:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	0a1b      	lsrs	r3, r3, #8
 8002884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	fb03 f202 	mul.w	r2, r3, r2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	fbb2 f3f3 	udiv	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002896:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	0e5b      	lsrs	r3, r3, #25
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	3301      	adds	r3, #1
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028b0:	69bb      	ldr	r3, [r7, #24]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	08006cc4 	.word	0x08006cc4
 80028c8:	00f42400 	.word	0x00f42400
 80028cc:	007a1200 	.word	0x007a1200

080028d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d4:	4b03      	ldr	r3, [pc, #12]	; (80028e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028d6:	681b      	ldr	r3, [r3, #0]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	20000000 	.word	0x20000000

080028e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028ec:	f7ff fff0 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4904      	ldr	r1, [pc, #16]	; (8002910 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	08006cbc 	.word	0x08006cbc

08002914 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002918:	f7ff ffda 	bl	80028d0 <HAL_RCC_GetHCLKFreq>
 800291c:	4602      	mov	r2, r0
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	0adb      	lsrs	r3, r3, #11
 8002924:	f003 0307 	and.w	r3, r3, #7
 8002928:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_RCC_GetPCLK2Freq+0x28>)
 800292a:	5ccb      	ldrb	r3, [r1, r3]
 800292c:	f003 031f 	and.w	r3, r3, #31
 8002930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002934:	4618      	mov	r0, r3
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	08006cbc 	.word	0x08006cbc

08002940 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	220f      	movs	r2, #15
 800294e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_GetClockConfig+0x5c>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <HAL_RCC_GetClockConfig+0x5c>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002968:	4b0c      	ldr	r3, [pc, #48]	; (800299c <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002974:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <HAL_RCC_GetClockConfig+0x60>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0207 	and.w	r2, r3, #7
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40021000 	.word	0x40021000
 80029a0:	40022000 	.word	0x40022000

080029a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80029bc:	f7ff f9bc 	bl	8001d38 <HAL_PWREx_GetVoltageRange>
 80029c0:	6178      	str	r0, [r7, #20]
 80029c2:	e014      	b.n	80029ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	4a24      	ldr	r2, [pc, #144]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6593      	str	r3, [r2, #88]	; 0x58
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029dc:	f7ff f9ac 	bl	8001d38 <HAL_PWREx_GetVoltageRange>
 80029e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	4a1d      	ldr	r2, [pc, #116]	; (8002a5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d10b      	bne.n	8002a0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b80      	cmp	r3, #128	; 0x80
 80029fa:	d919      	bls.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2ba0      	cmp	r3, #160	; 0xa0
 8002a00:	d902      	bls.n	8002a08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a02:	2302      	movs	r3, #2
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	e013      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a08:	2301      	movs	r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e010      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d902      	bls.n	8002a1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002a14:	2303      	movs	r3, #3
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	e00a      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d102      	bne.n	8002a26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002a20:	2302      	movs	r3, #2
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	e004      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2b70      	cmp	r3, #112	; 0x70
 8002a2a:	d101      	bne.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 0207 	bic.w	r2, r3, #7
 8002a38:	4909      	ldr	r1, [pc, #36]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d001      	beq.n	8002a52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40022000 	.word	0x40022000

08002a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a70:	2300      	movs	r3, #0
 8002a72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d041      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a88:	d02a      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002a8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a8e:	d824      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a94:	d008      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a9a:	d81e      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002aa6:	e018      	b.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aa8:	4b86      	ldr	r3, [pc, #536]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a85      	ldr	r2, [pc, #532]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2100      	movs	r1, #0
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 fabb 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ac6:	e00c      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3320      	adds	r3, #32
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 fba6 	bl	8003220 <RCCEx_PLLSAI2_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ad8:	e003      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	74fb      	strb	r3, [r7, #19]
      break;
 8002ade:	e000      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10b      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ae8:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002af6:	4973      	ldr	r1, [pc, #460]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002afe:	e001      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d041      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b18:	d02a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002b1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002b1e:	d824      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b2a:	d81e      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b34:	d010      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002b36:	e018      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b38:	4b62      	ldr	r3, [pc, #392]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4a61      	ldr	r2, [pc, #388]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b44:	e015      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fa73 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002b52:	4603      	mov	r3, r0
 8002b54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b56:	e00c      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3320      	adds	r3, #32
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f000 fb5e 	bl	8003220 <RCCEx_PLLSAI2_Config>
 8002b64:	4603      	mov	r3, r0
 8002b66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002b68:	e003      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	74fb      	strb	r3, [r7, #19]
      break;
 8002b6e:	e000      	b.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b72:	7cfb      	ldrb	r3, [r7, #19]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10b      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b78:	4b52      	ldr	r3, [pc, #328]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b86:	494f      	ldr	r1, [pc, #316]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002b8e:	e001      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 80a0 	beq.w	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00d      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bbc:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	4a40      	ldr	r2, [pc, #256]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002bc8:	4b3e      	ldr	r3, [pc, #248]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a3a      	ldr	r2, [pc, #232]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be4:	f7fe fde0 	bl	80017a8 <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bea:	e009      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe fddc 	bl	80017a8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d902      	bls.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	74fb      	strb	r3, [r7, #19]
        break;
 8002bfe:	e005      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c00:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0ef      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002c0c:	7cfb      	ldrb	r3, [r7, #19]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d15c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c12:	4b2c      	ldr	r3, [pc, #176]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d01f      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d019      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c30:	4b24      	ldr	r3, [pc, #144]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c3c:	4b21      	ldr	r3, [pc, #132]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	4a20      	ldr	r2, [pc, #128]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c5c:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d016      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fd9b 	bl	80017a8 <HAL_GetTick>
 8002c72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c74:	e00b      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c76:	f7fe fd97 	bl	80017a8 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d902      	bls.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c8c:	e006      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8e:	4b0d      	ldr	r3, [pc, #52]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ec      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002c9c:	7cfb      	ldrb	r3, [r7, #19]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca2:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb2:	4904      	ldr	r1, [pc, #16]	; (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cba:	e009      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	74bb      	strb	r3, [r7, #18]
 8002cc0:	e006      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	7cfb      	ldrb	r3, [r7, #19]
 8002cce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cd0:	7c7b      	ldrb	r3, [r7, #17]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d105      	bne.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cd6:	4b9e      	ldr	r3, [pc, #632]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	4a9d      	ldr	r2, [pc, #628]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cee:	4b98      	ldr	r3, [pc, #608]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf4:	f023 0203 	bic.w	r2, r3, #3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	4994      	ldr	r1, [pc, #592]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d10:	4b8f      	ldr	r3, [pc, #572]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 020c 	bic.w	r2, r3, #12
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	498c      	ldr	r1, [pc, #560]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d32:	4b87      	ldr	r3, [pc, #540]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4983      	ldr	r1, [pc, #524]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d54:	4b7e      	ldr	r3, [pc, #504]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	497b      	ldr	r1, [pc, #492]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d76:	4b76      	ldr	r3, [pc, #472]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	4972      	ldr	r1, [pc, #456]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d98:	4b6d      	ldr	r3, [pc, #436]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	496a      	ldr	r1, [pc, #424]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dba:	4b65      	ldr	r3, [pc, #404]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	4961      	ldr	r1, [pc, #388]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ddc:	4b5c      	ldr	r3, [pc, #368]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dea:	4959      	ldr	r1, [pc, #356]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b54      	ldr	r3, [pc, #336]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e0c:	4950      	ldr	r1, [pc, #320]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e20:	4b4b      	ldr	r3, [pc, #300]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	4948      	ldr	r1, [pc, #288]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e42:	4b43      	ldr	r3, [pc, #268]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e50:	493f      	ldr	r1, [pc, #252]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d028      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e64:	4b3a      	ldr	r3, [pc, #232]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e72:	4937      	ldr	r1, [pc, #220]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e82:	d106      	bne.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b32      	ldr	r3, [pc, #200]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a31      	ldr	r2, [pc, #196]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
 8002e90:	e011      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e9a:	d10c      	bne.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f8c8 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002eb2:	7cfb      	ldrb	r3, [r7, #19]
 8002eb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d028      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	491f      	ldr	r1, [pc, #124]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee2:	4b1b      	ldr	r3, [pc, #108]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	60d3      	str	r3, [r2, #12]
 8002eee:	e011      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3304      	adds	r3, #4
 8002efe:	2101      	movs	r1, #1
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f899 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002f06:	4603      	mov	r3, r0
 8002f08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f0a:	7cfb      	ldrb	r3, [r7, #19]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002f10:	7cfb      	ldrb	r3, [r7, #19]
 8002f12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2e:	4908      	ldr	r1, [pc, #32]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f3e:	d109      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f40:	4b03      	ldr	r3, [pc, #12]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a02      	ldr	r2, [pc, #8]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f4a:	60d3      	str	r3, [r2, #12]
 8002f4c:	e014      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002f4e:	bf00      	nop
 8002f50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3304      	adds	r3, #4
 8002f62:	2101      	movs	r1, #1
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f867 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f6e:	7cfb      	ldrb	r3, [r7, #19]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002f74:	7cfb      	ldrb	r3, [r7, #19]
 8002f76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d02f      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f84:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f92:	4928      	ldr	r1, [pc, #160]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fa2:	d10d      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	3304      	adds	r3, #4
 8002fa8:	2102      	movs	r1, #2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 f844 	bl	8003038 <RCCEx_PLLSAI1_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fb4:	7cfb      	ldrb	r3, [r7, #19]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d014      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	74bb      	strb	r3, [r7, #18]
 8002fbe:	e011      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3320      	adds	r3, #32
 8002fce:	2102      	movs	r1, #2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 f925 	bl	8003220 <RCCEx_PLLSAI2_Config>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002fe0:	7cfb      	ldrb	r3, [r7, #19]
 8002fe2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d00a      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ffe:	490d      	ldr	r1, [pc, #52]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00b      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003022:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800302a:	7cbb      	ldrb	r3, [r7, #18]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40021000 	.word	0x40021000

08003038 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003046:	4b75      	ldr	r3, [pc, #468]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d018      	beq.n	8003084 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003052:	4b72      	ldr	r3, [pc, #456]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	f003 0203 	and.w	r2, r3, #3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d10d      	bne.n	800307e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
       ||
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800306a:	4b6c      	ldr	r3, [pc, #432]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	091b      	lsrs	r3, r3, #4
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
       ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d047      	beq.n	800310e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e044      	b.n	800310e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d018      	beq.n	80030be <RCCEx_PLLSAI1_Config+0x86>
 800308c:	2b03      	cmp	r3, #3
 800308e:	d825      	bhi.n	80030dc <RCCEx_PLLSAI1_Config+0xa4>
 8003090:	2b01      	cmp	r3, #1
 8003092:	d002      	beq.n	800309a <RCCEx_PLLSAI1_Config+0x62>
 8003094:	2b02      	cmp	r3, #2
 8003096:	d009      	beq.n	80030ac <RCCEx_PLLSAI1_Config+0x74>
 8003098:	e020      	b.n	80030dc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800309a:	4b60      	ldr	r3, [pc, #384]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d11d      	bne.n	80030e2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030aa:	e01a      	b.n	80030e2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030ac:	4b5b      	ldr	r3, [pc, #364]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d116      	bne.n	80030e6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e013      	b.n	80030e6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030be:	4b57      	ldr	r3, [pc, #348]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10f      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ca:	4b54      	ldr	r3, [pc, #336]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d109      	bne.n	80030ea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030da:	e006      	b.n	80030ea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
      break;
 80030e0:	e004      	b.n	80030ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e2:	bf00      	nop
 80030e4:	e002      	b.n	80030ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030e6:	bf00      	nop
 80030e8:	e000      	b.n	80030ec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80030ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10d      	bne.n	800310e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030f2:	4b4a      	ldr	r3, [pc, #296]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6819      	ldr	r1, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	430b      	orrs	r3, r1
 8003108:	4944      	ldr	r1, [pc, #272]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800310e:	7bfb      	ldrb	r3, [r7, #15]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d17d      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003114:	4b41      	ldr	r3, [pc, #260]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a40      	ldr	r2, [pc, #256]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800311a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800311e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003120:	f7fe fb42 	bl	80017a8 <HAL_GetTick>
 8003124:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003126:	e009      	b.n	800313c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003128:	f7fe fb3e 	bl	80017a8 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d902      	bls.n	800313c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	73fb      	strb	r3, [r7, #15]
        break;
 800313a:	e005      	b.n	8003148 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1ef      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003148:	7bfb      	ldrb	r3, [r7, #15]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d160      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d111      	bne.n	8003178 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003154:	4b31      	ldr	r3, [pc, #196]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800315c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	0211      	lsls	r1, r2, #8
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68d2      	ldr	r2, [r2, #12]
 800316a:	0912      	lsrs	r2, r2, #4
 800316c:	0452      	lsls	r2, r2, #17
 800316e:	430a      	orrs	r2, r1
 8003170:	492a      	ldr	r1, [pc, #168]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003172:	4313      	orrs	r3, r2
 8003174:	610b      	str	r3, [r1, #16]
 8003176:	e027      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d112      	bne.n	80031a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800317e:	4b27      	ldr	r3, [pc, #156]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	0211      	lsls	r1, r2, #8
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6912      	ldr	r2, [r2, #16]
 8003194:	0852      	lsrs	r2, r2, #1
 8003196:	3a01      	subs	r2, #1
 8003198:	0552      	lsls	r2, r2, #21
 800319a:	430a      	orrs	r2, r1
 800319c:	491f      	ldr	r1, [pc, #124]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	610b      	str	r3, [r1, #16]
 80031a2:	e011      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031a4:	4b1d      	ldr	r3, [pc, #116]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6892      	ldr	r2, [r2, #8]
 80031b4:	0211      	lsls	r1, r2, #8
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6952      	ldr	r2, [r2, #20]
 80031ba:	0852      	lsrs	r2, r2, #1
 80031bc:	3a01      	subs	r2, #1
 80031be:	0652      	lsls	r2, r2, #25
 80031c0:	430a      	orrs	r2, r1
 80031c2:	4916      	ldr	r1, [pc, #88]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a13      	ldr	r2, [pc, #76]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d4:	f7fe fae8 	bl	80017a8 <HAL_GetTick>
 80031d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031da:	e009      	b.n	80031f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031dc:	f7fe fae4 	bl	80017a8 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d902      	bls.n	80031f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	73fb      	strb	r3, [r7, #15]
          break;
 80031ee:	e005      	b.n	80031fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80031f0:	4b0a      	ldr	r3, [pc, #40]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0ef      	beq.n	80031dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	4904      	ldr	r1, [pc, #16]	; (800321c <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003210:	7bfb      	ldrb	r3, [r7, #15]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000

08003220 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322e:	4b6a      	ldr	r3, [pc, #424]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800323a:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d10d      	bne.n	8003266 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
       ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003252:	4b61      	ldr	r3, [pc, #388]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
       ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d047      	beq.n	80032f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e044      	b.n	80032f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d018      	beq.n	80032a6 <RCCEx_PLLSAI2_Config+0x86>
 8003274:	2b03      	cmp	r3, #3
 8003276:	d825      	bhi.n	80032c4 <RCCEx_PLLSAI2_Config+0xa4>
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <RCCEx_PLLSAI2_Config+0x62>
 800327c:	2b02      	cmp	r3, #2
 800327e:	d009      	beq.n	8003294 <RCCEx_PLLSAI2_Config+0x74>
 8003280:	e020      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003282:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11d      	bne.n	80032ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e01a      	b.n	80032ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003294:	4b50      	ldr	r3, [pc, #320]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a4:	e013      	b.n	80032ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032a6:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032c2:	e006      	b.n	80032d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e004      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e002      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80032d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032da:	4b3f      	ldr	r3, [pc, #252]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	430b      	orrs	r3, r1
 80032f0:	4939      	ldr	r1, [pc, #228]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d167      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a35      	ldr	r2, [pc, #212]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fe fa4e 	bl	80017a8 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800330e:	e009      	b.n	8003324 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003310:	f7fe fa4a 	bl	80017a8 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
        break;
 8003322:	e005      	b.n	8003330 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d14a      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800333c:	4b26      	ldr	r3, [pc, #152]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	0912      	lsrs	r2, r2, #4
 8003354:	0452      	lsls	r2, r2, #17
 8003356:	430a      	orrs	r2, r1
 8003358:	491f      	ldr	r1, [pc, #124]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	614b      	str	r3, [r1, #20]
 800335e:	e011      	b.n	8003384 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003368:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6892      	ldr	r2, [r2, #8]
 8003370:	0211      	lsls	r1, r2, #8
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6912      	ldr	r2, [r2, #16]
 8003376:	0852      	lsrs	r2, r2, #1
 8003378:	3a01      	subs	r2, #1
 800337a:	0652      	lsls	r2, r2, #25
 800337c:	430a      	orrs	r2, r1
 800337e:	4916      	ldr	r1, [pc, #88]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003380:	4313      	orrs	r3, r2
 8003382:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003384:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800338a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800338e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe fa0a 	bl	80017a8 <HAL_GetTick>
 8003394:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003396:	e009      	b.n	80033ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003398:	f7fe fa06 	bl	80017a8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d902      	bls.n	80033ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	73fb      	strb	r3, [r7, #15]
          break;
 80033aa:	e005      	b.n	80033b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80033ac:	4b0a      	ldr	r3, [pc, #40]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ef      	beq.n	8003398 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4904      	ldr	r1, [pc, #16]	; (80033d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40021000 	.word	0x40021000

080033dc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e049      	b.n	8003482 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	795b      	ldrb	r3, [r3, #5]
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d105      	bne.n	8003404 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fd ff9c 	bl	800133c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0204 	orr.w	r2, r2, #4
 8003418:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d104      	bne.n	8003432 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2204      	movs	r2, #4
 800342c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e027      	b.n	8003482 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003432:	f7fe f9b9 	bl	80017a8 <HAL_GetTick>
 8003436:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003438:	e015      	b.n	8003466 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800343a:	f7fe f9b5 	bl	80017a8 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d90e      	bls.n	8003466 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d107      	bne.n	8003466 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2204      	movs	r2, #4
 800345a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e00d      	b.n	8003482 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d0e2      	beq.n	800343a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b084      	sub	sp, #16
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	791b      	ldrb	r3, [r3, #4]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_RNG_GenerateRandomNumber+0x1a>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e03d      	b.n	8003520 <HAL_RNG_GenerateRandomNumber+0x96>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	795b      	ldrb	r3, [r3, #5]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d12c      	bne.n	800350e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ba:	f7fe f975 	bl	80017a8 <HAL_GetTick>
 80034be:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80034c0:	e011      	b.n	80034e6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80034c2:	f7fe f971 	bl	80017a8 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	2b02      	cmp	r3, #2
 80034ce:	d90a      	bls.n	80034e6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e01c      	b.n	8003520 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d1e6      	bne.n	80034c2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	715a      	strb	r2, [r3, #5]
 800350c:	e004      	b.n	8003518 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2204      	movs	r2, #4
 8003512:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	711a      	strb	r2, [r3, #4]

  return status;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	330c      	adds	r3, #12
 8003534:	4619      	mov	r1, r3
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ffa7 	bl	800348a <HAL_RNG_GenerateRandomNumber>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d102      	bne.n	8003548 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	e000      	b.n	800354a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8003548:	2300      	movs	r3, #0
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e049      	b.n	80035f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f7fd ff23 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	4619      	mov	r1, r3
 8003590:	4610      	mov	r0, r2
 8003592:	f000 fd33 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d001      	beq.n	8003618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e04f      	b.n	80036b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2202      	movs	r2, #2
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68da      	ldr	r2, [r3, #12]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0201 	orr.w	r2, r2, #1
 800362e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a23      	ldr	r2, [pc, #140]	; (80036c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d01d      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003642:	d018      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d013      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00e      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1c      	ldr	r2, [pc, #112]	; (80036d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1b      	ldr	r2, [pc, #108]	; (80036d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d004      	beq.n	8003676 <HAL_TIM_Base_Start_IT+0x76>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a19      	ldr	r2, [pc, #100]	; (80036d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d115      	bne.n	80036a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	4b17      	ldr	r3, [pc, #92]	; (80036dc <HAL_TIM_Base_Start_IT+0xdc>)
 800367e:	4013      	ands	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b06      	cmp	r3, #6
 8003686:	d015      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0xb4>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368e:	d011      	beq.n	80036b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a0:	e008      	b.n	80036b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	e000      	b.n	80036b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	40012c00 	.word	0x40012c00
 80036c8:	40000400 	.word	0x40000400
 80036cc:	40000800 	.word	0x40000800
 80036d0:	40000c00 	.word	0x40000c00
 80036d4:	40013400 	.word	0x40013400
 80036d8:	40014000 	.word	0x40014000
 80036dc:	00010007 	.word	0x00010007

080036e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e049      	b.n	8003786 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d106      	bne.n	800370c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f841 	bl	800378e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f000 fc6c 	bl	8003ffc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
	...

080037a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d109      	bne.n	80037c8 <HAL_TIM_PWM_Start+0x24>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e03c      	b.n	8003842 <HAL_TIM_PWM_Start+0x9e>
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d109      	bne.n	80037e2 <HAL_TIM_PWM_Start+0x3e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	e02f      	b.n	8003842 <HAL_TIM_PWM_Start+0x9e>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d109      	bne.n	80037fc <HAL_TIM_PWM_Start+0x58>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	e022      	b.n	8003842 <HAL_TIM_PWM_Start+0x9e>
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d109      	bne.n	8003816 <HAL_TIM_PWM_Start+0x72>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	bf14      	ite	ne
 800380e:	2301      	movne	r3, #1
 8003810:	2300      	moveq	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	e015      	b.n	8003842 <HAL_TIM_PWM_Start+0x9e>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b10      	cmp	r3, #16
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x8c>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e008      	b.n	8003842 <HAL_TIM_PWM_Start+0x9e>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e09c      	b.n	8003984 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <HAL_TIM_PWM_Start+0xb6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2202      	movs	r2, #2
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	e023      	b.n	80038a2 <HAL_TIM_PWM_Start+0xfe>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b04      	cmp	r3, #4
 800385e:	d104      	bne.n	800386a <HAL_TIM_PWM_Start+0xc6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2202      	movs	r2, #2
 8003864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003868:	e01b      	b.n	80038a2 <HAL_TIM_PWM_Start+0xfe>
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b08      	cmp	r3, #8
 800386e:	d104      	bne.n	800387a <HAL_TIM_PWM_Start+0xd6>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003878:	e013      	b.n	80038a2 <HAL_TIM_PWM_Start+0xfe>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d104      	bne.n	800388a <HAL_TIM_PWM_Start+0xe6>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003888:	e00b      	b.n	80038a2 <HAL_TIM_PWM_Start+0xfe>
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b10      	cmp	r3, #16
 800388e:	d104      	bne.n	800389a <HAL_TIM_PWM_Start+0xf6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003898:	e003      	b.n	80038a2 <HAL_TIM_PWM_Start+0xfe>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2201      	movs	r2, #1
 80038a8:	6839      	ldr	r1, [r7, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 ffb0 	bl	8004810 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a35      	ldr	r2, [pc, #212]	; (800398c <HAL_TIM_PWM_Start+0x1e8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d013      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x13e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a34      	ldr	r2, [pc, #208]	; (8003990 <HAL_TIM_PWM_Start+0x1ec>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d00e      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x13e>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a32      	ldr	r2, [pc, #200]	; (8003994 <HAL_TIM_PWM_Start+0x1f0>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d009      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x13e>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a31      	ldr	r2, [pc, #196]	; (8003998 <HAL_TIM_PWM_Start+0x1f4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d004      	beq.n	80038e2 <HAL_TIM_PWM_Start+0x13e>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a2f      	ldr	r2, [pc, #188]	; (800399c <HAL_TIM_PWM_Start+0x1f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d101      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x142>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <HAL_TIM_PWM_Start+0x144>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d007      	beq.n	80038fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <HAL_TIM_PWM_Start+0x1e8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d01d      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800390e:	d018      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a22      	ldr	r2, [pc, #136]	; (80039a0 <HAL_TIM_PWM_Start+0x1fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a21      	ldr	r2, [pc, #132]	; (80039a4 <HAL_TIM_PWM_Start+0x200>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a1f      	ldr	r2, [pc, #124]	; (80039a8 <HAL_TIM_PWM_Start+0x204>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_TIM_PWM_Start+0x1ec>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIM_PWM_Start+0x19e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a15      	ldr	r2, [pc, #84]	; (8003994 <HAL_TIM_PWM_Start+0x1f0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d115      	bne.n	800396e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_TIM_PWM_Start+0x208>)
 800394a:	4013      	ands	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d015      	beq.n	8003980 <HAL_TIM_PWM_Start+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800395a:	d011      	beq.n	8003980 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800396c:	e008      	b.n	8003980 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e000      	b.n	8003982 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40012c00 	.word	0x40012c00
 8003990:	40013400 	.word	0x40013400
 8003994:	40014000 	.word	0x40014000
 8003998:	40014400 	.word	0x40014400
 800399c:	40014800 	.word	0x40014800
 80039a0:	40000400 	.word	0x40000400
 80039a4:	40000800 	.word	0x40000800
 80039a8:	40000c00 	.word	0x40000c00
 80039ac:	00010007 	.word	0x00010007

080039b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d122      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d11b      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0202 	mvn.w	r2, #2
 80039dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fae3 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fad5 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fae6 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0304 	and.w	r3, r3, #4
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0204 	mvn.w	r2, #4
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2202      	movs	r2, #2
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fab9 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 faab 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fabc 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d122      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b08      	cmp	r3, #8
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0208 	mvn.w	r2, #8
 8003a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69db      	ldr	r3, [r3, #28]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa8f 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003aa0:	e005      	b.n	8003aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa81 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa92 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b10      	cmp	r3, #16
 8003ac0:	d122      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d11b      	bne.n	8003b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0210 	mvn.w	r2, #16
 8003ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2208      	movs	r2, #8
 8003ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa65 	bl	8003fbe <HAL_TIM_IC_CaptureCallback>
 8003af4:	e005      	b.n	8003b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa57 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa68 	bl	8003fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	691b      	ldr	r3, [r3, #16]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d10e      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d107      	bne.n	8003b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f06f 0201 	mvn.w	r2, #1
 8003b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7fd fa34 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3e:	2b80      	cmp	r3, #128	; 0x80
 8003b40:	d10e      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b4c:	2b80      	cmp	r3, #128	; 0x80
 8003b4e:	d107      	bne.n	8003b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 ff10 	bl	8004980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b6e:	d10e      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7a:	2b80      	cmp	r3, #128	; 0x80
 8003b7c:	d107      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 ff03 	bl	8004994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b98:	2b40      	cmp	r3, #64	; 0x40
 8003b9a:	d10e      	bne.n	8003bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	2b40      	cmp	r3, #64	; 0x40
 8003ba8:	d107      	bne.n	8003bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fa16 	bl	8003fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f003 0320 	and.w	r3, r3, #32
 8003bc4:	2b20      	cmp	r3, #32
 8003bc6:	d10e      	bne.n	8003be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0320 	and.w	r3, r3, #32
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d107      	bne.n	8003be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f06f 0220 	mvn.w	r2, #32
 8003bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fec3 	bl	800496c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
	...

08003bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b086      	sub	sp, #24
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e0ff      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b14      	cmp	r3, #20
 8003c1a:	f200 80f0 	bhi.w	8003dfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003c1e:	a201      	add	r2, pc, #4	; (adr r2, 8003c24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003dff 	.word	0x08003dff
 8003c2c:	08003dff 	.word	0x08003dff
 8003c30:	08003dff 	.word	0x08003dff
 8003c34:	08003cb9 	.word	0x08003cb9
 8003c38:	08003dff 	.word	0x08003dff
 8003c3c:	08003dff 	.word	0x08003dff
 8003c40:	08003dff 	.word	0x08003dff
 8003c44:	08003cfb 	.word	0x08003cfb
 8003c48:	08003dff 	.word	0x08003dff
 8003c4c:	08003dff 	.word	0x08003dff
 8003c50:	08003dff 	.word	0x08003dff
 8003c54:	08003d3b 	.word	0x08003d3b
 8003c58:	08003dff 	.word	0x08003dff
 8003c5c:	08003dff 	.word	0x08003dff
 8003c60:	08003dff 	.word	0x08003dff
 8003c64:	08003d7d 	.word	0x08003d7d
 8003c68:	08003dff 	.word	0x08003dff
 8003c6c:	08003dff 	.word	0x08003dff
 8003c70:	08003dff 	.word	0x08003dff
 8003c74:	08003dbd 	.word	0x08003dbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f000 fa56 	bl	8004130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699a      	ldr	r2, [r3, #24]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0208 	orr.w	r2, r2, #8
 8003c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0204 	bic.w	r2, r2, #4
 8003ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6999      	ldr	r1, [r3, #24]
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	619a      	str	r2, [r3, #24]
      break;
 8003cb6:	e0a5      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 fac6 	bl	8004250 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699a      	ldr	r2, [r3, #24]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6999      	ldr	r1, [r3, #24]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	021a      	lsls	r2, r3, #8
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	619a      	str	r2, [r3, #24]
      break;
 8003cf8:	e084      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fb2f 	bl	8004364 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69da      	ldr	r2, [r3, #28]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0208 	orr.w	r2, r2, #8
 8003d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0204 	bic.w	r2, r2, #4
 8003d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69d9      	ldr	r1, [r3, #28]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	691a      	ldr	r2, [r3, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	61da      	str	r2, [r3, #28]
      break;
 8003d38:	e064      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68b9      	ldr	r1, [r7, #8]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 fb97 	bl	8004474 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	69da      	ldr	r2, [r3, #28]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69d9      	ldr	r1, [r3, #28]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	021a      	lsls	r2, r3, #8
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
      break;
 8003d7a:	e043      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fbe0 	bl	8004548 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0208 	orr.w	r2, r2, #8
 8003d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dba:	e023      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68b9      	ldr	r1, [r7, #8]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc24 	bl	8004610 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	021a      	lsls	r2, r3, #8
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003dfc:	e002      	b.n	8003e04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
      break;
 8003e02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop

08003e18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIM_ConfigClockSource+0x1c>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e0b6      	b.n	8003fa2 <HAL_TIM_ConfigClockSource+0x18a>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e70:	d03e      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xd8>
 8003e72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e76:	f200 8087 	bhi.w	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e7e:	f000 8086 	beq.w	8003f8e <HAL_TIM_ConfigClockSource+0x176>
 8003e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e86:	d87f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003e88:	2b70      	cmp	r3, #112	; 0x70
 8003e8a:	d01a      	beq.n	8003ec2 <HAL_TIM_ConfigClockSource+0xaa>
 8003e8c:	2b70      	cmp	r3, #112	; 0x70
 8003e8e:	d87b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d050      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0x11e>
 8003e94:	2b60      	cmp	r3, #96	; 0x60
 8003e96:	d877      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003e98:	2b50      	cmp	r3, #80	; 0x50
 8003e9a:	d03c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xfe>
 8003e9c:	2b50      	cmp	r3, #80	; 0x50
 8003e9e:	d873      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003ea0:	2b40      	cmp	r3, #64	; 0x40
 8003ea2:	d058      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x13e>
 8003ea4:	2b40      	cmp	r3, #64	; 0x40
 8003ea6:	d86f      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003ea8:	2b30      	cmp	r3, #48	; 0x30
 8003eaa:	d064      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15e>
 8003eac:	2b30      	cmp	r3, #48	; 0x30
 8003eae:	d86b      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d060      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15e>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d867      	bhi.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d05c      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d05a      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x15e>
 8003ec0:	e062      	b.n	8003f88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6818      	ldr	r0, [r3, #0]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6899      	ldr	r1, [r3, #8]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f000 fc7d 	bl	80047d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	609a      	str	r2, [r3, #8]
      break;
 8003eee:	e04f      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f000 fc66 	bl	80047d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f12:	609a      	str	r2, [r3, #8]
      break;
 8003f14:	e03c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6859      	ldr	r1, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	461a      	mov	r2, r3
 8003f24:	f000 fbda 	bl	80046dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2150      	movs	r1, #80	; 0x50
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fc33 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8003f34:	e02c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 fbf9 	bl	800473a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2160      	movs	r1, #96	; 0x60
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fc23 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e01c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fbba 	bl	80046dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2140      	movs	r1, #64	; 0x40
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fc13 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8003f74:	e00c      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4610      	mov	r0, r2
 8003f82:	f000 fc0a 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8003f86:	e003      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	e000      	b.n	8003f90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003f8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a40      	ldr	r2, [pc, #256]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800401a:	d00f      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a3d      	ldr	r2, [pc, #244]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a3c      	ldr	r2, [pc, #240]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a3b      	ldr	r2, [pc, #236]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <TIM_Base_SetConfig+0x124>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d108      	bne.n	800404e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <TIM_Base_SetConfig+0x114>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01f      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d01b      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <TIM_Base_SetConfig+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d017      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <TIM_Base_SetConfig+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2a      	ldr	r2, [pc, #168]	; (800411c <TIM_Base_SetConfig+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00f      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a29      	ldr	r2, [pc, #164]	; (8004120 <TIM_Base_SetConfig+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00b      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a28      	ldr	r2, [pc, #160]	; (8004124 <TIM_Base_SetConfig+0x128>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d007      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <TIM_Base_SetConfig+0x12c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d003      	beq.n	8004096 <TIM_Base_SetConfig+0x9a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a26      	ldr	r2, [pc, #152]	; (800412c <TIM_Base_SetConfig+0x130>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a10      	ldr	r2, [pc, #64]	; (8004110 <TIM_Base_SetConfig+0x114>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00f      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <TIM_Base_SetConfig+0x124>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00b      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a11      	ldr	r2, [pc, #68]	; (8004124 <TIM_Base_SetConfig+0x128>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d007      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <TIM_Base_SetConfig+0x12c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d003      	beq.n	80040f4 <TIM_Base_SetConfig+0xf8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a0f      	ldr	r2, [pc, #60]	; (800412c <TIM_Base_SetConfig+0x130>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d103      	bne.n	80040fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	615a      	str	r2, [r3, #20]
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40013400 	.word	0x40013400
 8004124:	40014000 	.word	0x40014000
 8004128:	40014400 	.word	0x40014400
 800412c:	40014800 	.word	0x40014800

08004130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004130:	b480      	push	{r7}
 8004132:	b087      	sub	sp, #28
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	f023 0201 	bic.w	r2, r3, #1
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0302 	bic.w	r3, r3, #2
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a2c      	ldr	r2, [pc, #176]	; (800423c <TIM_OC1_SetConfig+0x10c>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00f      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a2b      	ldr	r2, [pc, #172]	; (8004240 <TIM_OC1_SetConfig+0x110>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00b      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a2a      	ldr	r2, [pc, #168]	; (8004244 <TIM_OC1_SetConfig+0x114>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d007      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a29      	ldr	r2, [pc, #164]	; (8004248 <TIM_OC1_SetConfig+0x118>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC1_SetConfig+0x80>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a28      	ldr	r2, [pc, #160]	; (800424c <TIM_OC1_SetConfig+0x11c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d10c      	bne.n	80041ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 0308 	bic.w	r3, r3, #8
 80041b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f023 0304 	bic.w	r3, r3, #4
 80041c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a1b      	ldr	r2, [pc, #108]	; (800423c <TIM_OC1_SetConfig+0x10c>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a1a      	ldr	r2, [pc, #104]	; (8004240 <TIM_OC1_SetConfig+0x110>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a19      	ldr	r2, [pc, #100]	; (8004244 <TIM_OC1_SetConfig+0x114>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a18      	ldr	r2, [pc, #96]	; (8004248 <TIM_OC1_SetConfig+0x118>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC1_SetConfig+0xc2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a17      	ldr	r2, [pc, #92]	; (800424c <TIM_OC1_SetConfig+0x11c>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d111      	bne.n	8004216 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	4313      	orrs	r3, r2
 8004214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	621a      	str	r2, [r3, #32]
}
 8004230:	bf00      	nop
 8004232:	371c      	adds	r7, #28
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr
 800423c:	40012c00 	.word	0x40012c00
 8004240:	40013400 	.word	0x40013400
 8004244:	40014000 	.word	0x40014000
 8004248:	40014400 	.word	0x40014400
 800424c:	40014800 	.word	0x40014800

08004250 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0210 	bic.w	r2, r3, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0320 	bic.w	r3, r3, #32
 800429e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a28      	ldr	r2, [pc, #160]	; (8004350 <TIM_OC2_SetConfig+0x100>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC2_SetConfig+0x6c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a27      	ldr	r2, [pc, #156]	; (8004354 <TIM_OC2_SetConfig+0x104>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d10d      	bne.n	80042d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1d      	ldr	r2, [pc, #116]	; (8004350 <TIM_OC2_SetConfig+0x100>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00f      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a1c      	ldr	r2, [pc, #112]	; (8004354 <TIM_OC2_SetConfig+0x104>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00b      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a1b      	ldr	r2, [pc, #108]	; (8004358 <TIM_OC2_SetConfig+0x108>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d007      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a1a      	ldr	r2, [pc, #104]	; (800435c <TIM_OC2_SetConfig+0x10c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d003      	beq.n	8004300 <TIM_OC2_SetConfig+0xb0>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a19      	ldr	r2, [pc, #100]	; (8004360 <TIM_OC2_SetConfig+0x110>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d113      	bne.n	8004328 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004306:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800430e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400
 8004358:	40014000 	.word	0x40014000
 800435c:	40014400 	.word	0x40014400
 8004360:	40014800 	.word	0x40014800

08004364 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a27      	ldr	r2, [pc, #156]	; (8004460 <TIM_OC3_SetConfig+0xfc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d003      	beq.n	80043ce <TIM_OC3_SetConfig+0x6a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a26      	ldr	r2, [pc, #152]	; (8004464 <TIM_OC3_SetConfig+0x100>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10d      	bne.n	80043ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <TIM_OC3_SetConfig+0xfc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d00f      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <TIM_OC3_SetConfig+0x100>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00b      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <TIM_OC3_SetConfig+0x104>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <TIM_OC3_SetConfig+0x108>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d003      	beq.n	8004412 <TIM_OC3_SetConfig+0xae>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <TIM_OC3_SetConfig+0x10c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d113      	bne.n	800443a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	693a      	ldr	r2, [r7, #16]
 8004436:	4313      	orrs	r3, r2
 8004438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	621a      	str	r2, [r3, #32]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	40012c00 	.word	0x40012c00
 8004464:	40013400 	.word	0x40013400
 8004468:	40014000 	.word	0x40014000
 800446c:	40014400 	.word	0x40014400
 8004470:	40014800 	.word	0x40014800

08004474 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004474:	b480      	push	{r7}
 8004476:	b087      	sub	sp, #28
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	021b      	lsls	r3, r3, #8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	031b      	lsls	r3, r3, #12
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a18      	ldr	r2, [pc, #96]	; (8004534 <TIM_OC4_SetConfig+0xc0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00f      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a17      	ldr	r2, [pc, #92]	; (8004538 <TIM_OC4_SetConfig+0xc4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d00b      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a16      	ldr	r2, [pc, #88]	; (800453c <TIM_OC4_SetConfig+0xc8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d007      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a15      	ldr	r2, [pc, #84]	; (8004540 <TIM_OC4_SetConfig+0xcc>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d003      	beq.n	80044f8 <TIM_OC4_SetConfig+0x84>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <TIM_OC4_SetConfig+0xd0>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d109      	bne.n	800450c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	621a      	str	r2, [r3, #32]
}
 8004526:	bf00      	nop
 8004528:	371c      	adds	r7, #28
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	40012c00 	.word	0x40012c00
 8004538:	40013400 	.word	0x40013400
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800

08004548 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	4313      	orrs	r3, r2
 8004584:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800458c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	041b      	lsls	r3, r3, #16
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a17      	ldr	r2, [pc, #92]	; (80045fc <TIM_OC5_SetConfig+0xb4>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d00f      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <TIM_OC5_SetConfig+0xb8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00b      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a15      	ldr	r2, [pc, #84]	; (8004604 <TIM_OC5_SetConfig+0xbc>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d007      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a14      	ldr	r2, [pc, #80]	; (8004608 <TIM_OC5_SetConfig+0xc0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d003      	beq.n	80045c2 <TIM_OC5_SetConfig+0x7a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a13      	ldr	r2, [pc, #76]	; (800460c <TIM_OC5_SetConfig+0xc4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d109      	bne.n	80045d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	021b      	lsls	r3, r3, #8
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	621a      	str	r2, [r3, #32]
}
 80045f0:	bf00      	nop
 80045f2:	371c      	adds	r7, #28
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40014000 	.word	0x40014000
 8004608:	40014400 	.word	0x40014400
 800460c:	40014800 	.word	0x40014800

08004610 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	021b      	lsls	r3, r3, #8
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	051b      	lsls	r3, r3, #20
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a18      	ldr	r2, [pc, #96]	; (80046c8 <TIM_OC6_SetConfig+0xb8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00f      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <TIM_OC6_SetConfig+0xbc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00b      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a16      	ldr	r2, [pc, #88]	; (80046d0 <TIM_OC6_SetConfig+0xc0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d007      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <TIM_OC6_SetConfig+0xc4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <TIM_OC6_SetConfig+0x7c>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <TIM_OC6_SetConfig+0xc8>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d109      	bne.n	80046a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004692:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	029b      	lsls	r3, r3, #10
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	4313      	orrs	r3, r2
 800469e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40012c00 	.word	0x40012c00
 80046cc:	40013400 	.word	0x40013400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40014400 	.word	0x40014400
 80046d8:	40014800 	.word	0x40014800

080046dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f023 030a 	bic.w	r3, r3, #10
 8004718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0210 	bic.w	r2, r3, #16
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f043 0307 	orr.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	2201      	movs	r2, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1a      	ldr	r2, [r3, #32]
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	43db      	mvns	r3, r3
 8004832:	401a      	ands	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a1a      	ldr	r2, [r3, #32]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f003 031f 	and.w	r3, r3, #31
 8004842:	6879      	ldr	r1, [r7, #4]
 8004844:	fa01 f303 	lsl.w	r3, r1, r3
 8004848:	431a      	orrs	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004870:	2302      	movs	r3, #2
 8004872:	e068      	b.n	8004946 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a2e      	ldr	r2, [pc, #184]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2d      	ldr	r2, [pc, #180]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1e      	ldr	r2, [pc, #120]	; (8004954 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d01d      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e6:	d018      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a1b      	ldr	r2, [pc, #108]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1a      	ldr	r2, [pc, #104]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d00e      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d009      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a13      	ldr	r2, [pc, #76]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10c      	bne.n	8004934 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	4313      	orrs	r3, r2
 800492a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40000400 	.word	0x40000400
 8004960:	40000800 	.word	0x40000800
 8004964:	40000c00 	.word	0x40000c00
 8004968:	40014000 	.word	0x40014000

0800496c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e040      	b.n	8004a3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d106      	bne.n	80049d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fd70 	bl	80014b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2224      	movs	r2, #36	; 0x24
 80049d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f022 0201 	bic.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f8c0 	bl	8004b6c <UART_SetConfig>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e022      	b.n	8004a3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fb6c 	bl	80050dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689a      	ldr	r2, [r3, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0201 	orr.w	r2, r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fbf3 	bl	8005220 <UART_CheckIdleState>
 8004a3a:	4603      	mov	r3, r0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b08a      	sub	sp, #40	; 0x28
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	603b      	str	r3, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	f040 8082 	bne.w	8004b62 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <HAL_UART_Transmit+0x26>
 8004a64:	88fb      	ldrh	r3, [r7, #6]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e07a      	b.n	8004b64 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_UART_Transmit+0x38>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e073      	b.n	8004b64 <HAL_UART_Transmit+0x120>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2221      	movs	r2, #33	; 0x21
 8004a90:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fc fe89 	bl	80017a8 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	88fa      	ldrh	r2, [r7, #6]
 8004aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_UART_Transmit+0x80>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d104      	bne.n	8004ac4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	e003      	b.n	8004acc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004ad4:	e02d      	b.n	8004b32 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2180      	movs	r1, #128	; 0x80
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fbe6 	bl	80052b2 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e039      	b.n	8004b64 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10b      	bne.n	8004b0e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b02:	b292      	uxth	r2, r2
 8004b04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	3302      	adds	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
 8004b0c:	e008      	b.n	8004b20 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	781a      	ldrb	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	b292      	uxth	r2, r2
 8004b18:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1cb      	bne.n	8004ad6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	2200      	movs	r2, #0
 8004b46:	2140      	movs	r1, #64	; 0x40
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 fbb2 	bl	80052b2 <UART_WaitOnFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e005      	b.n	8004b64 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b70:	b08a      	sub	sp, #40	; 0x28
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	431a      	orrs	r2, r3
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4ba4      	ldr	r3, [pc, #656]	; (8004e2c <UART_SetConfig+0x2c0>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	6812      	ldr	r2, [r2, #0]
 8004ba2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	68da      	ldr	r2, [r3, #12]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a99      	ldr	r2, [pc, #612]	; (8004e30 <UART_SetConfig+0x2c4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d004      	beq.n	8004bd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a90      	ldr	r2, [pc, #576]	; (8004e34 <UART_SetConfig+0x2c8>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d126      	bne.n	8004c44 <UART_SetConfig+0xd8>
 8004bf6:	4b90      	ldr	r3, [pc, #576]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d81b      	bhi.n	8004c3c <UART_SetConfig+0xd0>
 8004c04:	a201      	add	r2, pc, #4	; (adr r2, 8004c0c <UART_SetConfig+0xa0>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c1d 	.word	0x08004c1d
 8004c10:	08004c2d 	.word	0x08004c2d
 8004c14:	08004c25 	.word	0x08004c25
 8004c18:	08004c35 	.word	0x08004c35
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c22:	e116      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2a:	e112      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c32:	e10e      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3a:	e10a      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e106      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a7c      	ldr	r2, [pc, #496]	; (8004e3c <UART_SetConfig+0x2d0>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d138      	bne.n	8004cc0 <UART_SetConfig+0x154>
 8004c4e:	4b7a      	ldr	r3, [pc, #488]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d82d      	bhi.n	8004cb8 <UART_SetConfig+0x14c>
 8004c5c:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0xf8>)
 8004c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c62:	bf00      	nop
 8004c64:	08004c99 	.word	0x08004c99
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004cb9 	.word	0x08004cb9
 8004c70:	08004cb9 	.word	0x08004cb9
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004cb9 	.word	0x08004cb9
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004cb9 	.word	0x08004cb9
 8004c84:	08004ca1 	.word	0x08004ca1
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cb9 	.word	0x08004cb9
 8004c90:	08004cb9 	.word	0x08004cb9
 8004c94:	08004cb1 	.word	0x08004cb1
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e0d8      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca6:	e0d4      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004ca8:	2304      	movs	r3, #4
 8004caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cae:	e0d0      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004cb0:	2308      	movs	r3, #8
 8004cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb6:	e0cc      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004cb8:	2310      	movs	r3, #16
 8004cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cbe:	e0c8      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a5e      	ldr	r2, [pc, #376]	; (8004e40 <UART_SetConfig+0x2d4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d125      	bne.n	8004d16 <UART_SetConfig+0x1aa>
 8004cca:	4b5b      	ldr	r3, [pc, #364]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d016      	beq.n	8004d06 <UART_SetConfig+0x19a>
 8004cd8:	2b30      	cmp	r3, #48	; 0x30
 8004cda:	d818      	bhi.n	8004d0e <UART_SetConfig+0x1a2>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d00a      	beq.n	8004cf6 <UART_SetConfig+0x18a>
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d814      	bhi.n	8004d0e <UART_SetConfig+0x1a2>
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <UART_SetConfig+0x182>
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d008      	beq.n	8004cfe <UART_SetConfig+0x192>
 8004cec:	e00f      	b.n	8004d0e <UART_SetConfig+0x1a2>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf4:	e0ad      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfc:	e0a9      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004cfe:	2304      	movs	r3, #4
 8004d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d04:	e0a5      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d06:	2308      	movs	r3, #8
 8004d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d0c:	e0a1      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d0e:	2310      	movs	r3, #16
 8004d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d14:	e09d      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4a      	ldr	r2, [pc, #296]	; (8004e44 <UART_SetConfig+0x2d8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d125      	bne.n	8004d6c <UART_SetConfig+0x200>
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d2a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d2c:	d016      	beq.n	8004d5c <UART_SetConfig+0x1f0>
 8004d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d30:	d818      	bhi.n	8004d64 <UART_SetConfig+0x1f8>
 8004d32:	2b80      	cmp	r3, #128	; 0x80
 8004d34:	d00a      	beq.n	8004d4c <UART_SetConfig+0x1e0>
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d814      	bhi.n	8004d64 <UART_SetConfig+0x1f8>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d002      	beq.n	8004d44 <UART_SetConfig+0x1d8>
 8004d3e:	2b40      	cmp	r3, #64	; 0x40
 8004d40:	d008      	beq.n	8004d54 <UART_SetConfig+0x1e8>
 8004d42:	e00f      	b.n	8004d64 <UART_SetConfig+0x1f8>
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e082      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e07e      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d54:	2304      	movs	r3, #4
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e07a      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d5c:	2308      	movs	r3, #8
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e076      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d6a:	e072      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a35      	ldr	r2, [pc, #212]	; (8004e48 <UART_SetConfig+0x2dc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d12a      	bne.n	8004dcc <UART_SetConfig+0x260>
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d84:	d01a      	beq.n	8004dbc <UART_SetConfig+0x250>
 8004d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8a:	d81b      	bhi.n	8004dc4 <UART_SetConfig+0x258>
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d00c      	beq.n	8004dac <UART_SetConfig+0x240>
 8004d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d96:	d815      	bhi.n	8004dc4 <UART_SetConfig+0x258>
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <UART_SetConfig+0x238>
 8004d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da0:	d008      	beq.n	8004db4 <UART_SetConfig+0x248>
 8004da2:	e00f      	b.n	8004dc4 <UART_SetConfig+0x258>
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004daa:	e052      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004dac:	2302      	movs	r3, #2
 8004dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004db2:	e04e      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004db4:	2304      	movs	r3, #4
 8004db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dba:	e04a      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004dbc:	2308      	movs	r3, #8
 8004dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dc2:	e046      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004dca:	e042      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <UART_SetConfig+0x2c4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d13a      	bne.n	8004e4c <UART_SetConfig+0x2e0>
 8004dd6:	4b18      	ldr	r3, [pc, #96]	; (8004e38 <UART_SetConfig+0x2cc>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004de0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004de4:	d01a      	beq.n	8004e1c <UART_SetConfig+0x2b0>
 8004de6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dea:	d81b      	bhi.n	8004e24 <UART_SetConfig+0x2b8>
 8004dec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df0:	d00c      	beq.n	8004e0c <UART_SetConfig+0x2a0>
 8004df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004df6:	d815      	bhi.n	8004e24 <UART_SetConfig+0x2b8>
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <UART_SetConfig+0x298>
 8004dfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e00:	d008      	beq.n	8004e14 <UART_SetConfig+0x2a8>
 8004e02:	e00f      	b.n	8004e24 <UART_SetConfig+0x2b8>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e0a:	e022      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e12:	e01e      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e1a:	e01a      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e22:	e016      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004e2a:	e012      	b.n	8004e52 <UART_SetConfig+0x2e6>
 8004e2c:	efff69f3 	.word	0xefff69f3
 8004e30:	40008000 	.word	0x40008000
 8004e34:	40013800 	.word	0x40013800
 8004e38:	40021000 	.word	0x40021000
 8004e3c:	40004400 	.word	0x40004400
 8004e40:	40004800 	.word	0x40004800
 8004e44:	40004c00 	.word	0x40004c00
 8004e48:	40005000 	.word	0x40005000
 8004e4c:	2310      	movs	r3, #16
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a9f      	ldr	r2, [pc, #636]	; (80050d4 <UART_SetConfig+0x568>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d17a      	bne.n	8004f52 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e60:	2b08      	cmp	r3, #8
 8004e62:	d824      	bhi.n	8004eae <UART_SetConfig+0x342>
 8004e64:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x300>)
 8004e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6a:	bf00      	nop
 8004e6c:	08004e91 	.word	0x08004e91
 8004e70:	08004eaf 	.word	0x08004eaf
 8004e74:	08004e99 	.word	0x08004e99
 8004e78:	08004eaf 	.word	0x08004eaf
 8004e7c:	08004e9f 	.word	0x08004e9f
 8004e80:	08004eaf 	.word	0x08004eaf
 8004e84:	08004eaf 	.word	0x08004eaf
 8004e88:	08004eaf 	.word	0x08004eaf
 8004e8c:	08004ea7 	.word	0x08004ea7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e90:	f7fd fd2a 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004e94:	61f8      	str	r0, [r7, #28]
        break;
 8004e96:	e010      	b.n	8004eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e98:	4b8f      	ldr	r3, [pc, #572]	; (80050d8 <UART_SetConfig+0x56c>)
 8004e9a:	61fb      	str	r3, [r7, #28]
        break;
 8004e9c:	e00d      	b.n	8004eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9e:	f7fd fc8b 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8004ea2:	61f8      	str	r0, [r7, #28]
        break;
 8004ea4:	e009      	b.n	8004eba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	61fb      	str	r3, [r7, #28]
        break;
 8004eac:	e005      	b.n	8004eba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004eb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80fb 	beq.w	80050b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d305      	bcc.n	8004ede <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d903      	bls.n	8004ee6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ee4:	e0e8      	b.n	80050b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	461c      	mov	r4, r3
 8004eec:	4615      	mov	r5, r2
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	f04f 0300 	mov.w	r3, #0
 8004ef6:	022b      	lsls	r3, r5, #8
 8004ef8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004efc:	0222      	lsls	r2, r4, #8
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	6849      	ldr	r1, [r1, #4]
 8004f02:	0849      	lsrs	r1, r1, #1
 8004f04:	2000      	movs	r0, #0
 8004f06:	4688      	mov	r8, r1
 8004f08:	4681      	mov	r9, r0
 8004f0a:	eb12 0a08 	adds.w	sl, r2, r8
 8004f0e:	eb43 0b09 	adc.w	fp, r3, r9
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	603b      	str	r3, [r7, #0]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f20:	4650      	mov	r0, sl
 8004f22:	4659      	mov	r1, fp
 8004f24:	f7fb f954 	bl	80001d0 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f36:	d308      	bcc.n	8004f4a <UART_SetConfig+0x3de>
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f3e:	d204      	bcs.n	8004f4a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e0b6      	b.n	80050b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f50:	e0b2      	b.n	80050b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	69db      	ldr	r3, [r3, #28]
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5a:	d15e      	bne.n	800501a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004f5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f60:	2b08      	cmp	r3, #8
 8004f62:	d828      	bhi.n	8004fb6 <UART_SetConfig+0x44a>
 8004f64:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <UART_SetConfig+0x400>)
 8004f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6a:	bf00      	nop
 8004f6c:	08004f91 	.word	0x08004f91
 8004f70:	08004f99 	.word	0x08004f99
 8004f74:	08004fa1 	.word	0x08004fa1
 8004f78:	08004fb7 	.word	0x08004fb7
 8004f7c:	08004fa7 	.word	0x08004fa7
 8004f80:	08004fb7 	.word	0x08004fb7
 8004f84:	08004fb7 	.word	0x08004fb7
 8004f88:	08004fb7 	.word	0x08004fb7
 8004f8c:	08004faf 	.word	0x08004faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f90:	f7fd fcaa 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8004f94:	61f8      	str	r0, [r7, #28]
        break;
 8004f96:	e014      	b.n	8004fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f98:	f7fd fcbc 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8004f9c:	61f8      	str	r0, [r7, #28]
        break;
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fa0:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <UART_SetConfig+0x56c>)
 8004fa2:	61fb      	str	r3, [r7, #28]
        break;
 8004fa4:	e00d      	b.n	8004fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa6:	f7fd fc07 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8004faa:	61f8      	str	r0, [r7, #28]
        break;
 8004fac:	e009      	b.n	8004fc2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fb2:	61fb      	str	r3, [r7, #28]
        break;
 8004fb4:	e005      	b.n	8004fc2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d077      	beq.n	80050b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005a      	lsls	r2, r3, #1
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	085b      	lsrs	r3, r3, #1
 8004fd2:	441a      	add	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fdc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	2b0f      	cmp	r3, #15
 8004fe2:	d916      	bls.n	8005012 <UART_SetConfig+0x4a6>
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fea:	d212      	bcs.n	8005012 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f023 030f 	bic.w	r3, r3, #15
 8004ff4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	085b      	lsrs	r3, r3, #1
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	b29a      	uxth	r2, r3
 8005002:	8afb      	ldrh	r3, [r7, #22]
 8005004:	4313      	orrs	r3, r2
 8005006:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	8afa      	ldrh	r2, [r7, #22]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e052      	b.n	80050b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005018:	e04e      	b.n	80050b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800501a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800501e:	2b08      	cmp	r3, #8
 8005020:	d827      	bhi.n	8005072 <UART_SetConfig+0x506>
 8005022:	a201      	add	r2, pc, #4	; (adr r2, 8005028 <UART_SetConfig+0x4bc>)
 8005024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005028:	0800504d 	.word	0x0800504d
 800502c:	08005055 	.word	0x08005055
 8005030:	0800505d 	.word	0x0800505d
 8005034:	08005073 	.word	0x08005073
 8005038:	08005063 	.word	0x08005063
 800503c:	08005073 	.word	0x08005073
 8005040:	08005073 	.word	0x08005073
 8005044:	08005073 	.word	0x08005073
 8005048:	0800506b 	.word	0x0800506b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7fd fc4c 	bl	80028e8 <HAL_RCC_GetPCLK1Freq>
 8005050:	61f8      	str	r0, [r7, #28]
        break;
 8005052:	e014      	b.n	800507e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005054:	f7fd fc5e 	bl	8002914 <HAL_RCC_GetPCLK2Freq>
 8005058:	61f8      	str	r0, [r7, #28]
        break;
 800505a:	e010      	b.n	800507e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <UART_SetConfig+0x56c>)
 800505e:	61fb      	str	r3, [r7, #28]
        break;
 8005060:	e00d      	b.n	800507e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005062:	f7fd fba9 	bl	80027b8 <HAL_RCC_GetSysClockFreq>
 8005066:	61f8      	str	r0, [r7, #28]
        break;
 8005068:	e009      	b.n	800507e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800506a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506e:	61fb      	str	r3, [r7, #28]
        break;
 8005070:	e005      	b.n	800507e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800507c:	bf00      	nop
    }

    if (pclk != 0U)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d019      	beq.n	80050b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	085a      	lsrs	r2, r3, #1
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	441a      	add	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b0f      	cmp	r3, #15
 800509c:	d909      	bls.n	80050b2 <UART_SetConfig+0x546>
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a4:	d205      	bcs.n	80050b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	e002      	b.n	80050b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80050c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3728      	adds	r7, #40	; 0x28
 80050cc:	46bd      	mov	sp, r7
 80050ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d2:	bf00      	nop
 80050d4:	40008000 	.word	0x40008000
 80050d8:	00f42400 	.word	0x00f42400

080050dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	f003 0304 	and.w	r3, r3, #4
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514e:	f003 0308 	and.w	r3, r3, #8
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051da:	d10a      	bne.n	80051f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
  }
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b086      	sub	sp, #24
 8005224:	af02      	add	r7, sp, #8
 8005226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005230:	f7fc faba 	bl	80017a8 <HAL_GetTick>
 8005234:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0308 	and.w	r3, r3, #8
 8005240:	2b08      	cmp	r3, #8
 8005242:	d10e      	bne.n	8005262 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f82d 	bl	80052b2 <UART_WaitOnFlagUntilTimeout>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d001      	beq.n	8005262 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e023      	b.n	80052aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d10e      	bne.n	800528e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005270:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f817 	bl	80052b2 <UART_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e00d      	b.n	80052aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2220      	movs	r2, #32
 8005292:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b09c      	sub	sp, #112	; 0x70
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	4613      	mov	r3, r2
 80052c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c2:	e0a5      	b.n	8005410 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ca:	f000 80a1 	beq.w	8005410 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fc fa6b 	bl	80017a8 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80052de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d13e      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80052f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052f8:	667b      	str	r3, [r7, #100]	; 0x64
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005304:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005308:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e6      	bne.n	80052e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	663b      	str	r3, [r7, #96]	; 0x60
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3308      	adds	r3, #8
 8005334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005336:	64ba      	str	r2, [r7, #72]	; 0x48
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800533c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2220      	movs	r2, #32
 800534e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2220      	movs	r2, #32
 8005354:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e067      	b.n	8005432 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d04f      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800537a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800537e:	d147      	bne.n	8005410 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005388:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800539e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	461a      	mov	r2, r3
 80053a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34
 80053aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80053ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053b0:	e841 2300 	strex	r3, r2, [r1]
 80053b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1e6      	bne.n	800538a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	3308      	adds	r3, #8
 80053c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	e853 3f00 	ldrex	r3, [r3]
 80053ca:	613b      	str	r3, [r7, #16]
   return(result);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f023 0301 	bic.w	r3, r3, #1
 80053d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3308      	adds	r3, #8
 80053da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053dc:	623a      	str	r2, [r7, #32]
 80053de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	6a3a      	ldr	r2, [r7, #32]
 80053e4:	e841 2300 	strex	r3, r2, [r1]
 80053e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1e5      	bne.n	80053bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2220      	movs	r2, #32
 80053fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e010      	b.n	8005432 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69da      	ldr	r2, [r3, #28]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	79fb      	ldrb	r3, [r7, #7]
 800542a:	429a      	cmp	r2, r3
 800542c:	f43f af4a 	beq.w	80052c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3770      	adds	r7, #112	; 0x70
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800543a:	b480      	push	{r7}
 800543c:	b085      	sub	sp, #20
 800543e:	af00      	add	r7, sp, #0
 8005440:	4603      	mov	r3, r0
 8005442:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800544c:	2b84      	cmp	r3, #132	; 0x84
 800544e:	d005      	beq.n	800545c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005450:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	3303      	adds	r3, #3
 800545a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800545c:	68fb      	ldr	r3, [r7, #12]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800546e:	f000 faf5 	bl	8005a5c <vTaskStartScheduler>
  
  return osOK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}

08005478 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800547a:	b089      	sub	sp, #36	; 0x24
 800547c:	af04      	add	r7, sp, #16
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <osThreadCreate+0x54>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01c      	beq.n	80054cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685c      	ldr	r4, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691e      	ldr	r6, [r3, #16]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff ffc8 	bl	800543a <makeFreeRtosPriority>
 80054aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054b4:	9202      	str	r2, [sp, #8]
 80054b6:	9301      	str	r3, [sp, #4]
 80054b8:	9100      	str	r1, [sp, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	4632      	mov	r2, r6
 80054be:	4629      	mov	r1, r5
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f8ed 	bl	80056a0 <xTaskCreateStatic>
 80054c6:	4603      	mov	r3, r0
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e01c      	b.n	8005506 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685c      	ldr	r4, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80054d8:	b29e      	uxth	r6, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80054e0:	4618      	mov	r0, r3
 80054e2:	f7ff ffaa 	bl	800543a <makeFreeRtosPriority>
 80054e6:	4602      	mov	r2, r0
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	9301      	str	r3, [sp, #4]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4632      	mov	r2, r6
 80054f4:	4629      	mov	r1, r5
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f92f 	bl	800575a <xTaskCreate>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d001      	beq.n	8005506 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005506:	68fb      	ldr	r3, [r7, #12]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3714      	adds	r7, #20
 800550c:	46bd      	mov	sp, r7
 800550e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005510 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <osDelay+0x16>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	e000      	b.n	8005528 <osDelay+0x18>
 8005526:	2301      	movs	r3, #1
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa63 	bl	80059f4 <vTaskDelay>
  
  return osOK;
 800552e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f103 0208 	add.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f04f 32ff 	mov.w	r2, #4294967295
 8005550:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f103 0208 	add.w	r2, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f103 0208 	add.w	r2, r3, #8
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005586:	bf00      	nop
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005592:	b480      	push	{r7}
 8005594:	b085      	sub	sp, #20
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
 800559a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689a      	ldr	r2, [r3, #8]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	601a      	str	r2, [r3, #0]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d103      	bne.n	80055fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e00c      	b.n	8005614 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	3308      	adds	r3, #8
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e002      	b.n	8005608 <vListInsert+0x2e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d2f6      	bcs.n	8005602 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6892      	ldr	r2, [r2, #8]
 8005662:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	6852      	ldr	r2, [r2, #4]
 800566c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	d103      	bne.n	8005680 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	1e5a      	subs	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3714      	adds	r7, #20
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af04      	add	r7, sp, #16
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80056ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d10a      	bne.n	80056e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	61fb      	str	r3, [r7, #28]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80056e6:	23b4      	movs	r3, #180	; 0xb4
 80056e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	2bb4      	cmp	r3, #180	; 0xb4
 80056ee:	d00a      	beq.n	8005706 <xTaskCreateStatic+0x66>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570a:	2b00      	cmp	r3, #0
 800570c:	d01e      	beq.n	800574c <xTaskCreateStatic+0xac>
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01b      	beq.n	800574c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	2202      	movs	r2, #2
 8005722:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005726:	2300      	movs	r3, #0
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	9302      	str	r3, [sp, #8]
 800572e:	f107 0314 	add.w	r3, r7, #20
 8005732:	9301      	str	r3, [sp, #4]
 8005734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 f850 	bl	80057e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005746:	f000 f8eb 	bl	8005920 <prvAddNewTaskToReadyList>
 800574a:	e001      	b.n	8005750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005750:	697b      	ldr	r3, [r7, #20]
	}
 8005752:	4618      	mov	r0, r3
 8005754:	3728      	adds	r7, #40	; 0x28
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800575a:	b580      	push	{r7, lr}
 800575c:	b08c      	sub	sp, #48	; 0x30
 800575e:	af04      	add	r7, sp, #16
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	603b      	str	r3, [r7, #0]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fef2 	bl	8006558 <pvPortMalloc>
 8005774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00e      	beq.n	800579a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800577c:	20b4      	movs	r0, #180	; 0xb4
 800577e:	f000 feeb 	bl	8006558 <pvPortMalloc>
 8005782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	631a      	str	r2, [r3, #48]	; 0x30
 8005790:	e005      	b.n	800579e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005792:	6978      	ldr	r0, [r7, #20]
 8005794:	f000 ffac 	bl	80066f0 <vPortFree>
 8005798:	e001      	b.n	800579e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d017      	beq.n	80057d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	2300      	movs	r3, #0
 80057b0:	9303      	str	r3, [sp, #12]
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	9302      	str	r3, [sp, #8]
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	9301      	str	r3, [sp, #4]
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	9300      	str	r3, [sp, #0]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f80e 	bl	80057e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057c8:	69f8      	ldr	r0, [r7, #28]
 80057ca:	f000 f8a9 	bl	8005920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
 80057d2:	e002      	b.n	80057da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057d4:	f04f 33ff 	mov.w	r3, #4294967295
 80057d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057da:	69bb      	ldr	r3, [r7, #24]
	}
 80057dc:	4618      	mov	r0, r3
 80057de:	3720      	adds	r7, #32
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057fc:	3b01      	subs	r3, #1
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	f023 0307 	bic.w	r3, r3, #7
 800580a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	617b      	str	r3, [r7, #20]
}
 8005828:	bf00      	nop
 800582a:	e7fe      	b.n	800582a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01f      	beq.n	8005872 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005832:	2300      	movs	r3, #0
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e012      	b.n	800585e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	7819      	ldrb	r1, [r3, #0]
 8005840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	3334      	adds	r3, #52	; 0x34
 8005848:	460a      	mov	r2, r1
 800584a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4413      	add	r3, r2
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d006      	beq.n	8005866 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3301      	adds	r3, #1
 800585c:	61fb      	str	r3, [r7, #28]
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	2b0f      	cmp	r3, #15
 8005862:	d9e9      	bls.n	8005838 <prvInitialiseNewTask+0x54>
 8005864:	e000      	b.n	8005868 <prvInitialiseNewTask+0x84>
			{
				break;
 8005866:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005870:	e003      	b.n	800587a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	2b06      	cmp	r3, #6
 800587e:	d901      	bls.n	8005884 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005880:	2306      	movs	r3, #6
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005888:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800588e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	2200      	movs	r2, #0
 8005894:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff fe6c 	bl	8005578 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a2:	3318      	adds	r3, #24
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff fe67 	bl	8005578 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	f1c3 0207 	rsb	r2, r3, #7
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	2200      	movs	r2, #0
 80058c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	334c      	adds	r3, #76	; 0x4c
 80058d4:	2260      	movs	r2, #96	; 0x60
 80058d6:	2100      	movs	r1, #0
 80058d8:	4618      	mov	r0, r3
 80058da:	f001 f84d 	bl	8006978 <memset>
 80058de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e0:	4a0c      	ldr	r2, [pc, #48]	; (8005914 <prvInitialiseNewTask+0x130>)
 80058e2:	651a      	str	r2, [r3, #80]	; 0x50
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <prvInitialiseNewTask+0x134>)
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	4a0b      	ldr	r2, [pc, #44]	; (800591c <prvInitialiseNewTask+0x138>)
 80058ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	69b8      	ldr	r0, [r7, #24]
 80058f6:	f000 fc1f 	bl	8006138 <pxPortInitialiseStack>
 80058fa:	4602      	mov	r2, r0
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d002      	beq.n	800590c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800590c:	bf00      	nop
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	08006d14 	.word	0x08006d14
 8005918:	08006d34 	.word	0x08006d34
 800591c:	08006cf4 	.word	0x08006cf4

08005920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005928:	f000 fd34 	bl	8006394 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800592c:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <prvAddNewTaskToReadyList+0xb8>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3301      	adds	r3, #1
 8005932:	4a29      	ldr	r2, [pc, #164]	; (80059d8 <prvAddNewTaskToReadyList+0xb8>)
 8005934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005936:	4b29      	ldr	r3, [pc, #164]	; (80059dc <prvAddNewTaskToReadyList+0xbc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800593e:	4a27      	ldr	r2, [pc, #156]	; (80059dc <prvAddNewTaskToReadyList+0xbc>)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005944:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <prvAddNewTaskToReadyList+0xb8>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d110      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800594c:	f000 facc 	bl	8005ee8 <prvInitialiseTaskLists>
 8005950:	e00d      	b.n	800596e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005952:	4b23      	ldr	r3, [pc, #140]	; (80059e0 <prvAddNewTaskToReadyList+0xc0>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800595a:	4b20      	ldr	r3, [pc, #128]	; (80059dc <prvAddNewTaskToReadyList+0xbc>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	429a      	cmp	r2, r3
 8005966:	d802      	bhi.n	800596e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005968:	4a1c      	ldr	r2, [pc, #112]	; (80059dc <prvAddNewTaskToReadyList+0xbc>)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800596e:	4b1d      	ldr	r3, [pc, #116]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	4a1b      	ldr	r2, [pc, #108]	; (80059e4 <prvAddNewTaskToReadyList+0xc4>)
 8005976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597c:	2201      	movs	r2, #1
 800597e:	409a      	lsls	r2, r3
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4313      	orrs	r3, r2
 8005986:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <prvAddNewTaskToReadyList+0xc8>)
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a15      	ldr	r2, [pc, #84]	; (80059ec <prvAddNewTaskToReadyList+0xcc>)
 8005998:	441a      	add	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f7ff fdf6 	bl	8005592 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059a6:	f000 fd25 	bl	80063f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80059aa:	4b0d      	ldr	r3, [pc, #52]	; (80059e0 <prvAddNewTaskToReadyList+0xc0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00e      	beq.n	80059d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <prvAddNewTaskToReadyList+0xbc>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d207      	bcs.n	80059d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80059c0:	4b0b      	ldr	r3, [pc, #44]	; (80059f0 <prvAddNewTaskToReadyList+0xd0>)
 80059c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	200005a0 	.word	0x200005a0
 80059dc:	200004a0 	.word	0x200004a0
 80059e0:	200005ac 	.word	0x200005ac
 80059e4:	200005bc 	.word	0x200005bc
 80059e8:	200005a8 	.word	0x200005a8
 80059ec:	200004a4 	.word	0x200004a4
 80059f0:	e000ed04 	.word	0xe000ed04

080059f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80059fc:	2300      	movs	r3, #0
 80059fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d017      	beq.n	8005a36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a06:	4b13      	ldr	r3, [pc, #76]	; (8005a54 <vTaskDelay+0x60>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <vTaskDelay+0x30>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	60bb      	str	r3, [r7, #8]
}
 8005a20:	bf00      	nop
 8005a22:	e7fe      	b.n	8005a22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a24:	f000 f884 	bl	8005b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a28:	2100      	movs	r1, #0
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fb1e 	bl	800606c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a30:	f000 f88c 	bl	8005b4c <xTaskResumeAll>
 8005a34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d107      	bne.n	8005a4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <vTaskDelay+0x64>)
 8005a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	200005c8 	.word	0x200005c8
 8005a58:	e000ed04 	.word	0xe000ed04

08005a5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b08a      	sub	sp, #40	; 0x28
 8005a60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005a6a:	463a      	mov	r2, r7
 8005a6c:	1d39      	adds	r1, r7, #4
 8005a6e:	f107 0308 	add.w	r3, r7, #8
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7fa fdea 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005a78:	6839      	ldr	r1, [r7, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	9202      	str	r2, [sp, #8]
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	2300      	movs	r3, #0
 8005a88:	460a      	mov	r2, r1
 8005a8a:	4921      	ldr	r1, [pc, #132]	; (8005b10 <vTaskStartScheduler+0xb4>)
 8005a8c:	4821      	ldr	r0, [pc, #132]	; (8005b14 <vTaskStartScheduler+0xb8>)
 8005a8e:	f7ff fe07 	bl	80056a0 <xTaskCreateStatic>
 8005a92:	4603      	mov	r3, r0
 8005a94:	4a20      	ldr	r2, [pc, #128]	; (8005b18 <vTaskStartScheduler+0xbc>)
 8005a96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005a98:	4b1f      	ldr	r3, [pc, #124]	; (8005b18 <vTaskStartScheduler+0xbc>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	e001      	b.n	8005aaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d11b      	bne.n	8005ae8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <vTaskStartScheduler+0xc0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	334c      	adds	r3, #76	; 0x4c
 8005aca:	4a15      	ldr	r2, [pc, #84]	; (8005b20 <vTaskStartScheduler+0xc4>)
 8005acc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ace:	4b15      	ldr	r3, [pc, #84]	; (8005b24 <vTaskStartScheduler+0xc8>)
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <vTaskStartScheduler+0xcc>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005adc:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <vTaskStartScheduler+0xd0>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ae2:	f000 fbb5 	bl	8006250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ae6:	e00e      	b.n	8005b06 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aee:	d10a      	bne.n	8005b06 <vTaskStartScheduler+0xaa>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	60fb      	str	r3, [r7, #12]
}
 8005b02:	bf00      	nop
 8005b04:	e7fe      	b.n	8005b04 <vTaskStartScheduler+0xa8>
}
 8005b06:	bf00      	nop
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	08006c94 	.word	0x08006c94
 8005b14:	08005eb9 	.word	0x08005eb9
 8005b18:	200005c4 	.word	0x200005c4
 8005b1c:	200004a0 	.word	0x200004a0
 8005b20:	20000010 	.word	0x20000010
 8005b24:	200005c0 	.word	0x200005c0
 8005b28:	200005ac 	.word	0x200005ac
 8005b2c:	200005a4 	.word	0x200005a4

08005b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005b34:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	4a03      	ldr	r2, [pc, #12]	; (8005b48 <vTaskSuspendAll+0x18>)
 8005b3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005b3e:	bf00      	nop
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	200005c8 	.word	0x200005c8

08005b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005b5a:	4b41      	ldr	r3, [pc, #260]	; (8005c60 <xTaskResumeAll+0x114>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <xTaskResumeAll+0x2c>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	603b      	str	r3, [r7, #0]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005b78:	f000 fc0c 	bl	8006394 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005b7c:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <xTaskResumeAll+0x114>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	4a37      	ldr	r2, [pc, #220]	; (8005c60 <xTaskResumeAll+0x114>)
 8005b84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b86:	4b36      	ldr	r3, [pc, #216]	; (8005c60 <xTaskResumeAll+0x114>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d161      	bne.n	8005c52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005b8e:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <xTaskResumeAll+0x118>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d05d      	beq.n	8005c52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b96:	e02e      	b.n	8005bf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b33      	ldr	r3, [pc, #204]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	3318      	adds	r3, #24
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fd51 	bl	800564c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3304      	adds	r3, #4
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fd4c 	bl	800564c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2201      	movs	r2, #1
 8005bba:	409a      	lsls	r2, r3
 8005bbc:	4b2b      	ldr	r3, [pc, #172]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <xTaskResumeAll+0x120>)
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4a27      	ldr	r2, [pc, #156]	; (8005c70 <xTaskResumeAll+0x124>)
 8005bd4:	441a      	add	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4610      	mov	r0, r2
 8005bde:	f7ff fcd8 	bl	8005592 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005be6:	4b23      	ldr	r3, [pc, #140]	; (8005c74 <xTaskResumeAll+0x128>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005bf0:	4b21      	ldr	r3, [pc, #132]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005bf6:	4b1c      	ldr	r3, [pc, #112]	; (8005c68 <xTaskResumeAll+0x11c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1cc      	bne.n	8005b98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c04:	f000 fa12 	bl	800602c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c08:	4b1c      	ldr	r3, [pc, #112]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d010      	beq.n	8005c36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c14:	f000 f836 	bl	8005c84 <xTaskIncrementTick>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005c1e:	4b16      	ldr	r3, [pc, #88]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1f1      	bne.n	8005c14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005c30:	4b12      	ldr	r3, [pc, #72]	; (8005c7c <xTaskResumeAll+0x130>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005c36:	4b10      	ldr	r3, [pc, #64]	; (8005c78 <xTaskResumeAll+0x12c>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005c42:	4b0f      	ldr	r3, [pc, #60]	; (8005c80 <xTaskResumeAll+0x134>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005c52:	f000 fbcf 	bl	80063f4 <vPortExitCritical>

	return xAlreadyYielded;
 8005c56:	68bb      	ldr	r3, [r7, #8]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	200005c8 	.word	0x200005c8
 8005c64:	200005a0 	.word	0x200005a0
 8005c68:	20000560 	.word	0x20000560
 8005c6c:	200005a8 	.word	0x200005a8
 8005c70:	200004a4 	.word	0x200004a4
 8005c74:	200004a0 	.word	0x200004a0
 8005c78:	200005b4 	.word	0x200005b4
 8005c7c:	200005b0 	.word	0x200005b0
 8005c80:	e000ed04 	.word	0xe000ed04

08005c84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c8e:	4b4e      	ldr	r3, [pc, #312]	; (8005dc8 <xTaskIncrementTick+0x144>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f040 808e 	bne.w	8005db4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c98:	4b4c      	ldr	r3, [pc, #304]	; (8005dcc <xTaskIncrementTick+0x148>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ca0:	4a4a      	ldr	r2, [pc, #296]	; (8005dcc <xTaskIncrementTick+0x148>)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d120      	bne.n	8005cee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005cac:	4b48      	ldr	r3, [pc, #288]	; (8005dd0 <xTaskIncrementTick+0x14c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00a      	beq.n	8005ccc <xTaskIncrementTick+0x48>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	603b      	str	r3, [r7, #0]
}
 8005cc8:	bf00      	nop
 8005cca:	e7fe      	b.n	8005cca <xTaskIncrementTick+0x46>
 8005ccc:	4b40      	ldr	r3, [pc, #256]	; (8005dd0 <xTaskIncrementTick+0x14c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	60fb      	str	r3, [r7, #12]
 8005cd2:	4b40      	ldr	r3, [pc, #256]	; (8005dd4 <xTaskIncrementTick+0x150>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a3e      	ldr	r2, [pc, #248]	; (8005dd0 <xTaskIncrementTick+0x14c>)
 8005cd8:	6013      	str	r3, [r2, #0]
 8005cda:	4a3e      	ldr	r2, [pc, #248]	; (8005dd4 <xTaskIncrementTick+0x150>)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6013      	str	r3, [r2, #0]
 8005ce0:	4b3d      	ldr	r3, [pc, #244]	; (8005dd8 <xTaskIncrementTick+0x154>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	4a3c      	ldr	r2, [pc, #240]	; (8005dd8 <xTaskIncrementTick+0x154>)
 8005ce8:	6013      	str	r3, [r2, #0]
 8005cea:	f000 f99f 	bl	800602c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005cee:	4b3b      	ldr	r3, [pc, #236]	; (8005ddc <xTaskIncrementTick+0x158>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d348      	bcc.n	8005d8a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf8:	4b35      	ldr	r3, [pc, #212]	; (8005dd0 <xTaskIncrementTick+0x14c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d02:	4b36      	ldr	r3, [pc, #216]	; (8005ddc <xTaskIncrementTick+0x158>)
 8005d04:	f04f 32ff 	mov.w	r2, #4294967295
 8005d08:	601a      	str	r2, [r3, #0]
					break;
 8005d0a:	e03e      	b.n	8005d8a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d0c:	4b30      	ldr	r3, [pc, #192]	; (8005dd0 <xTaskIncrementTick+0x14c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d203      	bcs.n	8005d2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005d24:	4a2d      	ldr	r2, [pc, #180]	; (8005ddc <xTaskIncrementTick+0x158>)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005d2a:	e02e      	b.n	8005d8a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	3304      	adds	r3, #4
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff fc8b 	bl	800564c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d004      	beq.n	8005d48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3318      	adds	r3, #24
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fc82 	bl	800564c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	409a      	lsls	r2, r3
 8005d50:	4b23      	ldr	r3, [pc, #140]	; (8005de0 <xTaskIncrementTick+0x15c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <xTaskIncrementTick+0x15c>)
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d5e:	4613      	mov	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4a1f      	ldr	r2, [pc, #124]	; (8005de4 <xTaskIncrementTick+0x160>)
 8005d68:	441a      	add	r2, r3
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	4619      	mov	r1, r3
 8005d70:	4610      	mov	r0, r2
 8005d72:	f7ff fc0e 	bl	8005592 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7a:	4b1b      	ldr	r3, [pc, #108]	; (8005de8 <xTaskIncrementTick+0x164>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d3b9      	bcc.n	8005cf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d88:	e7b6      	b.n	8005cf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005d8a:	4b17      	ldr	r3, [pc, #92]	; (8005de8 <xTaskIncrementTick+0x164>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	4914      	ldr	r1, [pc, #80]	; (8005de4 <xTaskIncrementTick+0x160>)
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	440b      	add	r3, r1
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d901      	bls.n	8005da6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <xTaskIncrementTick+0x168>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d007      	beq.n	8005dbe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	617b      	str	r3, [r7, #20]
 8005db2:	e004      	b.n	8005dbe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005db4:	4b0e      	ldr	r3, [pc, #56]	; (8005df0 <xTaskIncrementTick+0x16c>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3301      	adds	r3, #1
 8005dba:	4a0d      	ldr	r2, [pc, #52]	; (8005df0 <xTaskIncrementTick+0x16c>)
 8005dbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005dbe:	697b      	ldr	r3, [r7, #20]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3718      	adds	r7, #24
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	200005c8 	.word	0x200005c8
 8005dcc:	200005a4 	.word	0x200005a4
 8005dd0:	20000558 	.word	0x20000558
 8005dd4:	2000055c 	.word	0x2000055c
 8005dd8:	200005b8 	.word	0x200005b8
 8005ddc:	200005c0 	.word	0x200005c0
 8005de0:	200005a8 	.word	0x200005a8
 8005de4:	200004a4 	.word	0x200004a4
 8005de8:	200004a0 	.word	0x200004a0
 8005dec:	200005b4 	.word	0x200005b4
 8005df0:	200005b0 	.word	0x200005b0

08005df4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005dfa:	4b29      	ldr	r3, [pc, #164]	; (8005ea0 <vTaskSwitchContext+0xac>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005e02:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <vTaskSwitchContext+0xb0>)
 8005e04:	2201      	movs	r2, #1
 8005e06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005e08:	e044      	b.n	8005e94 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <vTaskSwitchContext+0xb0>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <vTaskSwitchContext+0xb4>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	fab3 f383 	clz	r3, r3
 8005e1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	f1c3 031f 	rsb	r3, r3, #31
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	4921      	ldr	r1, [pc, #132]	; (8005eac <vTaskSwitchContext+0xb8>)
 8005e28:	697a      	ldr	r2, [r7, #20]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3e:	f383 8811 	msr	BASEPRI, r3
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	f3bf 8f4f 	dsb	sy
 8005e4a:	607b      	str	r3, [r7, #4]
}
 8005e4c:	bf00      	nop
 8005e4e:	e7fe      	b.n	8005e4e <vTaskSwitchContext+0x5a>
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4a14      	ldr	r2, [pc, #80]	; (8005eac <vTaskSwitchContext+0xb8>)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	3308      	adds	r3, #8
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d104      	bne.n	8005e80 <vTaskSwitchContext+0x8c>
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <vTaskSwitchContext+0xbc>)
 8005e88:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e8a:	4b09      	ldr	r3, [pc, #36]	; (8005eb0 <vTaskSwitchContext+0xbc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	334c      	adds	r3, #76	; 0x4c
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <vTaskSwitchContext+0xc0>)
 8005e92:	6013      	str	r3, [r2, #0]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	200005c8 	.word	0x200005c8
 8005ea4:	200005b4 	.word	0x200005b4
 8005ea8:	200005a8 	.word	0x200005a8
 8005eac:	200004a4 	.word	0x200004a4
 8005eb0:	200004a0 	.word	0x200004a0
 8005eb4:	20000010 	.word	0x20000010

08005eb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ec0:	f000 f852 	bl	8005f68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ec4:	4b06      	ldr	r3, [pc, #24]	; (8005ee0 <prvIdleTask+0x28>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d9f9      	bls.n	8005ec0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <prvIdleTask+0x2c>)
 8005ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed2:	601a      	str	r2, [r3, #0]
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005edc:	e7f0      	b.n	8005ec0 <prvIdleTask+0x8>
 8005ede:	bf00      	nop
 8005ee0:	200004a4 	.word	0x200004a4
 8005ee4:	e000ed04 	.word	0xe000ed04

08005ee8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
 8005ef2:	e00c      	b.n	8005f0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <prvInitialiseTaskLists+0x60>)
 8005f00:	4413      	add	r3, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fb18 	bl	8005538 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b06      	cmp	r3, #6
 8005f12:	d9ef      	bls.n	8005ef4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f14:	480d      	ldr	r0, [pc, #52]	; (8005f4c <prvInitialiseTaskLists+0x64>)
 8005f16:	f7ff fb0f 	bl	8005538 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f1a:	480d      	ldr	r0, [pc, #52]	; (8005f50 <prvInitialiseTaskLists+0x68>)
 8005f1c:	f7ff fb0c 	bl	8005538 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f20:	480c      	ldr	r0, [pc, #48]	; (8005f54 <prvInitialiseTaskLists+0x6c>)
 8005f22:	f7ff fb09 	bl	8005538 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f26:	480c      	ldr	r0, [pc, #48]	; (8005f58 <prvInitialiseTaskLists+0x70>)
 8005f28:	f7ff fb06 	bl	8005538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f2c:	480b      	ldr	r0, [pc, #44]	; (8005f5c <prvInitialiseTaskLists+0x74>)
 8005f2e:	f7ff fb03 	bl	8005538 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f32:	4b0b      	ldr	r3, [pc, #44]	; (8005f60 <prvInitialiseTaskLists+0x78>)
 8005f34:	4a05      	ldr	r2, [pc, #20]	; (8005f4c <prvInitialiseTaskLists+0x64>)
 8005f36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f38:	4b0a      	ldr	r3, [pc, #40]	; (8005f64 <prvInitialiseTaskLists+0x7c>)
 8005f3a:	4a05      	ldr	r2, [pc, #20]	; (8005f50 <prvInitialiseTaskLists+0x68>)
 8005f3c:	601a      	str	r2, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	200004a4 	.word	0x200004a4
 8005f4c:	20000530 	.word	0x20000530
 8005f50:	20000544 	.word	0x20000544
 8005f54:	20000560 	.word	0x20000560
 8005f58:	20000574 	.word	0x20000574
 8005f5c:	2000058c 	.word	0x2000058c
 8005f60:	20000558 	.word	0x20000558
 8005f64:	2000055c 	.word	0x2000055c

08005f68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f6e:	e019      	b.n	8005fa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f70:	f000 fa10 	bl	8006394 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <prvCheckTasksWaitingTermination+0x50>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3304      	adds	r3, #4
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fb63 	bl	800564c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <prvCheckTasksWaitingTermination+0x54>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3b01      	subs	r3, #1
 8005f8c:	4a0b      	ldr	r2, [pc, #44]	; (8005fbc <prvCheckTasksWaitingTermination+0x54>)
 8005f8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <prvCheckTasksWaitingTermination+0x58>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3b01      	subs	r3, #1
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <prvCheckTasksWaitingTermination+0x58>)
 8005f98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f9a:	f000 fa2b 	bl	80063f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f810 	bl	8005fc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fa4:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <prvCheckTasksWaitingTermination+0x58>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e1      	bne.n	8005f70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fac:	bf00      	nop
 8005fae:	bf00      	nop
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	20000574 	.word	0x20000574
 8005fbc:	200005a0 	.word	0x200005a0
 8005fc0:	20000588 	.word	0x20000588

08005fc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	334c      	adds	r3, #76	; 0x4c
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fce7 	bl	80069a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d108      	bne.n	8005ff2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 fb83 	bl	80066f0 <vPortFree>
				vPortFree( pxTCB );
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fb80 	bl	80066f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ff0:	e018      	b.n	8006024 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d103      	bne.n	8006004 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fb77 	bl	80066f0 <vPortFree>
	}
 8006002:	e00f      	b.n	8006024 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800600a:	2b02      	cmp	r3, #2
 800600c:	d00a      	beq.n	8006024 <prvDeleteTCB+0x60>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	60fb      	str	r3, [r7, #12]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <prvDeleteTCB+0x5e>
	}
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <prvResetNextTaskUnblockTime+0x38>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d104      	bne.n	8006046 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvResetNextTaskUnblockTime+0x3c>)
 800603e:	f04f 32ff 	mov.w	r2, #4294967295
 8006042:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006044:	e008      	b.n	8006058 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006046:	4b07      	ldr	r3, [pc, #28]	; (8006064 <prvResetNextTaskUnblockTime+0x38>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4a04      	ldr	r2, [pc, #16]	; (8006068 <prvResetNextTaskUnblockTime+0x3c>)
 8006056:	6013      	str	r3, [r2, #0]
}
 8006058:	bf00      	nop
 800605a:	370c      	adds	r7, #12
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr
 8006064:	20000558 	.word	0x20000558
 8006068:	200005c0 	.word	0x200005c0

0800606c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006076:	4b29      	ldr	r3, [pc, #164]	; (800611c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800607c:	4b28      	ldr	r3, [pc, #160]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fae2 	bl	800564c <uxListRemove>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800608e:	4b24      	ldr	r3, [pc, #144]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	2201      	movs	r2, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43da      	mvns	r2, r3
 800609c:	4b21      	ldr	r3, [pc, #132]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb8>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4013      	ands	r3, r2
 80060a2:	4a20      	ldr	r2, [pc, #128]	; (8006124 <prvAddCurrentTaskToDelayedList+0xb8>)
 80060a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ac:	d10a      	bne.n	80060c4 <prvAddCurrentTaskToDelayedList+0x58>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060b4:	4b1a      	ldr	r3, [pc, #104]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	481a      	ldr	r0, [pc, #104]	; (8006128 <prvAddCurrentTaskToDelayedList+0xbc>)
 80060be:	f7ff fa68 	bl	8005592 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80060c2:	e026      	b.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80060cc:	4b14      	ldr	r3, [pc, #80]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d209      	bcs.n	80060f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060dc:	4b13      	ldr	r3, [pc, #76]	; (800612c <prvAddCurrentTaskToDelayedList+0xc0>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3304      	adds	r3, #4
 80060e6:	4619      	mov	r1, r3
 80060e8:	4610      	mov	r0, r2
 80060ea:	f7ff fa76 	bl	80055da <vListInsert>
}
 80060ee:	e010      	b.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80060f0:	4b0f      	ldr	r3, [pc, #60]	; (8006130 <prvAddCurrentTaskToDelayedList+0xc4>)
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <prvAddCurrentTaskToDelayedList+0xb4>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3304      	adds	r3, #4
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f7ff fa6c 	bl	80055da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	d202      	bcs.n	8006112 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <prvAddCurrentTaskToDelayedList+0xc8>)
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6013      	str	r3, [r2, #0]
}
 8006112:	bf00      	nop
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	200005a4 	.word	0x200005a4
 8006120:	200004a0 	.word	0x200004a0
 8006124:	200005a8 	.word	0x200005a8
 8006128:	2000058c 	.word	0x2000058c
 800612c:	2000055c 	.word	0x2000055c
 8006130:	20000558 	.word	0x20000558
 8006134:	200005c0 	.word	0x200005c0

08006138 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	3b04      	subs	r3, #4
 8006148:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006150:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b04      	subs	r3, #4
 8006156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3b04      	subs	r3, #4
 8006166:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006168:	4a0c      	ldr	r2, [pc, #48]	; (800619c <pxPortInitialiseStack+0x64>)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3b14      	subs	r3, #20
 8006172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	3b04      	subs	r3, #4
 800617e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f06f 0202 	mvn.w	r2, #2
 8006186:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	3b20      	subs	r3, #32
 800618c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800618e:	68fb      	ldr	r3, [r7, #12]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3714      	adds	r7, #20
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr
 800619c:	080061a1 	.word	0x080061a1

080061a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061aa:	4b12      	ldr	r3, [pc, #72]	; (80061f4 <prvTaskExitError+0x54>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b2:	d00a      	beq.n	80061ca <prvTaskExitError+0x2a>
	__asm volatile
 80061b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b8:	f383 8811 	msr	BASEPRI, r3
 80061bc:	f3bf 8f6f 	isb	sy
 80061c0:	f3bf 8f4f 	dsb	sy
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <prvTaskExitError+0x28>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	f383 8811 	msr	BASEPRI, r3
 80061d2:	f3bf 8f6f 	isb	sy
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	60bb      	str	r3, [r7, #8]
}
 80061dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061de:	bf00      	nop
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0fc      	beq.n	80061e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	2000000c 	.word	0x2000000c
	...

08006200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006200:	4b07      	ldr	r3, [pc, #28]	; (8006220 <pxCurrentTCBConst2>)
 8006202:	6819      	ldr	r1, [r3, #0]
 8006204:	6808      	ldr	r0, [r1, #0]
 8006206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800620a:	f380 8809 	msr	PSP, r0
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f04f 0000 	mov.w	r0, #0
 8006216:	f380 8811 	msr	BASEPRI, r0
 800621a:	4770      	bx	lr
 800621c:	f3af 8000 	nop.w

08006220 <pxCurrentTCBConst2>:
 8006220:	200004a0 	.word	0x200004a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006224:	bf00      	nop
 8006226:	bf00      	nop

08006228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006228:	4808      	ldr	r0, [pc, #32]	; (800624c <prvPortStartFirstTask+0x24>)
 800622a:	6800      	ldr	r0, [r0, #0]
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f380 8808 	msr	MSP, r0
 8006232:	f04f 0000 	mov.w	r0, #0
 8006236:	f380 8814 	msr	CONTROL, r0
 800623a:	b662      	cpsie	i
 800623c:	b661      	cpsie	f
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	df00      	svc	0
 8006248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800624a:	bf00      	nop
 800624c:	e000ed08 	.word	0xe000ed08

08006250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b086      	sub	sp, #24
 8006254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006256:	4b46      	ldr	r3, [pc, #280]	; (8006370 <xPortStartScheduler+0x120>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a46      	ldr	r2, [pc, #280]	; (8006374 <xPortStartScheduler+0x124>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d10a      	bne.n	8006276 <xPortStartScheduler+0x26>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	613b      	str	r3, [r7, #16]
}
 8006272:	bf00      	nop
 8006274:	e7fe      	b.n	8006274 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006276:	4b3e      	ldr	r3, [pc, #248]	; (8006370 <xPortStartScheduler+0x120>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a3f      	ldr	r2, [pc, #252]	; (8006378 <xPortStartScheduler+0x128>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10a      	bne.n	8006296 <xPortStartScheduler+0x46>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006296:	4b39      	ldr	r3, [pc, #228]	; (800637c <xPortStartScheduler+0x12c>)
 8006298:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	22ff      	movs	r2, #255	; 0xff
 80062a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80062b0:	78fb      	ldrb	r3, [r7, #3]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	4b31      	ldr	r3, [pc, #196]	; (8006380 <xPortStartScheduler+0x130>)
 80062bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80062be:	4b31      	ldr	r3, [pc, #196]	; (8006384 <xPortStartScheduler+0x134>)
 80062c0:	2207      	movs	r2, #7
 80062c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062c4:	e009      	b.n	80062da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80062c6:	4b2f      	ldr	r3, [pc, #188]	; (8006384 <xPortStartScheduler+0x134>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <xPortStartScheduler+0x134>)
 80062ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80062da:	78fb      	ldrb	r3, [r7, #3]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e2:	2b80      	cmp	r3, #128	; 0x80
 80062e4:	d0ef      	beq.n	80062c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80062e6:	4b27      	ldr	r3, [pc, #156]	; (8006384 <xPortStartScheduler+0x134>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f1c3 0307 	rsb	r3, r3, #7
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d00a      	beq.n	8006308 <xPortStartScheduler+0xb8>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	60bb      	str	r3, [r7, #8]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006308:	4b1e      	ldr	r3, [pc, #120]	; (8006384 <xPortStartScheduler+0x134>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	021b      	lsls	r3, r3, #8
 800630e:	4a1d      	ldr	r2, [pc, #116]	; (8006384 <xPortStartScheduler+0x134>)
 8006310:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <xPortStartScheduler+0x134>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800631a:	4a1a      	ldr	r2, [pc, #104]	; (8006384 <xPortStartScheduler+0x134>)
 800631c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	b2da      	uxtb	r2, r3
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006326:	4b18      	ldr	r3, [pc, #96]	; (8006388 <xPortStartScheduler+0x138>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a17      	ldr	r2, [pc, #92]	; (8006388 <xPortStartScheduler+0x138>)
 800632c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <xPortStartScheduler+0x138>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <xPortStartScheduler+0x138>)
 8006338:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800633c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800633e:	f000 f8dd 	bl	80064fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006342:	4b12      	ldr	r3, [pc, #72]	; (800638c <xPortStartScheduler+0x13c>)
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006348:	f000 f8fc 	bl	8006544 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800634c:	4b10      	ldr	r3, [pc, #64]	; (8006390 <xPortStartScheduler+0x140>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0f      	ldr	r2, [pc, #60]	; (8006390 <xPortStartScheduler+0x140>)
 8006352:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006356:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006358:	f7ff ff66 	bl	8006228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800635c:	f7ff fd4a 	bl	8005df4 <vTaskSwitchContext>
	prvTaskExitError();
 8006360:	f7ff ff1e 	bl	80061a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3718      	adds	r7, #24
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000ed00 	.word	0xe000ed00
 8006374:	410fc271 	.word	0x410fc271
 8006378:	410fc270 	.word	0x410fc270
 800637c:	e000e400 	.word	0xe000e400
 8006380:	200005cc 	.word	0x200005cc
 8006384:	200005d0 	.word	0x200005d0
 8006388:	e000ed20 	.word	0xe000ed20
 800638c:	2000000c 	.word	0x2000000c
 8006390:	e000ef34 	.word	0xe000ef34

08006394 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
	__asm volatile
 800639a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639e:	f383 8811 	msr	BASEPRI, r3
 80063a2:	f3bf 8f6f 	isb	sy
 80063a6:	f3bf 8f4f 	dsb	sy
 80063aa:	607b      	str	r3, [r7, #4]
}
 80063ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80063ae:	4b0f      	ldr	r3, [pc, #60]	; (80063ec <vPortEnterCritical+0x58>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a0d      	ldr	r2, [pc, #52]	; (80063ec <vPortEnterCritical+0x58>)
 80063b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80063b8:	4b0c      	ldr	r3, [pc, #48]	; (80063ec <vPortEnterCritical+0x58>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10f      	bne.n	80063e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80063c0:	4b0b      	ldr	r3, [pc, #44]	; (80063f0 <vPortEnterCritical+0x5c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	603b      	str	r3, [r7, #0]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <vPortEnterCritical+0x4a>
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	e000ed04 	.word	0xe000ed04

080063f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063fa:	4b12      	ldr	r3, [pc, #72]	; (8006444 <vPortExitCritical+0x50>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10a      	bne.n	8006418 <vPortExitCritical+0x24>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	607b      	str	r3, [r7, #4]
}
 8006414:	bf00      	nop
 8006416:	e7fe      	b.n	8006416 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <vPortExitCritical+0x50>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a09      	ldr	r2, [pc, #36]	; (8006444 <vPortExitCritical+0x50>)
 8006420:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006422:	4b08      	ldr	r3, [pc, #32]	; (8006444 <vPortExitCritical+0x50>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d105      	bne.n	8006436 <vPortExitCritical+0x42>
 800642a:	2300      	movs	r3, #0
 800642c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006434:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
	...

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b15      	ldr	r3, [pc, #84]	; (80064b0 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f01e 0f10 	tst.w	lr, #16
 8006460:	bf08      	it	eq
 8006462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006470:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006474:	f380 8811 	msr	BASEPRI, r0
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f7ff fcb8 	bl	8005df4 <vTaskSwitchContext>
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f380 8811 	msr	BASEPRI, r0
 800648c:	bc09      	pop	{r0, r3}
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	f01e 0f10 	tst.w	lr, #16
 800649a:	bf08      	it	eq
 800649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064a0:	f380 8809 	msr	PSP, r0
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst>:
 80064b0:	200004a0 	.word	0x200004a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f7ff fbd7 	bl	8005c84 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064dc:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <SysTick_Handler+0x40>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
}
 80064ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006506:	4b0b      	ldr	r3, [pc, #44]	; (8006534 <vPortSetupTimerInterrupt+0x38>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800650c:	4b0a      	ldr	r3, [pc, #40]	; (8006538 <vPortSetupTimerInterrupt+0x3c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a0a      	ldr	r2, [pc, #40]	; (800653c <vPortSetupTimerInterrupt+0x40>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	099b      	lsrs	r3, r3, #6
 8006518:	4a09      	ldr	r2, [pc, #36]	; (8006540 <vPortSetupTimerInterrupt+0x44>)
 800651a:	3b01      	subs	r3, #1
 800651c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800651e:	4b04      	ldr	r3, [pc, #16]	; (8006530 <vPortSetupTimerInterrupt+0x34>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e010 	.word	0xe000e010
 8006534:	e000e018 	.word	0xe000e018
 8006538:	20000000 	.word	0x20000000
 800653c:	10624dd3 	.word	0x10624dd3
 8006540:	e000e014 	.word	0xe000e014

08006544 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006544:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006554 <vPortEnableVFP+0x10>
 8006548:	6801      	ldr	r1, [r0, #0]
 800654a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800654e:	6001      	str	r1, [r0, #0]
 8006550:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006552:	bf00      	nop
 8006554:	e000ed88 	.word	0xe000ed88

08006558 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006560:	2300      	movs	r3, #0
 8006562:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006564:	f7ff fae4 	bl	8005b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006568:	4b5b      	ldr	r3, [pc, #364]	; (80066d8 <pvPortMalloc+0x180>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d101      	bne.n	8006574 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006570:	f000 f920 	bl	80067b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006574:	4b59      	ldr	r3, [pc, #356]	; (80066dc <pvPortMalloc+0x184>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	f040 8093 	bne.w	80066a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01d      	beq.n	80065c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006588:	2208      	movs	r2, #8
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4413      	add	r3, r2
 800658e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f003 0307 	and.w	r3, r3, #7
 8006596:	2b00      	cmp	r3, #0
 8006598:	d014      	beq.n	80065c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	3308      	adds	r3, #8
 80065a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <pvPortMalloc+0x6c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	617b      	str	r3, [r7, #20]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d06e      	beq.n	80066a8 <pvPortMalloc+0x150>
 80065ca:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <pvPortMalloc+0x188>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d869      	bhi.n	80066a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80065d4:	4b43      	ldr	r3, [pc, #268]	; (80066e4 <pvPortMalloc+0x18c>)
 80065d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80065d8:	4b42      	ldr	r3, [pc, #264]	; (80066e4 <pvPortMalloc+0x18c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065de:	e004      	b.n	80065ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d903      	bls.n	80065fc <pvPortMalloc+0xa4>
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1f1      	bne.n	80065e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065fc:	4b36      	ldr	r3, [pc, #216]	; (80066d8 <pvPortMalloc+0x180>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006602:	429a      	cmp	r2, r3
 8006604:	d050      	beq.n	80066a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2208      	movs	r2, #8
 800660c:	4413      	add	r3, r2
 800660e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	2308      	movs	r3, #8
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	429a      	cmp	r2, r3
 8006626:	d91f      	bls.n	8006668 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4413      	add	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f003 0307 	and.w	r3, r3, #7
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <pvPortMalloc+0xf8>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	613b      	str	r3, [r7, #16]
}
 800664c:	bf00      	nop
 800664e:	e7fe      	b.n	800664e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1ad2      	subs	r2, r2, r3
 8006658:	69bb      	ldr	r3, [r7, #24]
 800665a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006662:	69b8      	ldr	r0, [r7, #24]
 8006664:	f000 f908 	bl	8006878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006668:	4b1d      	ldr	r3, [pc, #116]	; (80066e0 <pvPortMalloc+0x188>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	4a1b      	ldr	r2, [pc, #108]	; (80066e0 <pvPortMalloc+0x188>)
 8006674:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006676:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <pvPortMalloc+0x188>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <pvPortMalloc+0x190>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d203      	bcs.n	800668a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006682:	4b17      	ldr	r3, [pc, #92]	; (80066e0 <pvPortMalloc+0x188>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a18      	ldr	r2, [pc, #96]	; (80066e8 <pvPortMalloc+0x190>)
 8006688:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800668a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	4b13      	ldr	r3, [pc, #76]	; (80066dc <pvPortMalloc+0x184>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	431a      	orrs	r2, r3
 8006694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006696:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800669e:	4b13      	ldr	r3, [pc, #76]	; (80066ec <pvPortMalloc+0x194>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	3301      	adds	r3, #1
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <pvPortMalloc+0x194>)
 80066a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80066a8:	f7ff fa50 	bl	8005b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <pvPortMalloc+0x174>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60fb      	str	r3, [r7, #12]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <pvPortMalloc+0x172>
	return pvReturn;
 80066cc:	69fb      	ldr	r3, [r7, #28]
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	20001194 	.word	0x20001194
 80066dc:	200011a8 	.word	0x200011a8
 80066e0:	20001198 	.word	0x20001198
 80066e4:	2000118c 	.word	0x2000118c
 80066e8:	2000119c 	.word	0x2000119c
 80066ec:	200011a0 	.word	0x200011a0

080066f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04d      	beq.n	800679e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006702:	2308      	movs	r3, #8
 8006704:	425b      	negs	r3, r3
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	4413      	add	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <vPortFree+0xb8>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4013      	ands	r3, r2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10a      	bne.n	8006734 <vPortFree+0x44>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	60fb      	str	r3, [r7, #12]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00a      	beq.n	8006752 <vPortFree+0x62>
	__asm volatile
 800673c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006740:	f383 8811 	msr	BASEPRI, r3
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	f3bf 8f4f 	dsb	sy
 800674c:	60bb      	str	r3, [r7, #8]
}
 800674e:	bf00      	nop
 8006750:	e7fe      	b.n	8006750 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	4b14      	ldr	r3, [pc, #80]	; (80067a8 <vPortFree+0xb8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4013      	ands	r3, r2
 800675c:	2b00      	cmp	r3, #0
 800675e:	d01e      	beq.n	800679e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d11a      	bne.n	800679e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685a      	ldr	r2, [r3, #4]
 800676c:	4b0e      	ldr	r3, [pc, #56]	; (80067a8 <vPortFree+0xb8>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	43db      	mvns	r3, r3
 8006772:	401a      	ands	r2, r3
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006778:	f7ff f9da 	bl	8005b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	4b0a      	ldr	r3, [pc, #40]	; (80067ac <vPortFree+0xbc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4413      	add	r3, r2
 8006786:	4a09      	ldr	r2, [pc, #36]	; (80067ac <vPortFree+0xbc>)
 8006788:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800678a:	6938      	ldr	r0, [r7, #16]
 800678c:	f000 f874 	bl	8006878 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <vPortFree+0xc0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3301      	adds	r3, #1
 8006796:	4a06      	ldr	r2, [pc, #24]	; (80067b0 <vPortFree+0xc0>)
 8006798:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800679a:	f7ff f9d7 	bl	8005b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200011a8 	.word	0x200011a8
 80067ac:	20001198 	.word	0x20001198
 80067b0:	200011a4 	.word	0x200011a4

080067b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80067b4:	b480      	push	{r7}
 80067b6:	b085      	sub	sp, #20
 80067b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067ba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80067be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80067c0:	4b27      	ldr	r3, [pc, #156]	; (8006860 <prvHeapInit+0xac>)
 80067c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3307      	adds	r3, #7
 80067d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <prvHeapInit+0xac>)
 80067e4:	4413      	add	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067ec:	4a1d      	ldr	r2, [pc, #116]	; (8006864 <prvHeapInit+0xb0>)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067f2:	4b1c      	ldr	r3, [pc, #112]	; (8006864 <prvHeapInit+0xb0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006800:	2208      	movs	r2, #8
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	1a9b      	subs	r3, r3, r2
 8006806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f023 0307 	bic.w	r3, r3, #7
 800680e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4a15      	ldr	r2, [pc, #84]	; (8006868 <prvHeapInit+0xb4>)
 8006814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006816:	4b14      	ldr	r3, [pc, #80]	; (8006868 <prvHeapInit+0xb4>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800681e:	4b12      	ldr	r3, [pc, #72]	; (8006868 <prvHeapInit+0xb4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	1ad2      	subs	r2, r2, r3
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006834:	4b0c      	ldr	r3, [pc, #48]	; (8006868 <prvHeapInit+0xb4>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	4a0a      	ldr	r2, [pc, #40]	; (800686c <prvHeapInit+0xb8>)
 8006842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvHeapInit+0xbc>)
 800684a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800684c:	4b09      	ldr	r3, [pc, #36]	; (8006874 <prvHeapInit+0xc0>)
 800684e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006852:	601a      	str	r2, [r3, #0]
}
 8006854:	bf00      	nop
 8006856:	3714      	adds	r7, #20
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	200005d4 	.word	0x200005d4
 8006864:	2000118c 	.word	0x2000118c
 8006868:	20001194 	.word	0x20001194
 800686c:	2000119c 	.word	0x2000119c
 8006870:	20001198 	.word	0x20001198
 8006874:	200011a8 	.word	0x200011a8

08006878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006878:	b480      	push	{r7}
 800687a:	b085      	sub	sp, #20
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006880:	4b28      	ldr	r3, [pc, #160]	; (8006924 <prvInsertBlockIntoFreeList+0xac>)
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e002      	b.n	800688c <prvInsertBlockIntoFreeList+0x14>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	429a      	cmp	r2, r3
 8006894:	d8f7      	bhi.n	8006886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	4413      	add	r3, r2
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d108      	bne.n	80068ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	441a      	add	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	441a      	add	r2, r3
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d118      	bne.n	8006900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	4b15      	ldr	r3, [pc, #84]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d00d      	beq.n	80068f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	e008      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068f6:	4b0c      	ldr	r3, [pc, #48]	; (8006928 <prvInsertBlockIntoFreeList+0xb0>)
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	601a      	str	r2, [r3, #0]
 80068fe:	e003      	b.n	8006908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	d002      	beq.n	8006916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006916:	bf00      	nop
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	2000118c 	.word	0x2000118c
 8006928:	20001194 	.word	0x20001194

0800692c <__libc_init_array>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	4d0d      	ldr	r5, [pc, #52]	; (8006964 <__libc_init_array+0x38>)
 8006930:	4c0d      	ldr	r4, [pc, #52]	; (8006968 <__libc_init_array+0x3c>)
 8006932:	1b64      	subs	r4, r4, r5
 8006934:	10a4      	asrs	r4, r4, #2
 8006936:	2600      	movs	r6, #0
 8006938:	42a6      	cmp	r6, r4
 800693a:	d109      	bne.n	8006950 <__libc_init_array+0x24>
 800693c:	4d0b      	ldr	r5, [pc, #44]	; (800696c <__libc_init_array+0x40>)
 800693e:	4c0c      	ldr	r4, [pc, #48]	; (8006970 <__libc_init_array+0x44>)
 8006940:	f000 f8e4 	bl	8006b0c <_init>
 8006944:	1b64      	subs	r4, r4, r5
 8006946:	10a4      	asrs	r4, r4, #2
 8006948:	2600      	movs	r6, #0
 800694a:	42a6      	cmp	r6, r4
 800694c:	d105      	bne.n	800695a <__libc_init_array+0x2e>
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	f855 3b04 	ldr.w	r3, [r5], #4
 8006954:	4798      	blx	r3
 8006956:	3601      	adds	r6, #1
 8006958:	e7ee      	b.n	8006938 <__libc_init_array+0xc>
 800695a:	f855 3b04 	ldr.w	r3, [r5], #4
 800695e:	4798      	blx	r3
 8006960:	3601      	adds	r6, #1
 8006962:	e7f2      	b.n	800694a <__libc_init_array+0x1e>
 8006964:	08006d5c 	.word	0x08006d5c
 8006968:	08006d5c 	.word	0x08006d5c
 800696c:	08006d5c 	.word	0x08006d5c
 8006970:	08006d60 	.word	0x08006d60

08006974 <__retarget_lock_acquire_recursive>:
 8006974:	4770      	bx	lr

08006976 <__retarget_lock_release_recursive>:
 8006976:	4770      	bx	lr

08006978 <memset>:
 8006978:	4402      	add	r2, r0
 800697a:	4603      	mov	r3, r0
 800697c:	4293      	cmp	r3, r2
 800697e:	d100      	bne.n	8006982 <memset+0xa>
 8006980:	4770      	bx	lr
 8006982:	f803 1b01 	strb.w	r1, [r3], #1
 8006986:	e7f9      	b.n	800697c <memset+0x4>

08006988 <cleanup_glue>:
 8006988:	b538      	push	{r3, r4, r5, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	6809      	ldr	r1, [r1, #0]
 800698e:	4605      	mov	r5, r0
 8006990:	b109      	cbz	r1, 8006996 <cleanup_glue+0xe>
 8006992:	f7ff fff9 	bl	8006988 <cleanup_glue>
 8006996:	4621      	mov	r1, r4
 8006998:	4628      	mov	r0, r5
 800699a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800699e:	f000 b869 	b.w	8006a74 <_free_r>
	...

080069a4 <_reclaim_reent>:
 80069a4:	4b2c      	ldr	r3, [pc, #176]	; (8006a58 <_reclaim_reent+0xb4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4283      	cmp	r3, r0
 80069aa:	b570      	push	{r4, r5, r6, lr}
 80069ac:	4604      	mov	r4, r0
 80069ae:	d051      	beq.n	8006a54 <_reclaim_reent+0xb0>
 80069b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80069b2:	b143      	cbz	r3, 80069c6 <_reclaim_reent+0x22>
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d14a      	bne.n	8006a50 <_reclaim_reent+0xac>
 80069ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069bc:	6819      	ldr	r1, [r3, #0]
 80069be:	b111      	cbz	r1, 80069c6 <_reclaim_reent+0x22>
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f857 	bl	8006a74 <_free_r>
 80069c6:	6961      	ldr	r1, [r4, #20]
 80069c8:	b111      	cbz	r1, 80069d0 <_reclaim_reent+0x2c>
 80069ca:	4620      	mov	r0, r4
 80069cc:	f000 f852 	bl	8006a74 <_free_r>
 80069d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80069d2:	b111      	cbz	r1, 80069da <_reclaim_reent+0x36>
 80069d4:	4620      	mov	r0, r4
 80069d6:	f000 f84d 	bl	8006a74 <_free_r>
 80069da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80069dc:	b111      	cbz	r1, 80069e4 <_reclaim_reent+0x40>
 80069de:	4620      	mov	r0, r4
 80069e0:	f000 f848 	bl	8006a74 <_free_r>
 80069e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069e6:	b111      	cbz	r1, 80069ee <_reclaim_reent+0x4a>
 80069e8:	4620      	mov	r0, r4
 80069ea:	f000 f843 	bl	8006a74 <_free_r>
 80069ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80069f0:	b111      	cbz	r1, 80069f8 <_reclaim_reent+0x54>
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f83e 	bl	8006a74 <_free_r>
 80069f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80069fa:	b111      	cbz	r1, 8006a02 <_reclaim_reent+0x5e>
 80069fc:	4620      	mov	r0, r4
 80069fe:	f000 f839 	bl	8006a74 <_free_r>
 8006a02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006a04:	b111      	cbz	r1, 8006a0c <_reclaim_reent+0x68>
 8006a06:	4620      	mov	r0, r4
 8006a08:	f000 f834 	bl	8006a74 <_free_r>
 8006a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a0e:	b111      	cbz	r1, 8006a16 <_reclaim_reent+0x72>
 8006a10:	4620      	mov	r0, r4
 8006a12:	f000 f82f 	bl	8006a74 <_free_r>
 8006a16:	69a3      	ldr	r3, [r4, #24]
 8006a18:	b1e3      	cbz	r3, 8006a54 <_reclaim_reent+0xb0>
 8006a1a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	4798      	blx	r3
 8006a20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006a22:	b1b9      	cbz	r1, 8006a54 <_reclaim_reent+0xb0>
 8006a24:	4620      	mov	r0, r4
 8006a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a2a:	f7ff bfad 	b.w	8006988 <cleanup_glue>
 8006a2e:	5949      	ldr	r1, [r1, r5]
 8006a30:	b941      	cbnz	r1, 8006a44 <_reclaim_reent+0xa0>
 8006a32:	3504      	adds	r5, #4
 8006a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a36:	2d80      	cmp	r5, #128	; 0x80
 8006a38:	68d9      	ldr	r1, [r3, #12]
 8006a3a:	d1f8      	bne.n	8006a2e <_reclaim_reent+0x8a>
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	f000 f819 	bl	8006a74 <_free_r>
 8006a42:	e7ba      	b.n	80069ba <_reclaim_reent+0x16>
 8006a44:	680e      	ldr	r6, [r1, #0]
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f814 	bl	8006a74 <_free_r>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	e7ef      	b.n	8006a30 <_reclaim_reent+0x8c>
 8006a50:	2500      	movs	r5, #0
 8006a52:	e7ef      	b.n	8006a34 <_reclaim_reent+0x90>
 8006a54:	bd70      	pop	{r4, r5, r6, pc}
 8006a56:	bf00      	nop
 8006a58:	20000010 	.word	0x20000010

08006a5c <__malloc_lock>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__malloc_lock+0x8>)
 8006a5e:	f7ff bf89 	b.w	8006974 <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	200011ac 	.word	0x200011ac

08006a68 <__malloc_unlock>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__malloc_unlock+0x8>)
 8006a6a:	f7ff bf84 	b.w	8006976 <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	200011ac 	.word	0x200011ac

08006a74 <_free_r>:
 8006a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a76:	2900      	cmp	r1, #0
 8006a78:	d044      	beq.n	8006b04 <_free_r+0x90>
 8006a7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7e:	9001      	str	r0, [sp, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f1a1 0404 	sub.w	r4, r1, #4
 8006a86:	bfb8      	it	lt
 8006a88:	18e4      	addlt	r4, r4, r3
 8006a8a:	f7ff ffe7 	bl	8006a5c <__malloc_lock>
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <_free_r+0x94>)
 8006a90:	9801      	ldr	r0, [sp, #4]
 8006a92:	6813      	ldr	r3, [r2, #0]
 8006a94:	b933      	cbnz	r3, 8006aa4 <_free_r+0x30>
 8006a96:	6063      	str	r3, [r4, #4]
 8006a98:	6014      	str	r4, [r2, #0]
 8006a9a:	b003      	add	sp, #12
 8006a9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa0:	f7ff bfe2 	b.w	8006a68 <__malloc_unlock>
 8006aa4:	42a3      	cmp	r3, r4
 8006aa6:	d908      	bls.n	8006aba <_free_r+0x46>
 8006aa8:	6825      	ldr	r5, [r4, #0]
 8006aaa:	1961      	adds	r1, r4, r5
 8006aac:	428b      	cmp	r3, r1
 8006aae:	bf01      	itttt	eq
 8006ab0:	6819      	ldreq	r1, [r3, #0]
 8006ab2:	685b      	ldreq	r3, [r3, #4]
 8006ab4:	1949      	addeq	r1, r1, r5
 8006ab6:	6021      	streq	r1, [r4, #0]
 8006ab8:	e7ed      	b.n	8006a96 <_free_r+0x22>
 8006aba:	461a      	mov	r2, r3
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	b10b      	cbz	r3, 8006ac4 <_free_r+0x50>
 8006ac0:	42a3      	cmp	r3, r4
 8006ac2:	d9fa      	bls.n	8006aba <_free_r+0x46>
 8006ac4:	6811      	ldr	r1, [r2, #0]
 8006ac6:	1855      	adds	r5, r2, r1
 8006ac8:	42a5      	cmp	r5, r4
 8006aca:	d10b      	bne.n	8006ae4 <_free_r+0x70>
 8006acc:	6824      	ldr	r4, [r4, #0]
 8006ace:	4421      	add	r1, r4
 8006ad0:	1854      	adds	r4, r2, r1
 8006ad2:	42a3      	cmp	r3, r4
 8006ad4:	6011      	str	r1, [r2, #0]
 8006ad6:	d1e0      	bne.n	8006a9a <_free_r+0x26>
 8006ad8:	681c      	ldr	r4, [r3, #0]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	6053      	str	r3, [r2, #4]
 8006ade:	4421      	add	r1, r4
 8006ae0:	6011      	str	r1, [r2, #0]
 8006ae2:	e7da      	b.n	8006a9a <_free_r+0x26>
 8006ae4:	d902      	bls.n	8006aec <_free_r+0x78>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	6003      	str	r3, [r0, #0]
 8006aea:	e7d6      	b.n	8006a9a <_free_r+0x26>
 8006aec:	6825      	ldr	r5, [r4, #0]
 8006aee:	1961      	adds	r1, r4, r5
 8006af0:	428b      	cmp	r3, r1
 8006af2:	bf04      	itt	eq
 8006af4:	6819      	ldreq	r1, [r3, #0]
 8006af6:	685b      	ldreq	r3, [r3, #4]
 8006af8:	6063      	str	r3, [r4, #4]
 8006afa:	bf04      	itt	eq
 8006afc:	1949      	addeq	r1, r1, r5
 8006afe:	6021      	streq	r1, [r4, #0]
 8006b00:	6054      	str	r4, [r2, #4]
 8006b02:	e7ca      	b.n	8006a9a <_free_r+0x26>
 8006b04:	b003      	add	sp, #12
 8006b06:	bd30      	pop	{r4, r5, pc}
 8006b08:	200011b0 	.word	0x200011b0

08006b0c <_init>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

08006b18 <_fini>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr
