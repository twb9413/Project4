
Project4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08007054  08007054  00017054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007224  08007224  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007224  08007224  00017224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800722c  0800722c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800722c  0800722c  0001722c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000118c  20000074  080072a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001200  080072a8  00021200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019184  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fb  00000000  00000000  00039228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001508  00000000  00000000  0003c928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a0  00000000  00000000  0003de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fca  00000000  00000000  0003f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018cfc  00000000  00000000  0006919a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe0d1  00000000  00000000  00081e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ff67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000597c  00000000  00000000  0017ffb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800703c 	.word	0x0800703c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800703c 	.word	0x0800703c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <shiftOut>:
/*
 * shiftOut
 *     credit to MFS_EXAMPLE Author
 */
void shiftOut(uint8_t val)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	71fb      	strb	r3, [r7, #7]
	for(int ii=0x80; ii; ii>>=1)
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	e024      	b.n	800052e <shiftOut+0x5a>
	{
	  HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port,SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_RESET);    // clear clock pin
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004ee:	f001 fc7b 	bl	8001de8 <HAL_GPIO_WritePin>
	  if(ii & val)						                                                     // if this bit in `value` is set
 80004f2:	79fa      	ldrb	r2, [r7, #7]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4013      	ands	r3, r2
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d007      	beq.n	800050c <shiftOut+0x38>
		  HAL_GPIO_WritePin(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin,GPIO_PIN_SET);  //   set it in shift register
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000506:	f001 fc6f 	bl	8001de8 <HAL_GPIO_WritePin>
 800050a:	e006      	b.n	800051a <shiftOut+0x46>
	  else
		  HAL_GPIO_WritePin(SHLD_D8_SEG7_Data_GPIO_Port, SHLD_D8_SEG7_Data_Pin,GPIO_PIN_RESET); 	//   else clear it
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f001 fc67 	bl	8001de8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SHLD_D7_SEG7_Clock_GPIO_Port,SHLD_D7_SEG7_Clock_Pin, GPIO_PIN_SET);       // set clock pin
 800051a:	2201      	movs	r2, #1
 800051c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000524:	f001 fc60 	bl	8001de8 <HAL_GPIO_WritePin>
	for(int ii=0x80; ii; ii>>=1)
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	105b      	asrs	r3, r3, #1
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d1d7      	bne.n	80004e4 <shiftOut+0x10>
	}
}
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
	...

08000540 <WriteNumberToSegment>:
 * WriteNUmberToSegment
 *     Write a decimal number between 0 and 9 to one of the 4 digits of the display
 *     credit to MFS_EXAMPLE Author
 */
void WriteNumberToSegment(int Segment, int Value)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	480d      	ldr	r0, [pc, #52]	; (8000584 <WriteNumberToSegment+0x44>)
 8000550:	f001 fc4a 	bl	8001de8 <HAL_GPIO_WritePin>
	shiftOut(SEGMENT_MAP[Value]);
 8000554:	4a0c      	ldr	r2, [pc, #48]	; (8000588 <WriteNumberToSegment+0x48>)
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	4413      	add	r3, r2
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffb9 	bl	80004d4 <shiftOut>
	shiftOut(SEGMENT_SELECT[Segment] );
 8000562:	4a0a      	ldr	r2, [pc, #40]	; (800058c <WriteNumberToSegment+0x4c>)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff ffb2 	bl	80004d4 <shiftOut>
	HAL_GPIO_WritePin(SHLD_D4_SEG7_Latch_GPIO_Port, SHLD_D4_SEG7_Latch_Pin, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2120      	movs	r1, #32
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <WriteNumberToSegment+0x44>)
 8000576:	f001 fc37 	bl	8001de8 <HAL_GPIO_WritePin>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	48000400 	.word	0x48000400
 8000588:	0800716c 	.word	0x0800716c
 800058c:	08007178 	.word	0x08007178

08000590 <display_score>:


void display_score(uint16_t score)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	int onesNum = 		(score / 1) % 10;
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	4b28      	ldr	r3, [pc, #160]	; (8000640 <display_score+0xb0>)
 800059e:	fba3 1302 	umull	r1, r3, r3, r2
 80005a2:	08d9      	lsrs	r1, r3, #3
 80005a4:	460b      	mov	r3, r1
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	440b      	add	r3, r1
 80005aa:	005b      	lsls	r3, r3, #1
 80005ac:	1ad3      	subs	r3, r2, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	617b      	str	r3, [r7, #20]
	int tensNum = 		(score / 10) % 10;
 80005b2:	88fb      	ldrh	r3, [r7, #6]
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <display_score+0xb0>)
 80005b6:	fba2 2303 	umull	r2, r3, r2, r3
 80005ba:	08db      	lsrs	r3, r3, #3
 80005bc:	b29a      	uxth	r2, r3
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <display_score+0xb0>)
 80005c0:	fba3 1302 	umull	r1, r3, r3, r2
 80005c4:	08d9      	lsrs	r1, r3, #3
 80005c6:	460b      	mov	r3, r1
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	440b      	add	r3, r1
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	1ad3      	subs	r3, r2, r3
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	613b      	str	r3, [r7, #16]
	int hundredsNum = 	(score / 100) % 10;
 80005d4:	88fb      	ldrh	r3, [r7, #6]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <display_score+0xb4>)
 80005d8:	fba2 2303 	umull	r2, r3, r2, r3
 80005dc:	095b      	lsrs	r3, r3, #5
 80005de:	b29a      	uxth	r2, r3
 80005e0:	4b17      	ldr	r3, [pc, #92]	; (8000640 <display_score+0xb0>)
 80005e2:	fba3 1302 	umull	r1, r3, r3, r2
 80005e6:	08d9      	lsrs	r1, r3, #3
 80005e8:	460b      	mov	r3, r1
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	440b      	add	r3, r1
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	60fb      	str	r3, [r7, #12]
	int thousandsNum = 	(score / 1000) % 10;
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	4a13      	ldr	r2, [pc, #76]	; (8000648 <display_score+0xb8>)
 80005fa:	fba2 2303 	umull	r2, r3, r2, r3
 80005fe:	099b      	lsrs	r3, r3, #6
 8000600:	b29a      	uxth	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <display_score+0xb0>)
 8000604:	fba3 1302 	umull	r1, r3, r3, r2
 8000608:	08d9      	lsrs	r1, r3, #3
 800060a:	460b      	mov	r3, r1
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	b29b      	uxth	r3, r3
 8000616:	60bb      	str	r3, [r7, #8]
	WriteNumberToSegment(THOUSANDS, thousandsNum);
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ff90 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(HUNDREDS, hundredsNum);
 8000620:	68f9      	ldr	r1, [r7, #12]
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff8c 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(TENS, tensNum);
 8000628:	6939      	ldr	r1, [r7, #16]
 800062a:	2002      	movs	r0, #2
 800062c:	f7ff ff88 	bl	8000540 <WriteNumberToSegment>
	WriteNumberToSegment(ONES, onesNum);
 8000630:	6979      	ldr	r1, [r7, #20]
 8000632:	2003      	movs	r0, #3
 8000634:	f7ff ff84 	bl	8000540 <WriteNumberToSegment>
}
 8000638:	bf00      	nop
 800063a:	3718      	adds	r7, #24
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	cccccccd 	.word	0xcccccccd
 8000644:	51eb851f 	.word	0x51eb851f
 8000648:	10624dd3 	.word	0x10624dd3

0800064c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <vApplicationGetIdleTaskMemory+0x2c>)
 800065c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	4a06      	ldr	r2, [pc, #24]	; (800067c <vApplicationGetIdleTaskMemory+0x30>)
 8000662:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	20000090 	.word	0x20000090
 800067c:	20000144 	.word	0x20000144

08000680 <start_game>:
/*
 * start_game()
 * 		game initializer
 */
void start_game()
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rPress button 2 to calibrate Player Servo", 42, HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	222a      	movs	r2, #42	; 0x2a
 800068a:	4907      	ldr	r1, [pc, #28]	; (80006a8 <start_game+0x28>)
 800068c:	4807      	ldr	r0, [pc, #28]	; (80006ac <start_game+0x2c>)
 800068e:	f004 fce9 	bl	8005064 <HAL_UART_Transmit>
	game.game_state = SETUP; // player servo configuration will happen first
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <start_game+0x30>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	game.score = 0;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <start_game+0x30>)
 800069a:	2200      	movs	r2, #0
 800069c:	805a      	strh	r2, [r3, #2]
	game.round = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <start_game+0x30>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	711a      	strb	r2, [r3, #4]
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	08007054 	.word	0x08007054
 80006ac:	200003f8 	.word	0x200003f8
 80006b0:	20000344 	.word	0x20000344

080006b4 <set_game_state>:

/**
 * set the game state
 */
void set_game_state(GAME_STATE game_state)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	game.game_state = game_state;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <set_game_state+0x1c>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	7013      	strb	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	20000344 	.word	0x20000344

080006d4 <HAL_GPIO_EXTI_Callback>:

/*
 * Callback function for GPIO interrupts
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	static uint32_t prev_btn_press;
	uint32_t this_btn_press = TIM2->CNT;
 80006de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006e4:	60fb      	str	r3, [r7, #12]
	uint32_t time_elapsed = this_btn_press - prev_btn_press;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <HAL_GPIO_EXTI_Callback+0x58>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	60bb      	str	r3, [r7, #8]
	if(time_elapsed > 150000)
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <HAL_GPIO_EXTI_Callback+0x5c>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d914      	bls.n	8000722 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		switch(GPIO_Pin)
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	2b10      	cmp	r3, #16
 80006fc:	d008      	beq.n	8000710 <HAL_GPIO_EXTI_Callback+0x3c>
 80006fe:	2b10      	cmp	r3, #16
 8000700:	dc0c      	bgt.n	800071c <HAL_GPIO_EXTI_Callback+0x48>
 8000702:	2b01      	cmp	r3, #1
 8000704:	d007      	beq.n	8000716 <HAL_GPIO_EXTI_Callback+0x42>
 8000706:	2b02      	cmp	r3, #2
 8000708:	d108      	bne.n	800071c <HAL_GPIO_EXTI_Callback+0x48>
		{
		case ShieldBtn1_Pin:
			handle_btn1();
 800070a:	f000 f813 	bl	8000734 <handle_btn1>
			break;
 800070e:	e005      	b.n	800071c <HAL_GPIO_EXTI_Callback+0x48>
		case ShieldBtn2_Pin:
			handle_btn2();
 8000710:	f000 f846 	bl	80007a0 <handle_btn2>
			break;
 8000714:	e002      	b.n	800071c <HAL_GPIO_EXTI_Callback+0x48>
		case ShieldBtn3_Pin:
			handle_btn3();
 8000716:	f000 f8e9 	bl	80008ec <handle_btn3>
			break;
 800071a:	bf00      	nop
		}
		prev_btn_press = this_btn_press;
 800071c:	4a03      	ldr	r2, [pc, #12]	; (800072c <HAL_GPIO_EXTI_Callback+0x58>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6013      	str	r3, [r2, #0]
	}
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000034c 	.word	0x2000034c
 8000730:	000249f0 	.word	0x000249f0

08000734 <handle_btn1>:
/*
 * handle_btn1()
 * 	button 1 pressed, determine its functionality depending on game state
 */
void handle_btn1()
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	switch(game.game_state)
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <handle_btn1+0x60>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b06      	cmp	r3, #6
 800073e:	d825      	bhi.n	800078c <handle_btn1+0x58>
 8000740:	a201      	add	r2, pc, #4	; (adr r2, 8000748 <handle_btn1+0x14>)
 8000742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000746:	bf00      	nop
 8000748:	0800078d 	.word	0x0800078d
 800074c:	08000765 	.word	0x08000765
 8000750:	0800076d 	.word	0x0800076d
 8000754:	08000775 	.word	0x08000775
 8000758:	0800077d 	.word	0x0800077d
 800075c:	08000785 	.word	0x08000785
 8000760:	0800078d 	.word	0x0800078d
	{
	case SETUP:
		// nothing to do in this state
		break;
	case CAL_P0:
		increment_pos0_duty_cycle(&servo_player);
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <handle_btn1+0x64>)
 8000766:	f000 fdd3 	bl	8001310 <increment_pos0_duty_cycle>
		break;
 800076a:	e010      	b.n	800078e <handle_btn1+0x5a>
	case CAL_P5:
		increment_pos5_duty_cycle(&servo_player);
 800076c:	480a      	ldr	r0, [pc, #40]	; (8000798 <handle_btn1+0x64>)
 800076e:	f000 fdfb 	bl	8001368 <increment_pos5_duty_cycle>
		break;
 8000772:	e00c      	b.n	800078e <handle_btn1+0x5a>
	case CAL_CP0:
		increment_pos0_duty_cycle(&servo_cpu);
 8000774:	4809      	ldr	r0, [pc, #36]	; (800079c <handle_btn1+0x68>)
 8000776:	f000 fdcb 	bl	8001310 <increment_pos0_duty_cycle>
		break;
 800077a:	e008      	b.n	800078e <handle_btn1+0x5a>
	case CAL_CP5:
		increment_pos5_duty_cycle(&servo_cpu);
 800077c:	4807      	ldr	r0, [pc, #28]	; (800079c <handle_btn1+0x68>)
 800077e:	f000 fdf3 	bl	8001368 <increment_pos5_duty_cycle>
		break;
 8000782:	e004      	b.n	800078e <handle_btn1+0x5a>
	case PLAYING:
		// btn1 to move right
		move_servo_left(&servo_player);
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <handle_btn1+0x64>)
 8000786:	f000 fd30 	bl	80011ea <move_servo_left>
		break;
 800078a:	e000      	b.n	800078e <handle_btn1+0x5a>
	case OVER:
		// button should start a new game
		break;
	default:
		break;
 800078c:	bf00      	nop
	}
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000344 	.word	0x20000344
 8000798:	2000047c 	.word	0x2000047c
 800079c:	2000048c 	.word	0x2000048c

080007a0 <handle_btn2>:
/*
 * handle_btn2()
 * 	button 2 pressed, determine what it should do depending on the game state
 */
void handle_btn2()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	switch(game.game_state)
 80007a4:	4b47      	ldr	r3, [pc, #284]	; (80008c4 <handle_btn2+0x124>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b06      	cmp	r3, #6
 80007aa:	f200 8087 	bhi.w	80008bc <handle_btn2+0x11c>
 80007ae:	a201      	add	r2, pc, #4	; (adr r2, 80007b4 <handle_btn2+0x14>)
 80007b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b4:	080007d1 	.word	0x080007d1
 80007b8:	08000807 	.word	0x08000807
 80007bc:	08000825 	.word	0x08000825
 80007c0:	08000841 	.word	0x08000841
 80007c4:	0800085f 	.word	0x0800085f
 80007c8:	080008bd 	.word	0x080008bd
 80007cc:	0800088b 	.word	0x0800088b
	{
	case SETUP:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER SERVO POSITION 0", 35, HAL_MAX_DELAY);
 80007d0:	f04f 33ff 	mov.w	r3, #4294967295
 80007d4:	2223      	movs	r2, #35	; 0x23
 80007d6:	493c      	ldr	r1, [pc, #240]	; (80008c8 <handle_btn2+0x128>)
 80007d8:	483c      	ldr	r0, [pc, #240]	; (80008cc <handle_btn2+0x12c>)
 80007da:	f004 fc43 	bl	8005064 <HAL_UART_Transmit>
		init_servo(&servo_player, SERVO_PLAYER);
 80007de:	2101      	movs	r1, #1
 80007e0:	483b      	ldr	r0, [pc, #236]	; (80008d0 <handle_btn2+0x130>)
 80007e2:	f000 fc65 	bl	80010b0 <init_servo>
		init_servo(&servo_cpu, SERVO_CPU);
 80007e6:	2102      	movs	r1, #2
 80007e8:	483a      	ldr	r0, [pc, #232]	; (80008d4 <handle_btn2+0x134>)
 80007ea:	f000 fc61 	bl	80010b0 <init_servo>
		move_servo_to_pos(&servo_player, POS0);
 80007ee:	2100      	movs	r1, #0
 80007f0:	4837      	ldr	r0, [pc, #220]	; (80008d0 <handle_btn2+0x130>)
 80007f2:	f000 fd21 	bl	8001238 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	4836      	ldr	r0, [pc, #216]	; (80008d4 <handle_btn2+0x134>)
 80007fa:	f000 fd1d 	bl	8001238 <move_servo_to_pos>
		set_game_state(CAL_P0);
 80007fe:	2001      	movs	r0, #1
 8000800:	f7ff ff58 	bl	80006b4 <set_game_state>
		break;
 8000804:	e05b      	b.n	80008be <handle_btn2+0x11e>
	case CAL_P0:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER SERVO POSITION 5", 35, HAL_MAX_DELAY);
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	2223      	movs	r2, #35	; 0x23
 800080c:	4932      	ldr	r1, [pc, #200]	; (80008d8 <handle_btn2+0x138>)
 800080e:	482f      	ldr	r0, [pc, #188]	; (80008cc <handle_btn2+0x12c>)
 8000810:	f004 fc28 	bl	8005064 <HAL_UART_Transmit>
		move_servo_to_pos(&servo_player, POS5);
 8000814:	2105      	movs	r1, #5
 8000816:	482e      	ldr	r0, [pc, #184]	; (80008d0 <handle_btn2+0x130>)
 8000818:	f000 fd0e 	bl	8001238 <move_servo_to_pos>
		set_game_state(CAL_P5);
 800081c:	2002      	movs	r0, #2
 800081e:	f7ff ff49 	bl	80006b4 <set_game_state>
		break;
 8000822:	e04c      	b.n	80008be <handle_btn2+0x11e>
	case CAL_P5:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER CPU POSITION 0", 33, HAL_MAX_DELAY);
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	2221      	movs	r2, #33	; 0x21
 800082a:	492c      	ldr	r1, [pc, #176]	; (80008dc <handle_btn2+0x13c>)
 800082c:	4827      	ldr	r0, [pc, #156]	; (80008cc <handle_btn2+0x12c>)
 800082e:	f004 fc19 	bl	8005064 <HAL_UART_Transmit>
		set_duty_cycles(&servo_player);
 8000832:	4827      	ldr	r0, [pc, #156]	; (80008d0 <handle_btn2+0x130>)
 8000834:	f000 fc58 	bl	80010e8 <set_duty_cycles>
		set_game_state(CAL_CP0);
 8000838:	2003      	movs	r0, #3
 800083a:	f7ff ff3b 	bl	80006b4 <set_game_state>
		break;
 800083e:	e03e      	b.n	80008be <handle_btn2+0x11e>
	case CAL_CP0:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATE PLAYER CPU POSITION 5", 33, HAL_MAX_DELAY);
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	2221      	movs	r2, #33	; 0x21
 8000846:	4926      	ldr	r1, [pc, #152]	; (80008e0 <handle_btn2+0x140>)
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <handle_btn2+0x12c>)
 800084a:	f004 fc0b 	bl	8005064 <HAL_UART_Transmit>
		move_servo_to_pos(&servo_cpu, POS5);
 800084e:	2105      	movs	r1, #5
 8000850:	4820      	ldr	r0, [pc, #128]	; (80008d4 <handle_btn2+0x134>)
 8000852:	f000 fcf1 	bl	8001238 <move_servo_to_pos>
		set_game_state(CAL_CP5);
 8000856:	2004      	movs	r0, #4
 8000858:	f7ff ff2c 	bl	80006b4 <set_game_state>
		break;
 800085c:	e02f      	b.n	80008be <handle_btn2+0x11e>
	case CAL_CP5:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rCALIBRATED PRESS BTN2 TO START GAME", 37, HAL_MAX_DELAY);
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2225      	movs	r2, #37	; 0x25
 8000864:	491f      	ldr	r1, [pc, #124]	; (80008e4 <handle_btn2+0x144>)
 8000866:	4819      	ldr	r0, [pc, #100]	; (80008cc <handle_btn2+0x12c>)
 8000868:	f004 fbfc 	bl	8005064 <HAL_UART_Transmit>
		set_duty_cycles(&servo_cpu);
 800086c:	4819      	ldr	r0, [pc, #100]	; (80008d4 <handle_btn2+0x134>)
 800086e:	f000 fc3b 	bl	80010e8 <set_duty_cycles>
		move_servo_to_pos(&servo_player, POS0);
 8000872:	2100      	movs	r1, #0
 8000874:	4816      	ldr	r0, [pc, #88]	; (80008d0 <handle_btn2+0x130>)
 8000876:	f000 fcdf 	bl	8001238 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 800087a:	2100      	movs	r1, #0
 800087c:	4815      	ldr	r0, [pc, #84]	; (80008d4 <handle_btn2+0x134>)
 800087e:	f000 fcdb 	bl	8001238 <move_servo_to_pos>
		set_game_state(PLAYING);
 8000882:	2005      	movs	r0, #5
 8000884:	f7ff ff16 	bl	80006b4 <set_game_state>
		break;
 8000888:	e019      	b.n	80008be <handle_btn2+0x11e>
	case OVER:
		HAL_UART_Transmit(&huart2, (uint8_t *) "\n\rSTARTING NEW GAME", 19, HAL_MAX_DELAY);
 800088a:	f04f 33ff 	mov.w	r3, #4294967295
 800088e:	2213      	movs	r2, #19
 8000890:	4915      	ldr	r1, [pc, #84]	; (80008e8 <handle_btn2+0x148>)
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <handle_btn2+0x12c>)
 8000894:	f004 fbe6 	bl	8005064 <HAL_UART_Transmit>
		game.score = 0;
 8000898:	4b0a      	ldr	r3, [pc, #40]	; (80008c4 <handle_btn2+0x124>)
 800089a:	2200      	movs	r2, #0
 800089c:	805a      	strh	r2, [r3, #2]
		game.round = 0;
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <handle_btn2+0x124>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	711a      	strb	r2, [r3, #4]
		move_servo_to_pos(&servo_player, POS0);
 80008a4:	2100      	movs	r1, #0
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <handle_btn2+0x130>)
 80008a8:	f000 fcc6 	bl	8001238 <move_servo_to_pos>
		move_servo_to_pos(&servo_cpu, POS0);
 80008ac:	2100      	movs	r1, #0
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <handle_btn2+0x134>)
 80008b0:	f000 fcc2 	bl	8001238 <move_servo_to_pos>
		set_game_state(PLAYING);
 80008b4:	2005      	movs	r0, #5
 80008b6:	f7ff fefd 	bl	80006b4 <set_game_state>
		break;
 80008ba:	e000      	b.n	80008be <handle_btn2+0x11e>
	default:
		break;
 80008bc:	bf00      	nop
	}
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000344 	.word	0x20000344
 80008c8:	08007080 	.word	0x08007080
 80008cc:	200003f8 	.word	0x200003f8
 80008d0:	2000047c 	.word	0x2000047c
 80008d4:	2000048c 	.word	0x2000048c
 80008d8:	080070a4 	.word	0x080070a4
 80008dc:	080070c8 	.word	0x080070c8
 80008e0:	080070ec 	.word	0x080070ec
 80008e4:	08007110 	.word	0x08007110
 80008e8:	08007138 	.word	0x08007138

080008ec <handle_btn3>:
/*
 * handle_btn3()
 * 	determine what button 3 should do depending on the game state
 */
void handle_btn3()
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	switch(game.game_state)
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <handle_btn3+0x5c>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b05      	cmp	r3, #5
 80008f6:	d823      	bhi.n	8000940 <handle_btn3+0x54>
 80008f8:	a201      	add	r2, pc, #4	; (adr r2, 8000900 <handle_btn3+0x14>)
 80008fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008fe:	bf00      	nop
 8000900:	08000941 	.word	0x08000941
 8000904:	08000919 	.word	0x08000919
 8000908:	08000921 	.word	0x08000921
 800090c:	08000929 	.word	0x08000929
 8000910:	08000931 	.word	0x08000931
 8000914:	08000939 	.word	0x08000939
	{
	case SETUP:
		// nothing to do here
		break;
	case CAL_P0:
		decrement_pos0_duty_cycle(&servo_player);
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <handle_btn3+0x60>)
 800091a:	f000 fce3 	bl	80012e4 <decrement_pos0_duty_cycle>
		break;
 800091e:	e010      	b.n	8000942 <handle_btn3+0x56>
	case CAL_P5:
		decrement_pos5_duty_cycle(&servo_player);
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <handle_btn3+0x60>)
 8000922:	f000 fd0b 	bl	800133c <decrement_pos5_duty_cycle>
		break;
 8000926:	e00c      	b.n	8000942 <handle_btn3+0x56>
	case CAL_CP0:
		decrement_pos0_duty_cycle(&servo_cpu);
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <handle_btn3+0x64>)
 800092a:	f000 fcdb 	bl	80012e4 <decrement_pos0_duty_cycle>
		break;
 800092e:	e008      	b.n	8000942 <handle_btn3+0x56>
	case CAL_CP5:
		decrement_pos5_duty_cycle(&servo_cpu);
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <handle_btn3+0x64>)
 8000932:	f000 fd03 	bl	800133c <decrement_pos5_duty_cycle>
		break;
 8000936:	e004      	b.n	8000942 <handle_btn3+0x56>
	case PLAYING:
		move_servo_right(&servo_player);
 8000938:	4804      	ldr	r0, [pc, #16]	; (800094c <handle_btn3+0x60>)
 800093a:	f000 fc2f 	bl	800119c <move_servo_right>
		break;
 800093e:	e000      	b.n	8000942 <handle_btn3+0x56>
	default:
		break;
 8000940:	bf00      	nop
	}
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000344 	.word	0x20000344
 800094c:	2000047c 	.word	0x2000047c
 8000950:	2000048c 	.word	0x2000048c

08000954 <game_task>:
/**
 * game_task()
 * 	the main game task, play through the rounds and such
 */
void game_task()
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <game_task+0x50>)
 800095c:	f002 fed8 	bl	8003710 <HAL_TIM_Base_Start>
	start_game();
 8000960:	f7ff fe8e 	bl	8000680 <start_game>
	uint16_t delay;
	while(1)
	{
		switch(game.game_state)
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <game_task+0x54>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b05      	cmp	r3, #5
 800096a:	d118      	bne.n	800099e <game_task+0x4a>
		{
		case PLAYING:
			delay = get_random_delay();
 800096c:	f000 fb82 	bl	8001074 <get_random_delay>
 8000970:	4603      	mov	r3, r0
 8000972:	80fb      	strh	r3, [r7, #6]
			vTaskDelay(delay / portTICK_PERIOD_MS);
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4618      	mov	r0, r3
 8000978:	f005 fad4 	bl	8005f24 <vTaskDelay>
			if(game.round < 5)
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <game_task+0x54>)
 800097e:	791b      	ldrb	r3, [r3, #4]
 8000980:	2b04      	cmp	r3, #4
 8000982:	d802      	bhi.n	800098a <game_task+0x36>
			{
				move_cpu_to_random_pos();
 8000984:	f000 fc76 	bl	8001274 <move_cpu_to_random_pos>
 8000988:	e002      	b.n	8000990 <game_task+0x3c>
			}
			else
			{
				game.game_state = OVER;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <game_task+0x54>)
 800098c:	2206      	movs	r2, #6
 800098e:	701a      	strb	r2, [r3, #0]
			}
			game.round += 1;
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <game_task+0x54>)
 8000992:	791b      	ldrb	r3, [r3, #4]
 8000994:	3301      	adds	r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <game_task+0x54>)
 800099a:	711a      	strb	r2, [r3, #4]
			break;
 800099c:	e000      	b.n	80009a0 <game_task+0x4c>
		default:
			break;
 800099e:	bf00      	nop
		switch(game.game_state)
 80009a0:	e7e0      	b.n	8000964 <game_task+0x10>
 80009a2:	bf00      	nop
 80009a4:	20000360 	.word	0x20000360
 80009a8:	20000344 	.word	0x20000344

080009ac <score_task>:
/*
 * score_task()
 * 	calculate the score of this game
 */
void score_task()
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	while(1)
	{
		switch(game.game_state)
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <score_task+0x44>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b05      	cmp	r3, #5
 80009b6:	d118      	bne.n	80009ea <score_task+0x3e>
		{
		case PLAYING:
			while(game.game_state == PLAYING)
 80009b8:	e012      	b.n	80009e0 <score_task+0x34>
			{
				// increment the score if the player and cpu-servo are not in the same position and the cpu-servo is stable (not moving)
				if(servo_player.servo_position != servo_cpu.servo_position &&
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <score_task+0x48>)
 80009bc:	785a      	ldrb	r2, [r3, #1]
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <score_task+0x4c>)
 80009c0:	785b      	ldrb	r3, [r3, #1]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d009      	beq.n	80009da <score_task+0x2e>
						servo_cpu.SERVO_STATE == STABLE)
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <score_task+0x4c>)
 80009c8:	789b      	ldrb	r3, [r3, #2]
				if(servo_player.servo_position != servo_cpu.servo_position &&
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d105      	bne.n	80009da <score_task+0x2e>
					game.score += 1;
 80009ce:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <score_task+0x44>)
 80009d0:	885b      	ldrh	r3, [r3, #2]
 80009d2:	3301      	adds	r3, #1
 80009d4:	b29a      	uxth	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <score_task+0x44>)
 80009d8:	805a      	strh	r2, [r3, #2]
				vTaskDelay(1 / portTICK_PERIOD_MS);
 80009da:	2001      	movs	r0, #1
 80009dc:	f005 faa2 	bl	8005f24 <vTaskDelay>
			while(game.game_state == PLAYING)
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <score_task+0x44>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	d0e8      	beq.n	80009ba <score_task+0xe>
			}
			break;
 80009e8:	e000      	b.n	80009ec <score_task+0x40>
		default:
			break;
 80009ea:	bf00      	nop
		switch(game.game_state)
 80009ec:	e7e0      	b.n	80009b0 <score_task+0x4>
 80009ee:	bf00      	nop
 80009f0:	20000344 	.word	0x20000344
 80009f4:	2000047c 	.word	0x2000047c
 80009f8:	2000048c 	.word	0x2000048c

080009fc <display_task>:
/*
 * display_task()
 * 	send the score to the seven-segment display
 */
void display_task()
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
	while(1)
	{
		display_score(game.score);
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <display_task+0x10>)
 8000a02:	885b      	ldrh	r3, [r3, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fdc3 	bl	8000590 <display_score>
 8000a0a:	e7f9      	b.n	8000a00 <display_task+0x4>
 8000a0c:	20000344 	.word	0x20000344

08000a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a16:	f000 ff1b 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1a:	f000 f843 	bl	8000aa4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1e:	f000 f9cb 	bl	8000db8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a22:	f000 f999 	bl	8000d58 <MX_USART2_UART_Init>
  MX_RNG_Init();
 8000a26:	f000 f88f 	bl	8000b48 <MX_RNG_Init>
  MX_TIM3_Init();
 8000a2a:	f000 f911 	bl	8000c50 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000a2e:	f000 f89f 	bl	8000b70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a32:	2100      	movs	r1, #0
 8000a34:	4814      	ldr	r0, [pc, #80]	; (8000a88 <main+0x78>)
 8000a36:	f002 ffa5 	bl	8003984 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000a3a:	2104      	movs	r1, #4
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <main+0x78>)
 8000a3e:	f002 ffa1 	bl	8003984 <HAL_TIM_PWM_Start>

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(game_task, "Game", 128, NULL, 3, &game_handler);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	2303      	movs	r3, #3
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	490e      	ldr	r1, [pc, #56]	; (8000a8c <main+0x7c>)
 8000a52:	480f      	ldr	r0, [pc, #60]	; (8000a90 <main+0x80>)
 8000a54:	f005 f919 	bl	8005c8a <xTaskCreate>
  xTaskCreate(display_task, "Display", 128, NULL, 3, &display_handler);
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	2303      	movs	r3, #3
 8000a60:	9300      	str	r3, [sp, #0]
 8000a62:	2300      	movs	r3, #0
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	490b      	ldr	r1, [pc, #44]	; (8000a94 <main+0x84>)
 8000a68:	480b      	ldr	r0, [pc, #44]	; (8000a98 <main+0x88>)
 8000a6a:	f005 f90e 	bl	8005c8a <xTaskCreate>
  xTaskCreate(score_task, "Score", 128, NULL, 3, &score_handler);
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	9301      	str	r3, [sp, #4]
 8000a72:	2303      	movs	r3, #3
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	4908      	ldr	r1, [pc, #32]	; (8000a9c <main+0x8c>)
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <main+0x90>)
 8000a7e:	f005 f904 	bl	8005c8a <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a82:	f004 ffea 	bl	8005a5a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <main+0x76>
 8000a88:	200003ac 	.word	0x200003ac
 8000a8c:	0800714c 	.word	0x0800714c
 8000a90:	08000955 	.word	0x08000955
 8000a94:	08007154 	.word	0x08007154
 8000a98:	080009fd 	.word	0x080009fd
 8000a9c:	0800715c 	.word	0x0800715c
 8000aa0:	080009ad 	.word	0x080009ad

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b096      	sub	sp, #88	; 0x58
 8000aa8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2244      	movs	r2, #68	; 0x44
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f006 f9f8 	bl	8006ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ac6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aca:	f001 f9cb 	bl	8001e64 <HAL_PWREx_ControlVoltageScaling>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ad4:	f000 faac 	bl	8001030 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000adc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae2:	2310      	movs	r3, #16
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aea:	2302      	movs	r3, #2
 8000aec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000aee:	2301      	movs	r3, #1
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000af2:	230a      	movs	r3, #10
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fa02 	bl	8001f10 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b12:	f000 fa8d 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	2104      	movs	r1, #4
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fdca 	bl	80026c8 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b3a:	f000 fa79 	bl	8001030 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3758      	adds	r7, #88	; 0x58
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_RNG_Init+0x20>)
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <MX_RNG_Init+0x24>)
 8000b50:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b52:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_RNG_Init+0x20>)
 8000b54:	f002 fcca 	bl	80034ec <HAL_RNG_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000b5e:	f000 fa67 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000350 	.word	0x20000350
 8000b6c:	50060800 	.word	0x50060800

08000b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0320 	add.w	r3, r7, #32
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000b9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ba2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80 - 1;
 8000ba4:	4b29      	ldr	r3, [pc, #164]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000ba6:	224f      	movs	r2, #79	; 0x4f
 8000ba8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bb0:	4b26      	ldr	r3, [pc, #152]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbe:	4b23      	ldr	r3, [pc, #140]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bc4:	4821      	ldr	r0, [pc, #132]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bc6:	f002 fd4c 	bl	8003662 <HAL_TIM_Base_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000bd0:	f000 fa2e 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bda:	f107 0320 	add.w	r3, r7, #32
 8000bde:	4619      	mov	r1, r3
 8000be0:	481a      	ldr	r0, [pc, #104]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000be2:	f003 fb05 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000bec:	f000 fa20 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000bf0:	4816      	ldr	r0, [pc, #88]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000bf2:	f002 ffcd 	bl	8003b90 <HAL_TIM_IC_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000bfc:	f000 fa18 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480f      	ldr	r0, [pc, #60]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000c10:	f004 f934 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000c1a:	f000 fa09 	bl	8001030 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2200      	movs	r2, #0
 8000c32:	4619      	mov	r1, r3
 8000c34:	4805      	ldr	r0, [pc, #20]	; (8000c4c <MX_TIM2_Init+0xdc>)
 8000c36:	f003 f92b 	bl	8003e90 <HAL_TIM_IC_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000c40:	f000 f9f6 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c44:	bf00      	nop
 8000c46:	3730      	adds	r7, #48	; 0x30
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000360 	.word	0x20000360

08000c50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08e      	sub	sp, #56	; 0x38
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c70:	463b      	mov	r3, r7
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	605a      	str	r2, [r3, #4]
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	60da      	str	r2, [r3, #12]
 8000c7c:	611a      	str	r2, [r3, #16]
 8000c7e:	615a      	str	r2, [r3, #20]
 8000c80:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c82:	4b33      	ldr	r3, [pc, #204]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000c84:	4a33      	ldr	r2, [pc, #204]	; (8000d54 <MX_TIM3_Init+0x104>)
 8000c86:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800 - 1;
 8000c88:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000c8a:	f240 321f 	movw	r2, #799	; 0x31f
 8000c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c90:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000 - 1;
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000c98:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c9c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000cac:	f002 fcd9 	bl	8003662 <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000cb6:	f000 f9bb 	bl	8001030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4822      	ldr	r0, [pc, #136]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000cc8:	f003 fa92 	bl	80041f0 <HAL_TIM_ConfigClockSource>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000cd2:	f000 f9ad 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cd6:	481e      	ldr	r0, [pc, #120]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000cd8:	f002 fdf2 	bl	80038c0 <HAL_TIM_PWM_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ce2:	f000 f9a5 	bl	8001030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000cf6:	f004 f8c1 	bl	8004e7c <HAL_TIMEx_MasterConfigSynchronization>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d00:	f000 f996 	bl	8001030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d04:	2360      	movs	r3, #96	; 0x60
 8000d06:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480d      	ldr	r0, [pc, #52]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000d1c:	f003 f954 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d26:	f000 f983 	bl	8001030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000d32:	f003 f949 	bl	8003fc8 <HAL_TIM_PWM_ConfigChannel>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000d3c:	f000 f978 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <MX_TIM3_Init+0x100>)
 8000d42:	f000 fbe7 	bl	8001514 <HAL_TIM_MspPostInit>

}
 8000d46:	bf00      	nop
 8000d48:	3738      	adds	r7, #56	; 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200003ac 	.word	0x200003ac
 8000d54:	40000400 	.word	0x40000400

08000d58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d5e:	4a15      	ldr	r2, [pc, #84]	; (8000db4 <MX_USART2_UART_Init+0x5c>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART2_UART_Init+0x58>)
 8000d9c:	f004 f914 	bl	8004fc8 <HAL_UART_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000da6:	f000 f943 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200003f8 	.word	0x200003f8
 8000db4:	40004400 	.word	0x40004400

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]
 8000dcc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b8c      	ldr	r3, [pc, #560]	; (8001000 <MX_GPIO_Init+0x248>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a8b      	ldr	r2, [pc, #556]	; (8001000 <MX_GPIO_Init+0x248>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b89      	ldr	r3, [pc, #548]	; (8001000 <MX_GPIO_Init+0x248>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	4b86      	ldr	r3, [pc, #536]	; (8001000 <MX_GPIO_Init+0x248>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a85      	ldr	r2, [pc, #532]	; (8001000 <MX_GPIO_Init+0x248>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b83      	ldr	r3, [pc, #524]	; (8001000 <MX_GPIO_Init+0x248>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b80      	ldr	r3, [pc, #512]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a7f      	ldr	r2, [pc, #508]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b7d      	ldr	r3, [pc, #500]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b7a      	ldr	r3, [pc, #488]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a79      	ldr	r2, [pc, #484]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b77      	ldr	r3, [pc, #476]	; (8001000 <MX_GPIO_Init+0x248>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2120      	movs	r1, #32
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f000 ffd7 	bl	8001de8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e44:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	486c      	ldr	r0, [pc, #432]	; (8001004 <MX_GPIO_Init+0x24c>)
 8000e52:	f000 fe1f 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : ShieldBtn1_Pin ShieldBtn2_Pin */
	GPIO_InitStruct.Pin = ShieldBtn1_Pin|ShieldBtn2_Pin;
 8000e56:	2312      	movs	r3, #18
 8000e58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fe11 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000e72:	2320      	movs	r3, #32
 8000e74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e76:	2301      	movs	r3, #1
 8000e78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0314 	add.w	r3, r7, #20
 8000e86:	4619      	mov	r1, r3
 8000e88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8c:	f000 fe02 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : ShieldBtn3_Pin */
	GPIO_InitStruct.Pin = ShieldBtn3_Pin;
 8000e90:	2301      	movs	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e98:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ShieldBtn3_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4858      	ldr	r0, [pc, #352]	; (8001008 <MX_GPIO_Init+0x250>)
 8000ea6:	f000 fdf5 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHLD_A5_Pin SHLD_A4_Pin */
	GPIO_InitStruct.Pin = SHLD_A5_Pin|SHLD_A4_Pin;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eae:	2303      	movs	r3, #3
 8000eb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4851      	ldr	r0, [pc, #324]	; (8001004 <MX_GPIO_Init+0x24c>)
 8000ebe:	f000 fde9 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHLD_A0_Pin SHLD_D2_Pin */
	GPIO_InitStruct.Pin = SHLD_A0_Pin|SHLD_D2_Pin;
 8000ec2:	f240 4301 	movw	r3, #1025	; 0x401
 8000ec6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f000 fddb 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHLD_D13_Pin SHLD_D12_Pin SHLD_D11_Pin SHLD_D7_SEG7_Clock_Pin */
	GPIO_InitStruct.Pin = SHLD_D13_Pin|SHLD_D12_Pin|SHLD_D11_Pin|SHLD_D7_SEG7_Clock_Pin;
 8000ede:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ee2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eec:	2300      	movs	r3, #0
 8000eee:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fdcb 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHLD_D6_Pin SHLD_D5_Pin */
	GPIO_InitStruct.Pin = SHLD_D6_Pin|SHLD_D5_Pin;
 8000efe:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8000f02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	f107 0314 	add.w	r3, r7, #20
 8000f10:	4619      	mov	r1, r3
 8000f12:	483d      	ldr	r0, [pc, #244]	; (8001008 <MX_GPIO_Init+0x250>)
 8000f14:	f000 fdbe 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D9_Pin */
	GPIO_InitStruct.Pin = SHLD_D9_Pin;
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SHLD_D9_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4836      	ldr	r0, [pc, #216]	; (8001004 <MX_GPIO_Init+0x24c>)
 8000f2c:	f000 fdb2 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D8_SEG7_Data_Pin */
	GPIO_InitStruct.Pin = SHLD_D8_SEG7_Data_Pin;
 8000f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHLD_D8_SEG7_Data_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f000 fda2 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D3_Pin */
	GPIO_InitStruct.Pin = SHLD_D3_Pin;
 8000f50:	2308      	movs	r3, #8
 8000f52:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f54:	2311      	movs	r3, #17
 8000f56:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHLD_D3_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4828      	ldr	r0, [pc, #160]	; (8001008 <MX_GPIO_Init+0x250>)
 8000f68:	f000 fd94 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D4_SEG7_Latch_Pin */
	GPIO_InitStruct.Pin = SHLD_D4_SEG7_Latch_Pin;
 8000f6c:	2320      	movs	r3, #32
 8000f6e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHLD_D4_SEG7_Latch_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <MX_GPIO_Init+0x250>)
 8000f84:	f000 fd86 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pin : SHLD_D10_Pin */
	GPIO_InitStruct.Pin = SHLD_D10_Pin;
 8000f88:	2340      	movs	r3, #64	; 0x40
 8000f8a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SHLD_D10_GPIO_Port, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	481a      	ldr	r0, [pc, #104]	; (8001008 <MX_GPIO_Init+0x250>)
 8000fa0:	f000 fd78 	bl	8001a94 <HAL_GPIO_Init>

	/*Configure GPIO pins : SHLD_D15_Pin SHLD_D14_Pin */
	GPIO_InitStruct.Pin = SHLD_D15_Pin|SHLD_D14_Pin;
 8000fa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fa8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000faa:	2312      	movs	r3, #18
 8000fac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_GPIO_Init+0x250>)
 8000fc2:	f000 fd67 	bl	8001a94 <HAL_GPIO_Init>


	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2105      	movs	r1, #5
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f000 fd38 	bl	8001a40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fd0:	2006      	movs	r0, #6
 8000fd2:	f000 fd51 	bl	8001a78 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2105      	movs	r1, #5
 8000fda:	2007      	movs	r0, #7
 8000fdc:	f000 fd30 	bl	8001a40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fe0:	2007      	movs	r0, #7
 8000fe2:	f000 fd49 	bl	8001a78 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2105      	movs	r1, #5
 8000fea:	200a      	movs	r0, #10
 8000fec:	f000 fd28 	bl	8001a40 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f000 fd41 	bl	8001a78 <HAL_NVIC_EnableIRQ>

}
 8000ff6:	bf00      	nop
 8000ff8:	3728      	adds	r7, #40	; 0x28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000
 8001004:	48000800 	.word	0x48000800
 8001008:	48000400 	.word	0x48000400

0800100c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d101      	bne.n	8001022 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800101e:	f000 fc37 	bl	8001890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40001000 	.word	0x40001000

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <get_random_position>:
/*
 * get_random_position()
 * 		return a position between 0-5
 */
uint8_t get_random_position()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	uint8_t position;
	uint32_t myrng = HAL_RNG_GetRandomNumber(&hrng);
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <get_random_position+0x30>)
 8001044:	f002 faf8 	bl	8003638 <HAL_RNG_GetRandomNumber>
 8001048:	6078      	str	r0, [r7, #4]
	position = myrng % NUM_POSITIONS;
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <get_random_position+0x34>)
 800104e:	fba3 2301 	umull	r2, r3, r3, r1
 8001052:	089a      	lsrs	r2, r3, #2
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	1aca      	subs	r2, r1, r3
 800105e:	4613      	mov	r3, r2
 8001060:	70fb      	strb	r3, [r7, #3]
	return position;
 8001062:	78fb      	ldrb	r3, [r7, #3]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000350 	.word	0x20000350
 8001070:	aaaaaaab 	.word	0xaaaaaaab

08001074 <get_random_delay>:
/*
 * get_random_delay()
 * 		return a random delay for the game to use between 1-4 seconds
 */
uint16_t get_random_delay()
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
	uint32_t delay;
	uint32_t myrng = HAL_RNG_GetRandomNumber(&hrng);
 800107a:	480c      	ldr	r0, [pc, #48]	; (80010ac <get_random_delay+0x38>)
 800107c:	f002 fadc 	bl	8003638 <HAL_RNG_GetRandomNumber>
 8001080:	60f8      	str	r0, [r7, #12]
	uint32_t range = FOUR_SEC - ONE_SEC;
 8001082:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001086:	60bb      	str	r3, [r7, #8]
	delay = ( myrng % range ) + ONE_SEC;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	fb01 f202 	mul.w	r2, r1, r2
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800109c:	607b      	str	r3, [r7, #4]
	return delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	b29b      	uxth	r3, r3
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000350 	.word	0x20000350

080010b0 <init_servo>:

/*
 * initialize this servo's parameters
 */
void init_servo(Servo_t *servo, uint8_t servo_id)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	460b      	mov	r3, r1
 80010ba:	70fb      	strb	r3, [r7, #3]
	servo->ID = servo_id;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	78fa      	ldrb	r2, [r7, #3]
 80010c0:	701a      	strb	r2, [r3, #0]
	servo->SERVO_STATE = STABLE;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2202      	movs	r2, #2
 80010c6:	709a      	strb	r2, [r3, #2]
	servo->servo_position = 0;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	705a      	strb	r2, [r3, #1]
	servo->duty_cycle_arr[POS0] = 60; // estimate of position 0 to be calibrated from
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	223c      	movs	r2, #60	; 0x3c
 80010d2:	809a      	strh	r2, [r3, #4]
	servo->duty_cycle_arr[POS5] = 200; // initial guess for position 5 to be calibrated from
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	22c8      	movs	r2, #200	; 0xc8
 80010d8:	81da      	strh	r2, [r3, #14]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <set_duty_cycles>:
/*
 * set_duty_cycles(servo)
 * 		calculate the duty cycles to be used at each position
 */
void set_duty_cycles(Servo_t *servo)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	// compute the range of motion after calibration
	uint16_t range = (servo->duty_cycle_arr[POS5] - servo->duty_cycle_arr[POS0]);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	89da      	ldrh	r2, [r3, #14]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	81fb      	strh	r3, [r7, #14]

	// separate that range into equal steps, int division so will be some error
	uint16_t step = range / 5;
 80010fc:	89fb      	ldrh	r3, [r7, #14]
 80010fe:	4a17      	ldr	r2, [pc, #92]	; (800115c <set_duty_cycles+0x74>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	81bb      	strh	r3, [r7, #12]

	// set all positional duty cycles
	servo->duty_cycle_arr[POS1] = servo->duty_cycle_arr[POS0] + (POS1 * step);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	889a      	ldrh	r2, [r3, #4]
 800110c:	89bb      	ldrh	r3, [r7, #12]
 800110e:	4413      	add	r3, r2
 8001110:	b29a      	uxth	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	80da      	strh	r2, [r3, #6]
	servo->duty_cycle_arr[POS2] = servo->duty_cycle_arr[POS0] + (POS2 * step);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	889a      	ldrh	r2, [r3, #4]
 800111a:	89bb      	ldrh	r3, [r7, #12]
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	b29b      	uxth	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	811a      	strh	r2, [r3, #8]
	servo->duty_cycle_arr[POS3] = servo->duty_cycle_arr[POS0] + (POS3 * step);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	889a      	ldrh	r2, [r3, #4]
 800112c:	89bb      	ldrh	r3, [r7, #12]
 800112e:	4619      	mov	r1, r3
 8001130:	0049      	lsls	r1, r1, #1
 8001132:	440b      	add	r3, r1
 8001134:	b29b      	uxth	r3, r3
 8001136:	4413      	add	r3, r2
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	815a      	strh	r2, [r3, #10]
	servo->duty_cycle_arr[POS4] = servo->duty_cycle_arr[POS0] + (POS4 * step);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	889a      	ldrh	r2, [r3, #4]
 8001142:	89bb      	ldrh	r3, [r7, #12]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	b29b      	uxth	r3, r3
 8001148:	4413      	add	r3, r2
 800114a:	b29a      	uxth	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	819a      	strh	r2, [r3, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	cccccccd 	.word	0xcccccccd

08001160 <set_pwm>:
/*
 * set_pwm
 * 	function to inject new duty cycle to pwm timer
 */
void set_pwm(uint8_t servo, uint16_t duty)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	80bb      	strh	r3, [r7, #4]
	switch ( servo )
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d002      	beq.n	800117c <set_pwm+0x1c>
 8001176:	2b02      	cmp	r3, #2
 8001178:	d004      	beq.n	8001184 <set_pwm+0x24>
			break;
		case 2:
			TIM3->CCR2 = duty;
			break;
		default:
			break;
 800117a:	e007      	b.n	800118c <set_pwm+0x2c>
			TIM3->CCR1 = duty;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <set_pwm+0x38>)
 800117e:	88bb      	ldrh	r3, [r7, #4]
 8001180:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8001182:	e003      	b.n	800118c <set_pwm+0x2c>
			TIM3->CCR2 = duty;
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <set_pwm+0x38>)
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800118a:	bf00      	nop
	}
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	40000400 	.word	0x40000400

0800119c <move_servo_right>:
/*
 * move_servo_right
 * adjust the duty cycle of the servo to move it right by one position
 */
void move_servo_right(Servo_t *servo)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	// where is the servo rn?
	uint8_t current_position = servo->servo_position;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	785b      	ldrb	r3, [r3, #1]
 80011a8:	73fb      	strb	r3, [r7, #15]
	switch(current_position)
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d017      	beq.n	80011e0 <move_servo_right+0x44>
	{
	case POS0:
		// cannot move further right from this position
		break;
	default:
		servo->SERVO_STATE = MOVING;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	709a      	strb	r2, [r3, #2]
		set_pwm(servo->ID, servo->duty_cycle_arr[current_position - 1]);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7818      	ldrb	r0, [r3, #0]
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	3b01      	subs	r3, #1
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	4413      	add	r3, r2
 80011c4:	889b      	ldrh	r3, [r3, #4]
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff ffca 	bl	8001160 <set_pwm>
		servo->servo_position -= 1;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	785b      	ldrb	r3, [r3, #1]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	705a      	strb	r2, [r3, #1]
		servo->SERVO_STATE = STABLE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2202      	movs	r2, #2
 80011dc:	709a      	strb	r2, [r3, #2]
		break;
 80011de:	e000      	b.n	80011e2 <move_servo_right+0x46>
		break;
 80011e0:	bf00      	nop
	}

}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <move_servo_left>:
/*
 * move_servo_left
 * adjust the duty cycel of the servo to move it left by one position
 */
void move_servo_left(Servo_t *servo)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	// where is the servo rn?
	uint8_t current_position = servo->servo_position;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	785b      	ldrb	r3, [r3, #1]
 80011f6:	73fb      	strb	r3, [r7, #15]
	switch(current_position)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d017      	beq.n	800122e <move_servo_left+0x44>
	{
	case POS5:
		// cannot move further left from this position
		break;
	default:
		servo->SERVO_STATE = MOVING;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	709a      	strb	r2, [r3, #2]
		set_pwm(servo->ID, servo->duty_cycle_arr[current_position + 1]);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7818      	ldrb	r0, [r3, #0]
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	3301      	adds	r3, #1
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	889b      	ldrh	r3, [r3, #4]
 8001214:	4619      	mov	r1, r3
 8001216:	f7ff ffa3 	bl	8001160 <set_pwm>
		servo->servo_position += 1;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	3301      	adds	r3, #1
 8001220:	b2da      	uxtb	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	705a      	strb	r2, [r3, #1]
		servo->SERVO_STATE = STABLE;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2202      	movs	r2, #2
 800122a:	709a      	strb	r2, [r3, #2]
		break;
 800122c:	e000      	b.n	8001230 <move_servo_left+0x46>
		break;
 800122e:	bf00      	nop
	}
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <move_servo_to_pos>:
/*
 * move_servo_to_pos
 *  Move the servo to a specific position
 */
void move_servo_to_pos(Servo_t *servo, uint8_t position)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	460b      	mov	r3, r1
 8001242:	70fb      	strb	r3, [r7, #3]
	servo->SERVO_STATE = MOVING;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	709a      	strb	r2, [r3, #2]
	servo->servo_position = position;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	78fa      	ldrb	r2, [r7, #3]
 800124e:	705a      	strb	r2, [r3, #1]
	set_pwm(servo->ID, servo->duty_cycle_arr[position]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7818      	ldrb	r0, [r3, #0]
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	4413      	add	r3, r2
 800125c:	889b      	ldrh	r3, [r3, #4]
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff ff7e 	bl	8001160 <set_pwm>
	servo->SERVO_STATE = STABLE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	709a      	strb	r2, [r3, #2]
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <move_cpu_to_random_pos>:
/*
 * move_cpu_to_random_pos()
 * 	moves the cpu servo to a *new* random position
 */
void move_cpu_to_random_pos()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	uint8_t old_position = servo_cpu.servo_position;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 800127c:	785b      	ldrb	r3, [r3, #1]
 800127e:	71bb      	strb	r3, [r7, #6]
	// get a random position
	uint8_t position = get_random_position();
 8001280:	f7ff fedc 	bl	800103c <get_random_position>
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
	// ensure not moving to same position
	while(position == servo_cpu.servo_position)
 8001288:	e003      	b.n	8001292 <move_cpu_to_random_pos+0x1e>
	{
		position = get_random_position();
 800128a:	f7ff fed7 	bl	800103c <get_random_position>
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
	while(position == servo_cpu.servo_position)
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 8001294:	785b      	ldrb	r3, [r3, #1]
 8001296:	79fa      	ldrb	r2, [r7, #7]
 8001298:	429a      	cmp	r2, r3
 800129a:	d0f6      	beq.n	800128a <move_cpu_to_random_pos+0x16>
	}
	servo_cpu.SERVO_STATE = MOVING;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 800129e:	2201      	movs	r2, #1
 80012a0:	709a      	strb	r2, [r3, #2]
	servo_cpu.servo_position = position;
 80012a2:	4a0f      	ldr	r2, [pc, #60]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	7053      	strb	r3, [r2, #1]
	set_pwm(SERVO_CPU, servo_cpu.duty_cycle_arr[position]);
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	889b      	ldrh	r3, [r3, #4]
 80012b2:	4619      	mov	r1, r3
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff ff53 	bl	8001160 <set_pwm>
	// wait before setting servo stable
	// allow it time to travel to new position
	vTaskDelay(((abs(old_position - position)) * 200) / portTICK_PERIOD_MS);
 80012ba:	79ba      	ldrb	r2, [r7, #6]
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bfb8      	it	lt
 80012c4:	425b      	neglt	r3, r3
 80012c6:	22c8      	movs	r2, #200	; 0xc8
 80012c8:	fb02 f303 	mul.w	r3, r2, r3
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fe29 	bl	8005f24 <vTaskDelay>
	servo_cpu.SERVO_STATE = STABLE;
 80012d2:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <move_cpu_to_random_pos+0x6c>)
 80012d4:	2202      	movs	r2, #2
 80012d6:	709a      	strb	r2, [r3, #2]
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000048c 	.word	0x2000048c

080012e4 <decrement_pos0_duty_cycle>:
 * --------------------------------------------------------------------
 * Increment and Decrement duty cycle functions
 * 		calibration routine helper functions
 */
void decrement_pos0_duty_cycle(Servo_t *servo)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS0] -= 2;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	3b02      	subs	r3, #2
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	809a      	strh	r2, [r3, #4]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS0]);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	781a      	ldrb	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	889b      	ldrh	r3, [r3, #4]
 8001300:	4619      	mov	r1, r3
 8001302:	4610      	mov	r0, r2
 8001304:	f7ff ff2c 	bl	8001160 <set_pwm>
}
 8001308:	bf00      	nop
 800130a:	3708      	adds	r7, #8
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <increment_pos0_duty_cycle>:
void increment_pos0_duty_cycle(Servo_t *servo)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS0] += 2;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	889b      	ldrh	r3, [r3, #4]
 800131c:	3302      	adds	r3, #2
 800131e:	b29a      	uxth	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	809a      	strh	r2, [r3, #4]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS0]);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	889b      	ldrh	r3, [r3, #4]
 800132c:	4619      	mov	r1, r3
 800132e:	4610      	mov	r0, r2
 8001330:	f7ff ff16 	bl	8001160 <set_pwm>
}
 8001334:	bf00      	nop
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}

0800133c <decrement_pos5_duty_cycle>:
void decrement_pos5_duty_cycle(Servo_t *servo)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS5] -= 2;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	89db      	ldrh	r3, [r3, #14]
 8001348:	3b02      	subs	r3, #2
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	81da      	strh	r2, [r3, #14]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS5]);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	781a      	ldrb	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	89db      	ldrh	r3, [r3, #14]
 8001358:	4619      	mov	r1, r3
 800135a:	4610      	mov	r0, r2
 800135c:	f7ff ff00 	bl	8001160 <set_pwm>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <increment_pos5_duty_cycle>:
void increment_pos5_duty_cycle(Servo_t *servo)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	servo->duty_cycle_arr[POS5] += 2;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	89db      	ldrh	r3, [r3, #14]
 8001374:	3302      	adds	r3, #2
 8001376:	b29a      	uxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	81da      	strh	r2, [r3, #14]
	set_pwm(servo->ID, servo->duty_cycle_arr[POS5]);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	781a      	ldrb	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	89db      	ldrh	r3, [r3, #14]
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff feea 	bl	8001160 <set_pwm>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_MspInit+0x4c>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6613      	str	r3, [r2, #96]	; 0x60
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_MspInit+0x4c>)
 80013a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x4c>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6593      	str	r3, [r2, #88]	; 0x58
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x4c>)
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f000 fb35 	bl	8001a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b0a6      	sub	sp, #152	; 0x98
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2288      	movs	r2, #136	; 0x88
 80013f2:	2100      	movs	r1, #0
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fd57 	bl	8006ea8 <memset>
  if(hrng->Instance==RNG)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <HAL_RNG_MspInit+0x80>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d12b      	bne.n	800145c <HAL_RNG_MspInit+0x78>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001404:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001408:	613b      	str	r3, [r7, #16]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800140a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800140e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001412:	2302      	movs	r3, #2
 8001414:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800141a:	2308      	movs	r3, #8
 800141c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800141e:	2307      	movs	r3, #7
 8001420:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001422:	2304      	movs	r3, #4
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001426:	2302      	movs	r3, #2
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800142a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4618      	mov	r0, r3
 8001436:	f001 fb9d 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_RNG_MspInit+0x60>
    {
      Error_Handler();
 8001440:	f7ff fdf6 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <HAL_RNG_MspInit+0x84>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a07      	ldr	r2, [pc, #28]	; (8001468 <HAL_RNG_MspInit+0x84>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_RNG_MspInit+0x84>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3798      	adds	r7, #152	; 0x98
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	50060800 	.word	0x50060800
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800148c:	d129      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800148e:	4b1f      	ldr	r3, [pc, #124]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 8001490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001492:	4a1e      	ldr	r2, [pc, #120]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6593      	str	r3, [r2, #88]	; 0x58
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	4a18      	ldr	r2, [pc, #96]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b2:	4b16      	ldr	r3, [pc, #88]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014be:	2301      	movs	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ce:	2301      	movs	r3, #1
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f000 fada 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014e0:	e010      	b.n	8001504 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM3)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0xa4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d10b      	bne.n	8001504 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014ec:	4b07      	ldr	r3, [pc, #28]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6593      	str	r3, [r2, #88]	; 0x58
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <HAL_TIM_Base_MspInit+0xa0>)
 80014fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]
}
 8001504:	bf00      	nop
 8001506:	3728      	adds	r7, #40	; 0x28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40021000 	.word	0x40021000
 8001510:	40000400 	.word	0x40000400

08001514 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <HAL_TIM_MspPostInit+0x9c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d137      	bne.n	80015a6 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001536:	4b1f      	ldr	r3, [pc, #124]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	4a1e      	ldr	r2, [pc, #120]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_TIM_MspPostInit+0xa0>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    PB4 (NJTRST)     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001566:	2380      	movs	r3, #128	; 0x80
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001576:	2302      	movs	r3, #2
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <HAL_TIM_MspPostInit+0xa4>)
 8001582:	f000 fa87 	bl	8001a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001586:	2310      	movs	r3, #16
 8001588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158a:	2302      	movs	r3, #2
 800158c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001592:	2300      	movs	r3, #0
 8001594:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001596:	2302      	movs	r3, #2
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	4619      	mov	r1, r3
 80015a0:	4806      	ldr	r0, [pc, #24]	; (80015bc <HAL_TIM_MspPostInit+0xa8>)
 80015a2:	f000 fa77 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	; 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000800 	.word	0x48000800
 80015bc:	48000400 	.word	0x48000400

080015c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b0ac      	sub	sp, #176	; 0xb0
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	2288      	movs	r2, #136	; 0x88
 80015de:	2100      	movs	r1, #0
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 fc61 	bl	8006ea8 <memset>
  if(huart->Instance==USART2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <HAL_UART_MspInit+0xb0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d13b      	bne.n	8001668 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	4618      	mov	r0, r3
 80015fe:	f001 fab9 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001608:	f7ff fd12 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	4a18      	ldr	r2, [pc, #96]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001616:	6593      	str	r3, [r2, #88]	; 0x58
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800161a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <HAL_UART_MspInit+0xb4>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001630:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_UART_MspInit+0xb4>)
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800163c:	230c      	movs	r3, #12
 800163e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001654:	2307      	movs	r3, #7
 8001656:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f000 fa16 	bl	8001a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	37b0      	adds	r7, #176	; 0xb0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40004400 	.word	0x40004400
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08e      	sub	sp, #56	; 0x38
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_InitTick+0xe0>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	4a33      	ldr	r2, [pc, #204]	; (8001758 <HAL_InitTick+0xe0>)
 800168c:	f043 0310 	orr.w	r3, r3, #16
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_InitTick+0xe0>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800169e:	f107 0210 	add.w	r2, r7, #16
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 f9d1 	bl	8002a50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016ae:	6a3b      	ldr	r3, [r7, #32]
 80016b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016b8:	f001 f99e 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80016bc:	6378      	str	r0, [r7, #52]	; 0x34
 80016be:	e004      	b.n	80016ca <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016c0:	f001 f99a 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80016c4:	4603      	mov	r3, r0
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016cc:	4a23      	ldr	r2, [pc, #140]	; (800175c <HAL_InitTick+0xe4>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0c9b      	lsrs	r3, r3, #18
 80016d4:	3b01      	subs	r3, #1
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016d8:	4b21      	ldr	r3, [pc, #132]	; (8001760 <HAL_InitTick+0xe8>)
 80016da:	4a22      	ldr	r2, [pc, #136]	; (8001764 <HAL_InitTick+0xec>)
 80016dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_InitTick+0xe8>)
 80016e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016e6:	4a1e      	ldr	r2, [pc, #120]	; (8001760 <HAL_InitTick+0xe8>)
 80016e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <HAL_InitTick+0xe8>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f2:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_InitTick+0xe8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b19      	ldr	r3, [pc, #100]	; (8001760 <HAL_InitTick+0xe8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016fe:	4818      	ldr	r0, [pc, #96]	; (8001760 <HAL_InitTick+0xe8>)
 8001700:	f001 ffaf 	bl	8003662 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800170a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800170e:	2b00      	cmp	r3, #0
 8001710:	d11b      	bne.n	800174a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <HAL_InitTick+0xe8>)
 8001714:	f002 f864 	bl	80037e0 <HAL_TIM_Base_Start_IT>
 8001718:	4603      	mov	r3, r0
 800171a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800171e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001722:	2b00      	cmp	r3, #0
 8001724:	d111      	bne.n	800174a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001726:	2036      	movs	r0, #54	; 0x36
 8001728:	f000 f9a6 	bl	8001a78 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b0f      	cmp	r3, #15
 8001730:	d808      	bhi.n	8001744 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001732:	2200      	movs	r2, #0
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	2036      	movs	r0, #54	; 0x36
 8001738:	f000 f982 	bl	8001a40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_InitTick+0xf0>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e002      	b.n	800174a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800174a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800174e:	4618      	mov	r0, r3
 8001750:	3738      	adds	r7, #56	; 0x38
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40021000 	.word	0x40021000
 800175c:	431bde83 	.word	0x431bde83
 8001760:	2000049c 	.word	0x2000049c
 8001764:	40001000 	.word	0x40001000
 8001768:	20000004 	.word	0x20000004

0800176c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <NMI_Handler+0x4>

08001772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <HardFault_Handler+0x4>

08001778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <MemManage_Handler+0x4>

0800177e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001782:	e7fe      	b.n	8001782 <BusFault_Handler+0x4>

08001784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001788:	e7fe      	b.n	8001788 <UsageFault_Handler+0x4>

0800178a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn3_Pin);
 800179c:	2001      	movs	r0, #1
 800179e:	f000 fb3b 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn1_Pin);
 80017aa:	2002      	movs	r0, #2
 80017ac:	f000 fb34 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ShieldBtn2_Pin);
 80017b8:	2010      	movs	r0, #16
 80017ba:	f000 fb2d 	bl	8001e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017c8:	4802      	ldr	r0, [pc, #8]	; (80017d4 <TIM6_DAC_IRQHandler+0x10>)
 80017ca:	f002 fa42 	bl	8003c52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2000049c 	.word	0x2000049c

080017d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <SystemInit+0x20>)
 80017de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017e2:	4a05      	ldr	r2, [pc, #20]	; (80017f8 <SystemInit+0x20>)
 80017e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001834 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001800:	f7ff ffea 	bl	80017d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <LoopForever+0x6>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	; (800183c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	; (8001840 <LoopForever+0xe>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <LoopForever+0x12>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	; (8001848 <LoopForever+0x16>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f005 fb17 	bl	8006e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182e:	f7ff f8ef 	bl	8000a10 <main>

08001832 <LoopForever>:

LoopForever:
    b LoopForever
 8001832:	e7fe      	b.n	8001832 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001834:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001840:	08007234 	.word	0x08007234
  ldr r2, =_sbss
 8001844:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001848:	20001200 	.word	0x20001200

0800184c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC1_2_IRQHandler>
	...

08001850 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <HAL_Init+0x3c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <HAL_Init+0x3c>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001866:	2003      	movs	r0, #3
 8001868:	f000 f8df 	bl	8001a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800186c:	200f      	movs	r0, #15
 800186e:	f7ff ff03 	bl	8001678 <HAL_InitTick>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	e001      	b.n	8001882 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187e:	f7ff fd89 	bl	8001394 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001882:	79fb      	ldrb	r3, [r7, #7]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40022000 	.word	0x40022000

08001890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <HAL_IncTick+0x20>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_IncTick+0x24>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <HAL_IncTick+0x24>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000008 	.word	0x20000008
 80018b4:	200004e8 	.word	0x200004e8

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <HAL_GetTick+0x14>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	200004e8 	.word	0x200004e8

080018d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <__NVIC_SetPriorityGrouping+0x44>)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800191c:	4b04      	ldr	r3, [pc, #16]	; (8001930 <__NVIC_GetPriorityGrouping+0x18>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	0a1b      	lsrs	r3, r3, #8
 8001922:	f003 0307 	and.w	r3, r3, #7
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001942:	2b00      	cmp	r3, #0
 8001944:	db0b      	blt.n	800195e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	f003 021f 	and.w	r2, r3, #31
 800194c:	4907      	ldr	r1, [pc, #28]	; (800196c <__NVIC_EnableIRQ+0x38>)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	095b      	lsrs	r3, r3, #5
 8001954:	2001      	movs	r0, #1
 8001956:	fa00 f202 	lsl.w	r2, r0, r2
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100

08001970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	6039      	str	r1, [r7, #0]
 800197a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	db0a      	blt.n	800199a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	b2da      	uxtb	r2, r3
 8001988:	490c      	ldr	r1, [pc, #48]	; (80019bc <__NVIC_SetPriority+0x4c>)
 800198a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198e:	0112      	lsls	r2, r2, #4
 8001990:	b2d2      	uxtb	r2, r2
 8001992:	440b      	add	r3, r1
 8001994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001998:	e00a      	b.n	80019b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	4908      	ldr	r1, [pc, #32]	; (80019c0 <__NVIC_SetPriority+0x50>)
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	3b04      	subs	r3, #4
 80019a8:	0112      	lsls	r2, r2, #4
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	440b      	add	r3, r1
 80019ae:	761a      	strb	r2, [r3, #24]
}
 80019b0:	bf00      	nop
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr
 80019bc:	e000e100 	.word	0xe000e100
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f1c3 0307 	rsb	r3, r3, #7
 80019de:	2b04      	cmp	r3, #4
 80019e0:	bf28      	it	cs
 80019e2:	2304      	movcs	r3, #4
 80019e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3304      	adds	r3, #4
 80019ea:	2b06      	cmp	r3, #6
 80019ec:	d902      	bls.n	80019f4 <NVIC_EncodePriority+0x30>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3b03      	subs	r3, #3
 80019f2:	e000      	b.n	80019f6 <NVIC_EncodePriority+0x32>
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	401a      	ands	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	43d9      	mvns	r1, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a1c:	4313      	orrs	r3, r2
         );
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ff4c 	bl	80018d0 <__NVIC_SetPriorityGrouping>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a52:	f7ff ff61 	bl	8001918 <__NVIC_GetPriorityGrouping>
 8001a56:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68b9      	ldr	r1, [r7, #8]
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7ff ffb1 	bl	80019c4 <NVIC_EncodePriority>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a68:	4611      	mov	r1, r2
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff80 	bl	8001970 <__NVIC_SetPriority>
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ff54 	bl	8001934 <__NVIC_EnableIRQ>
}
 8001a8c:	bf00      	nop
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa2:	e17f      	b.n	8001da4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8171 	beq.w	8001d9e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d005      	beq.n	8001ad4 <HAL_GPIO_Init+0x40>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d130      	bne.n	8001b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	091b      	lsrs	r3, r3, #4
 8001b20:	f003 0201 	and.w	r2, r3, #1
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d118      	bne.n	8001b74 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001b48:	2201      	movs	r2, #1
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	08db      	lsrs	r3, r3, #3
 8001b5e:	f003 0201 	and.w	r2, r3, #1
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d017      	beq.n	8001bb0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4013      	ands	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d123      	bne.n	8001c04 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	08da      	lsrs	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3208      	adds	r2, #8
 8001bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	08da      	lsrs	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3208      	adds	r2, #8
 8001bfe:	6939      	ldr	r1, [r7, #16]
 8001c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80ac 	beq.w	8001d9e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c46:	4b5f      	ldr	r3, [pc, #380]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c4a:	4a5e      	ldr	r2, [pc, #376]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	6613      	str	r3, [r2, #96]	; 0x60
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <HAL_GPIO_Init+0x330>)
 8001c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c5e:	4a5a      	ldr	r2, [pc, #360]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3302      	adds	r3, #2
 8001c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c88:	d025      	beq.n	8001cd6 <HAL_GPIO_Init+0x242>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4f      	ldr	r2, [pc, #316]	; (8001dcc <HAL_GPIO_Init+0x338>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01f      	beq.n	8001cd2 <HAL_GPIO_Init+0x23e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <HAL_GPIO_Init+0x33c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d019      	beq.n	8001cce <HAL_GPIO_Init+0x23a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4d      	ldr	r2, [pc, #308]	; (8001dd4 <HAL_GPIO_Init+0x340>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x236>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4c      	ldr	r2, [pc, #304]	; (8001dd8 <HAL_GPIO_Init+0x344>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x232>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a4b      	ldr	r2, [pc, #300]	; (8001ddc <HAL_GPIO_Init+0x348>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x22e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	; (8001de0 <HAL_GPIO_Init+0x34c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x22a>
 8001cba:	2306      	movs	r3, #6
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cbe:	2307      	movs	r3, #7
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x244>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ce8:	4937      	ldr	r1, [pc, #220]	; (8001dc8 <HAL_GPIO_Init+0x334>)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d1a:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d20:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d44:	4a27      	ldr	r2, [pc, #156]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4013      	ands	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d98:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_GPIO_Init+0x350>)
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f47f ae78 	bne.w	8001aa4 <HAL_GPIO_Init+0x10>
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	48000400 	.word	0x48000400
 8001dd0:	48000800 	.word	0x48000800
 8001dd4:	48000c00 	.word	0x48000c00
 8001dd8:	48001000 	.word	0x48001000
 8001ddc:	48001400 	.word	0x48001400
 8001de0:	48001800 	.word	0x48001800
 8001de4:	40010400 	.word	0x40010400

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e06:	887a      	ldrh	r2, [r7, #2]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d006      	beq.n	8001e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e2e:	4a05      	ldr	r2, [pc, #20]	; (8001e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e30:	88fb      	ldrh	r3, [r7, #6]
 8001e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e34:	88fb      	ldrh	r3, [r7, #6]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fc4c 	bl	80006d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40010400 	.word	0x40010400

08001e48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e4c:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40007000 	.word	0x40007000

08001e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e72:	d130      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e80:	d038      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2232      	movs	r2, #50	; 0x32
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9b      	lsrs	r3, r3, #18
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea8:	e002      	b.n	8001eb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eb0:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ebc:	d102      	bne.n	8001ec4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f2      	bne.n	8001eaa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec4:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ed0:	d110      	bne.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e00f      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee2:	d007      	beq.n	8001ef4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eec:	4a05      	ldr	r2, [pc, #20]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e3ca      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4b97      	ldr	r3, [pc, #604]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4b94      	ldr	r3, [pc, #592]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0310 	and.w	r3, r3, #16
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80e4 	beq.w	800210c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4a>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	f040 808b 	bne.w	8002068 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	f040 8087 	bne.w	8002068 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f5a:	4b89      	ldr	r3, [pc, #548]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x62>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e3a2      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	4b82      	ldr	r3, [pc, #520]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d004      	beq.n	8001f8c <HAL_RCC_OscConfig+0x7c>
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f8a:	e005      	b.n	8001f98 <HAL_RCC_OscConfig+0x88>
 8001f8c:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d223      	bcs.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fd87 	bl	8002ab4 <RCC_SetFlashLatencyFromMSIRange>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e383      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fb0:	4b73      	ldr	r3, [pc, #460]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a72      	ldr	r2, [pc, #456]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	4b70      	ldr	r3, [pc, #448]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	496d      	ldr	r1, [pc, #436]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	021b      	lsls	r3, r3, #8
 8001fdc:	4968      	ldr	r1, [pc, #416]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
 8001fe2:	e025      	b.n	8002030 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fe4:	4b66      	ldr	r3, [pc, #408]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	4960      	ldr	r1, [pc, #384]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	495b      	ldr	r1, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002012:	4313      	orrs	r3, r2
 8002014:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d109      	bne.n	8002030 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	4618      	mov	r0, r3
 8002022:	f000 fd47 	bl	8002ab4 <RCC_SetFlashLatencyFromMSIRange>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e343      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002030:	f000 fc4a 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b52      	ldr	r3, [pc, #328]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	091b      	lsrs	r3, r3, #4
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	4950      	ldr	r1, [pc, #320]	; (8002184 <HAL_RCC_OscConfig+0x274>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	f003 031f 	and.w	r3, r3, #31
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	4a4e      	ldr	r2, [pc, #312]	; (8002188 <HAL_RCC_OscConfig+0x278>)
 800204e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002050:	4b4e      	ldr	r3, [pc, #312]	; (800218c <HAL_RCC_OscConfig+0x27c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fb0f 	bl	8001678 <HAL_InitTick>
 800205a:	4603      	mov	r3, r0
 800205c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d052      	beq.n	800210a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
 8002066:	e327      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d032      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002070:	4b43      	ldr	r3, [pc, #268]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a42      	ldr	r2, [pc, #264]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800207c:	f7ff fc1c 	bl	80018b8 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002084:	f7ff fc18 	bl	80018b8 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e310      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a36      	ldr	r2, [pc, #216]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	4931      	ldr	r1, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020c0:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	021b      	lsls	r3, r3, #8
 80020ce:	492c      	ldr	r1, [pc, #176]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
 80020d4:	e01a      	b.n	800210c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d6:	4b2a      	ldr	r3, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a29      	ldr	r2, [pc, #164]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e2:	f7ff fbe9 	bl	80018b8 <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ea:	f7ff fbe5 	bl	80018b8 <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e2dd      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020fc:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1f0      	bne.n	80020ea <HAL_RCC_OscConfig+0x1da>
 8002108:	e000      	b.n	800210c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d074      	beq.n	8002202 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b08      	cmp	r3, #8
 800211c:	d005      	beq.n	800212a <HAL_RCC_OscConfig+0x21a>
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b0c      	cmp	r3, #12
 8002122:	d10e      	bne.n	8002142 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d10b      	bne.n	8002142 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d064      	beq.n	8002200 <HAL_RCC_OscConfig+0x2f0>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d160      	bne.n	8002200 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e2ba      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x24a>
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e026      	b.n	80021a8 <HAL_RCC_OscConfig+0x298>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002162:	d115      	bne.n	8002190 <HAL_RCC_OscConfig+0x280>
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 800216a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b03      	ldr	r3, [pc, #12]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a02      	ldr	r2, [pc, #8]	; (8002180 <HAL_RCC_OscConfig+0x270>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	e014      	b.n	80021a8 <HAL_RCC_OscConfig+0x298>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	0800717c 	.word	0x0800717c
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004
 8002190:	4ba0      	ldr	r3, [pc, #640]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a9f      	ldr	r2, [pc, #636]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	4b9d      	ldr	r3, [pc, #628]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a9c      	ldr	r2, [pc, #624]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80021a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff fb82 	bl	80018b8 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b8:	f7ff fb7e 	bl	80018b8 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b64      	cmp	r3, #100	; 0x64
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e276      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ca:	4b92      	ldr	r3, [pc, #584]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2a8>
 80021d6:	e014      	b.n	8002202 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff fb6e 	bl	80018b8 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fb6a 	bl	80018b8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b64      	cmp	r3, #100	; 0x64
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e262      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021f2:	4b88      	ldr	r3, [pc, #544]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x2d0>
 80021fe:	e000      	b.n	8002202 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d060      	beq.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b04      	cmp	r3, #4
 8002212:	d005      	beq.n	8002220 <HAL_RCC_OscConfig+0x310>
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	2b0c      	cmp	r3, #12
 8002218:	d119      	bne.n	800224e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d116      	bne.n	800224e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002220:	4b7c      	ldr	r3, [pc, #496]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	2b00      	cmp	r3, #0
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x328>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e23f      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002238:	4b76      	ldr	r3, [pc, #472]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	061b      	lsls	r3, r3, #24
 8002246:	4973      	ldr	r1, [pc, #460]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002248:	4313      	orrs	r3, r2
 800224a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224c:	e040      	b.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d023      	beq.n	800229e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002256:	4b6f      	ldr	r3, [pc, #444]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff fb29 	bl	80018b8 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff fb25 	bl	80018b8 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e21d      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227c:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002288:	4b62      	ldr	r3, [pc, #392]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	061b      	lsls	r3, r3, #24
 8002296:	495f      	ldr	r1, [pc, #380]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
 800229c:	e018      	b.n	80022d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800229e:	4b5d      	ldr	r3, [pc, #372]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a5c      	ldr	r2, [pc, #368]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80022a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff fb05 	bl	80018b8 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b2:	f7ff fb01 	bl	80018b8 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1f9      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c4:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0308 	and.w	r3, r3, #8
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d03c      	beq.n	8002356 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01c      	beq.n	800231e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022e4:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ea:	4a4a      	ldr	r2, [pc, #296]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f4:	f7ff fae0 	bl	80018b8 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022fc:	f7ff fadc 	bl	80018b8 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e1d4      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800230e:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ef      	beq.n	80022fc <HAL_RCC_OscConfig+0x3ec>
 800231c:	e01b      	b.n	8002356 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231e:	4b3d      	ldr	r3, [pc, #244]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002324:	4a3b      	ldr	r2, [pc, #236]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232e:	f7ff fac3 	bl	80018b8 <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002336:	f7ff fabf 	bl	80018b8 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e1b7      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800234a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1ef      	bne.n	8002336 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80a6 	beq.w	80024b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002364:	2300      	movs	r3, #0
 8002366:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d10d      	bne.n	8002390 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002374:	4b27      	ldr	r3, [pc, #156]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	4a26      	ldr	r2, [pc, #152]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	6593      	str	r3, [r2, #88]	; 0x58
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800238c:	2301      	movs	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCC_OscConfig+0x508>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d118      	bne.n	80023ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <HAL_RCC_OscConfig+0x508>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <HAL_RCC_OscConfig+0x508>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a8:	f7ff fa86 	bl	80018b8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b0:	f7ff fa82 	bl	80018b8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e17a      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_RCC_OscConfig+0x508>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4d8>
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80023de:	f043 0301 	orr.w	r3, r3, #1
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e6:	e029      	b.n	800243c <HAL_RCC_OscConfig+0x52c>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d115      	bne.n	800241c <HAL_RCC_OscConfig+0x50c>
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002406:	4a03      	ldr	r2, [pc, #12]	; (8002414 <HAL_RCC_OscConfig+0x504>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002410:	e014      	b.n	800243c <HAL_RCC_OscConfig+0x52c>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	40007000 	.word	0x40007000
 800241c:	4b9c      	ldr	r3, [pc, #624]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a9b      	ldr	r2, [pc, #620]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242c:	4b98      	ldr	r3, [pc, #608]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a97      	ldr	r2, [pc, #604]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff fa38 	bl	80018b8 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7ff fa34 	bl	80018b8 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e12a      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	4b8b      	ldr	r3, [pc, #556]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ed      	beq.n	800244c <HAL_RCC_OscConfig+0x53c>
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7ff fa21 	bl	80018b8 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7ff fa1d 	bl	80018b8 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e113      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002490:	4b7f      	ldr	r3, [pc, #508]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ed      	bne.n	800247a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a4:	4b7a      	ldr	r3, [pc, #488]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a79      	ldr	r2, [pc, #484]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80024aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80fe 	beq.w	80026b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	2b02      	cmp	r3, #2
 80024c0:	f040 80d0 	bne.w	8002664 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80024c4:	4b72      	ldr	r3, [pc, #456]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0203 	and.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d130      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	3b01      	subs	r3, #1
 80024e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d127      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d11f      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002504:	2a07      	cmp	r2, #7
 8002506:	bf14      	ite	ne
 8002508:	2201      	movne	r2, #1
 800250a:	2200      	moveq	r2, #0
 800250c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800250e:	4293      	cmp	r3, r2
 8002510:	d113      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251c:	085b      	lsrs	r3, r3, #1
 800251e:	3b01      	subs	r3, #1
 8002520:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d109      	bne.n	800253a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	085b      	lsrs	r3, r3, #1
 8002532:	3b01      	subs	r3, #1
 8002534:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d06e      	beq.n	8002618 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b0c      	cmp	r3, #12
 800253e:	d069      	beq.n	8002614 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0ad      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a4b      	ldr	r2, [pc, #300]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002566:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002568:	f7ff f9a6 	bl	80018b8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002570:	f7ff f9a2 	bl	80018b8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e09a      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002582:	4b43      	ldr	r3, [pc, #268]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800258e:	4b40      	ldr	r3, [pc, #256]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_OscConfig+0x784>)
 8002594:	4013      	ands	r3, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800259e:	3a01      	subs	r2, #1
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025a8:	0212      	lsls	r2, r2, #8
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025b0:	0852      	lsrs	r2, r2, #1
 80025b2:	3a01      	subs	r2, #1
 80025b4:	0552      	lsls	r2, r2, #21
 80025b6:	4311      	orrs	r1, r2
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025bc:	0852      	lsrs	r2, r2, #1
 80025be:	3a01      	subs	r2, #1
 80025c0:	0652      	lsls	r2, r2, #25
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025c8:	0912      	lsrs	r2, r2, #4
 80025ca:	0452      	lsls	r2, r2, #17
 80025cc:	430a      	orrs	r2, r1
 80025ce:	4930      	ldr	r1, [pc, #192]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2d      	ldr	r2, [pc, #180]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a2a      	ldr	r2, [pc, #168]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025ec:	f7ff f964 	bl	80018b8 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7ff f960 	bl	80018b8 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e058      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002612:	e050      	b.n	80026b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e04f      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002618:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d148      	bne.n	80026b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002624:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a19      	ldr	r2, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800262a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002630:	4b17      	ldr	r3, [pc, #92]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a16      	ldr	r2, [pc, #88]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800263c:	f7ff f93c 	bl	80018b8 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002644:	f7ff f938 	bl	80018b8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e030      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002656:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x734>
 8002662:	e028      	b.n	80026b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b0c      	cmp	r3, #12
 8002668:	d023      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266a:	4b09      	ldr	r3, [pc, #36]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a08      	ldr	r2, [pc, #32]	; (8002690 <HAL_RCC_OscConfig+0x780>)
 8002670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7ff f91f 	bl	80018b8 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800267c:	e00c      	b.n	8002698 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267e:	f7ff f91b 	bl	80018b8 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d905      	bls.n	8002698 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e013      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
 8002690:	40021000 	.word	0x40021000
 8002694:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_RCC_OscConfig+0x7b0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1ec      	bne.n	800267e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x7b0>)
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	4905      	ldr	r1, [pc, #20]	; (80026c0 <HAL_RCC_OscConfig+0x7b0>)
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_RCC_OscConfig+0x7b4>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	60cb      	str	r3, [r1, #12]
 80026b0:	e001      	b.n	80026b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40021000 	.word	0x40021000
 80026c4:	feeefffc 	.word	0xfeeefffc

080026c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0e7      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026dc:	4b75      	ldr	r3, [pc, #468]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d910      	bls.n	800270c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 0207 	bic.w	r2, r3, #7
 80026f2:	4970      	ldr	r1, [pc, #448]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b6e      	ldr	r3, [pc, #440]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0cf      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d010      	beq.n	800273a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	4b66      	ldr	r3, [pc, #408]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002724:	429a      	cmp	r2, r3
 8002726:	d908      	bls.n	800273a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	4960      	ldr	r1, [pc, #384]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d04c      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d121      	bne.n	800279e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0a6      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002766:	4b54      	ldr	r3, [pc, #336]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e09a      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800277e:	4b4e      	ldr	r3, [pc, #312]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e08e      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800278e:	4b4a      	ldr	r3, [pc, #296]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e086      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4943      	ldr	r1, [pc, #268]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b0:	f7ff f882 	bl	80018b8 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7ff f87e 	bl	80018b8 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e06e      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d010      	beq.n	800280e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b31      	ldr	r3, [pc, #196]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d208      	bcs.n	800280e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	492b      	ldr	r1, [pc, #172]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800280a:	4313      	orrs	r3, r2
 800280c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800280e:	4b29      	ldr	r3, [pc, #164]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d210      	bcs.n	800283e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281c:	4b25      	ldr	r3, [pc, #148]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f023 0207 	bic.w	r2, r3, #7
 8002824:	4923      	ldr	r1, [pc, #140]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282c:	4b21      	ldr	r3, [pc, #132]	; (80028b4 <HAL_RCC_ClockConfig+0x1ec>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d001      	beq.n	800283e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e036      	b.n	80028ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d008      	beq.n	800285c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284a:	4b1b      	ldr	r3, [pc, #108]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	4918      	ldr	r1, [pc, #96]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0308 	and.w	r3, r3, #8
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	00db      	lsls	r3, r3, #3
 8002876:	4910      	ldr	r1, [pc, #64]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002878:	4313      	orrs	r3, r2
 800287a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800287c:	f000 f824 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b0d      	ldr	r3, [pc, #52]	; (80028b8 <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	490b      	ldr	r1, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x1f4>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	4a09      	ldr	r2, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1f8>)
 800289a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1fc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fee9 	bl	8001678 <HAL_InitTick>
 80028a6:	4603      	mov	r3, r0
 80028a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40022000 	.word	0x40022000
 80028b8:	40021000 	.word	0x40021000
 80028bc:	0800717c 	.word	0x0800717c
 80028c0:	20000000 	.word	0x20000000
 80028c4:	20000004 	.word	0x20000004

080028c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b089      	sub	sp, #36	; 0x24
 80028cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	2300      	movs	r3, #0
 80028d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028d6:	4b3e      	ldr	r3, [pc, #248]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f003 030c 	and.w	r3, r3, #12
 80028de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0303 	and.w	r3, r3, #3
 80028e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x34>
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	2b0c      	cmp	r3, #12
 80028f4:	d121      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d11e      	bne.n	800293a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028fc:	4b34      	ldr	r3, [pc, #208]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0308 	and.w	r3, r3, #8
 8002904:	2b00      	cmp	r3, #0
 8002906:	d107      	bne.n	8002918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002908:	4b31      	ldr	r3, [pc, #196]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290e:	0a1b      	lsrs	r3, r3, #8
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	e005      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002918:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002924:	4a2b      	ldr	r2, [pc, #172]	; (80029d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800292c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10d      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002938:	e00a      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	2b04      	cmp	r3, #4
 800293e:	d102      	bne.n	8002946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	e004      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b08      	cmp	r3, #8
 800294a:	d101      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800294c:	4b23      	ldr	r3, [pc, #140]	; (80029dc <HAL_RCC_GetSysClockFreq+0x114>)
 800294e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	2b0c      	cmp	r3, #12
 8002954:	d134      	bne.n	80029c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002956:	4b1e      	ldr	r3, [pc, #120]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d003      	beq.n	800296e <HAL_RCC_GetSysClockFreq+0xa6>
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d003      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0xac>
 800296c:	e005      	b.n	800297a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800296e:	4b1a      	ldr	r3, [pc, #104]	; (80029d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002970:	617b      	str	r3, [r7, #20]
      break;
 8002972:	e005      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002974:	4b19      	ldr	r3, [pc, #100]	; (80029dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002976:	617b      	str	r3, [r7, #20]
      break;
 8002978:	e002      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	617b      	str	r3, [r7, #20]
      break;
 800297e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002980:	4b13      	ldr	r3, [pc, #76]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	3301      	adds	r3, #1
 800298c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800298e:	4b10      	ldr	r3, [pc, #64]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	0a1b      	lsrs	r3, r3, #8
 8002994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	fb03 f202 	mul.w	r2, r3, r2
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	0e5b      	lsrs	r3, r3, #25
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	3301      	adds	r3, #1
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029c0:	69bb      	ldr	r3, [r7, #24]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3724      	adds	r7, #36	; 0x24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08007194 	.word	0x08007194
 80029d8:	00f42400 	.word	0x00f42400
 80029dc:	007a1200 	.word	0x007a1200

080029e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029e4:	4b03      	ldr	r3, [pc, #12]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80029e6:	681b      	ldr	r3, [r3, #0]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	20000000 	.word	0x20000000

080029f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029fc:	f7ff fff0 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	0800718c 	.word	0x0800718c

08002a24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a28:	f7ff ffda 	bl	80029e0 <HAL_RCC_GetHCLKFreq>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	0adb      	lsrs	r3, r3, #11
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	4904      	ldr	r1, [pc, #16]	; (8002a4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a3a:	5ccb      	ldrb	r3, [r1, r3]
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	0800718c 	.word	0x0800718c

08002a50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	220f      	movs	r2, #15
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_RCC_GetClockConfig+0x5c>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0203 	and.w	r2, r3, #3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <HAL_RCC_GetClockConfig+0x5c>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_RCC_GetClockConfig+0x5c>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a84:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_GetClockConfig+0x5c>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	08db      	lsrs	r3, r3, #3
 8002a8a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a92:	4b07      	ldr	r3, [pc, #28]	; (8002ab0 <HAL_RCC_GetClockConfig+0x60>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0207 	and.w	r2, r3, #7
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40022000 	.word	0x40022000

08002ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002acc:	f7ff f9bc 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002ad0:	6178      	str	r0, [r7, #20]
 8002ad2:	e014      	b.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aec:	f7ff f9ac 	bl	8001e48 <HAL_PWREx_GetVoltageRange>
 8002af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d10b      	bne.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d919      	bls.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b10:	d902      	bls.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b12:	2302      	movs	r3, #2
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e013      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b18:	2301      	movs	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e010      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d902      	bls.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b24:	2303      	movs	r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e00a      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d102      	bne.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b30:	2302      	movs	r3, #2
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e004      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b70      	cmp	r3, #112	; 0x70
 8002b3a:	d101      	bne.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0207 	bic.w	r2, r3, #7
 8002b48:	4909      	ldr	r1, [pc, #36]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40022000 	.word	0x40022000

08002b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b80:	2300      	movs	r3, #0
 8002b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d041      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b98:	d02a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b9e:	d824      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002baa:	d81e      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bb6:	e018      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bb8:	4b86      	ldr	r3, [pc, #536]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a85      	ldr	r2, [pc, #532]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fabb 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd6:	e00c      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3320      	adds	r3, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fba6 	bl	8003330 <RCCEx_PLLSAI2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	74fb      	strb	r3, [r7, #19]
      break;
 8002bee:	e000      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c06:	4973      	ldr	r1, [pc, #460]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d041      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c28:	d02a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c2e:	d824      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c3a:	d81e      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d010      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c46:	e018      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c48:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a61      	ldr	r2, [pc, #388]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c54:	e015      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fa73 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c66:	e00c      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3320      	adds	r3, #32
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb5e 	bl	8003330 <RCCEx_PLLSAI2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c78:	e003      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c7e:	e000      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c96:	494f      	ldr	r1, [pc, #316]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a0 	beq.w	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3a      	ldr	r2, [pc, #232]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fde0 	bl	80018b8 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cfa:	e009      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe fddc 	bl	80018b8 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ef      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d15c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01f      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d019      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe fd9b 	bl	80018b8 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d84:	e00b      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe fd97 	bl	80018b8 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d902      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ec      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dca:	e009      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de0:	7c7b      	ldrb	r3, [r7, #17]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a9d      	ldr	r2, [pc, #628]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfe:	4b98      	ldr	r3, [pc, #608]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f023 0203 	bic.w	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	4994      	ldr	r1, [pc, #592]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f023 020c 	bic.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	498c      	ldr	r1, [pc, #560]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4983      	ldr	r1, [pc, #524]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	497b      	ldr	r1, [pc, #492]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	4972      	ldr	r1, [pc, #456]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	496a      	ldr	r1, [pc, #424]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	4961      	ldr	r1, [pc, #388]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	4959      	ldr	r1, [pc, #356]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1c:	4950      	ldr	r1, [pc, #320]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	4948      	ldr	r1, [pc, #288]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	493f      	ldr	r1, [pc, #252]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d028      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f74:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	4937      	ldr	r1, [pc, #220]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
 8002fa0:	e011      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f8c8 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d028      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	491f      	ldr	r1, [pc, #124]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffc:	60d3      	str	r3, [r2, #12]
 8002ffe:	e011      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003008:	d10c      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f899 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304e:	d109      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a02      	ldr	r2, [pc, #8]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
 800305c:	e014      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306c:	d10c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f867 	bl	8003148 <RCCEx_PLLSAI1_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d02f      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a2:	4928      	ldr	r1, [pc, #160]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f844 	bl	8003148 <RCCEx_PLLSAI1_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	74bb      	strb	r3, [r7, #18]
 80030ce:	e011      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3320      	adds	r3, #32
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f925 	bl	8003330 <RCCEx_PLLSAI2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800310e:	490d      	ldr	r1, [pc, #52]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	4904      	ldr	r1, [pc, #16]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800313a:	7cbb      	ldrb	r3, [r7, #18]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000

08003148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0203 	and.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
       ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
       ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d047      	beq.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e044      	b.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d018      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0x86>
 800319c:	2b03      	cmp	r3, #3
 800319e:	d825      	bhi.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0x62>
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d009      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x74>
 80031a8:	e020      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031aa:	4b60      	ldr	r3, [pc, #384]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ba:	e01a      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031bc:	4b5b      	ldr	r3, [pc, #364]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e013      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ce:	4b57      	ldr	r3, [pc, #348]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ea:	e006      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e004      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	430b      	orrs	r3, r1
 8003218:	4944      	ldr	r1, [pc, #272]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d17d      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fe fb42 	bl	80018b8 <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003236:	e009      	b.n	800324c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003238:	f7fe fb3e 	bl	80018b8 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	73fb      	strb	r3, [r7, #15]
        break;
 800324a:	e005      	b.n	8003258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800324c:	4b37      	ldr	r3, [pc, #220]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ef      	bne.n	8003238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d160      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	0211      	lsls	r1, r2, #8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	0912      	lsrs	r2, r2, #4
 800327c:	0452      	lsls	r2, r2, #17
 800327e:	430a      	orrs	r2, r1
 8003280:	492a      	ldr	r1, [pc, #168]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
 8003286:	e027      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d112      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	0211      	lsls	r1, r2, #8
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6912      	ldr	r2, [r2, #16]
 80032a4:	0852      	lsrs	r2, r2, #1
 80032a6:	3a01      	subs	r2, #1
 80032a8:	0552      	lsls	r2, r2, #21
 80032aa:	430a      	orrs	r2, r1
 80032ac:	491f      	ldr	r1, [pc, #124]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
 80032b2:	e011      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	0211      	lsls	r1, r2, #8
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6952      	ldr	r2, [r2, #20]
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0652      	lsls	r2, r2, #25
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4916      	ldr	r1, [pc, #88]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fe fae8 	bl	80018b8 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ea:	e009      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ec:	f7fe fae4 	bl	80018b8 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d902      	bls.n	8003300 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
          break;
 80032fe:	e005      	b.n	800330c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4904      	ldr	r1, [pc, #16]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000

08003330 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d10d      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
       ||
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
       ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d047      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e044      	b.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d018      	beq.n	80033b6 <RCCEx_PLLSAI2_Config+0x86>
 8003384:	2b03      	cmp	r3, #3
 8003386:	d825      	bhi.n	80033d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <RCCEx_PLLSAI2_Config+0x62>
 800338c:	2b02      	cmp	r3, #2
 800338e:	d009      	beq.n	80033a4 <RCCEx_PLLSAI2_Config+0x74>
 8003390:	e020      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11d      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a2:	e01a      	b.n	80033da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e013      	b.n	80033de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d2:	e006      	b.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e004      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	430b      	orrs	r3, r1
 8003400:	4939      	ldr	r1, [pc, #228]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d167      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a35      	ldr	r2, [pc, #212]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fe fa4e 	bl	80018b8 <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800341e:	e009      	b.n	8003434 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003420:	f7fe fa4a 	bl	80018b8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	73fb      	strb	r3, [r7, #15]
        break;
 8003432:	e005      	b.n	8003440 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ef      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14a      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	0912      	lsrs	r2, r2, #4
 8003464:	0452      	lsls	r2, r2, #17
 8003466:	430a      	orrs	r2, r1
 8003468:	491f      	ldr	r1, [pc, #124]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	614b      	str	r3, [r1, #20]
 800346e:	e011      	b.n	8003494 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	0211      	lsls	r1, r2, #8
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6912      	ldr	r2, [r2, #16]
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	3a01      	subs	r2, #1
 800348a:	0652      	lsls	r2, r2, #25
 800348c:	430a      	orrs	r2, r1
 800348e:	4916      	ldr	r1, [pc, #88]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fe fa0a 	bl	80018b8 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034a6:	e009      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034a8:	f7fe fa06 	bl	80018b8 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	73fb      	strb	r3, [r7, #15]
          break;
 80034ba:	e005      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	795b      	ldrb	r3, [r3, #5]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d105      	bne.n	8003514 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7fd ff68 	bl	80013e4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2202      	movs	r2, #2
 8003518:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f042 0204 	orr.w	r2, r2, #4
 8003528:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003534:	2b40      	cmp	r3, #64	; 0x40
 8003536:	d104      	bne.n	8003542 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2204      	movs	r2, #4
 800353c:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e027      	b.n	8003592 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8003542:	f7fe f9b9 	bl	80018b8 <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003548:	e015      	b.n	8003576 <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800354a:	f7fe f9b5 	bl	80018b8 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d90e      	bls.n	8003576 <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b04      	cmp	r3, #4
 8003564:	d107      	bne.n	8003576 <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2204      	movs	r2, #4
 800356a:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00d      	b.n	8003592 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d0e2      	beq.n	800354a <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d101      	bne.n	80035b4 <HAL_RNG_GenerateRandomNumber+0x1a>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e03d      	b.n	8003630 <HAL_RNG_GenerateRandomNumber+0x96>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	795b      	ldrb	r3, [r3, #5]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d12c      	bne.n	800361e <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80035ca:	f7fe f975 	bl	80018b8 <HAL_GetTick>
 80035ce:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80035d0:	e011      	b.n	80035f6 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80035d2:	f7fe f971 	bl	80018b8 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d90a      	bls.n	80035f6 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2202      	movs	r2, #2
 80035ea:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e01c      	b.n	8003630 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b01      	cmp	r3, #1
 8003602:	d1e6      	bne.n	80035d2 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689a      	ldr	r2, [r3, #8]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	715a      	strb	r2, [r3, #5]
 800361c:	e004      	b.n	8003628 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	711a      	strb	r2, [r3, #4]

  return status;
 800362e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	330c      	adds	r3, #12
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ffa7 	bl	800359a <HAL_RNG_GenerateRandomNumber>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d102      	bne.n	8003658 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	e000      	b.n	800365a <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8003658:	2300      	movs	r3, #0
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e049      	b.n	8003708 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d106      	bne.n	800368e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd feef 	bl	800146c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	4619      	mov	r1, r3
 80036a0:	4610      	mov	r0, r2
 80036a2:	f000 fe97 	bl	80043d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e047      	b.n	80037b8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <HAL_TIM_Base_Start+0xb4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d01d      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003742:	d018      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_TIM_Base_Start+0xb8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1e      	ldr	r2, [pc, #120]	; (80037cc <HAL_TIM_Base_Start+0xbc>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d00e      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1c      	ldr	r2, [pc, #112]	; (80037d0 <HAL_TIM_Base_Start+0xc0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d009      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_TIM_Base_Start+0xc4>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d004      	beq.n	8003776 <HAL_TIM_Base_Start+0x66>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a19      	ldr	r2, [pc, #100]	; (80037d8 <HAL_TIM_Base_Start+0xc8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d115      	bne.n	80037a2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	4b17      	ldr	r3, [pc, #92]	; (80037dc <HAL_TIM_Base_Start+0xcc>)
 800377e:	4013      	ands	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b06      	cmp	r3, #6
 8003786:	d015      	beq.n	80037b4 <HAL_TIM_Base_Start+0xa4>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800378e:	d011      	beq.n	80037b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	e008      	b.n	80037b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e000      	b.n	80037b6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	40012c00 	.word	0x40012c00
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40013400 	.word	0x40013400
 80037d8:	40014000 	.word	0x40014000
 80037dc:	00010007 	.word	0x00010007

080037e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e04f      	b.n	8003898 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01d      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d018      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d013      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1e      	ldr	r2, [pc, #120]	; (80038ac <HAL_TIM_Base_Start_IT+0xcc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d00e      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIM_Base_Start_IT+0x76>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a19      	ldr	r2, [pc, #100]	; (80038b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d115      	bne.n	8003882 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	4b17      	ldr	r3, [pc, #92]	; (80038bc <HAL_TIM_Base_Start_IT+0xdc>)
 800385e:	4013      	ands	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d015      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0xb4>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d011      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003880:	e008      	b.n	8003894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f042 0201 	orr.w	r2, r2, #1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e000      	b.n	8003896 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003894:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40013400 	.word	0x40013400
 80038b8:	40014000 	.word	0x40014000
 80038bc:	00010007 	.word	0x00010007

080038c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e049      	b.n	8003966 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f841 	bl	800396e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4610      	mov	r0, r2
 8003900:	f000 fd68 	bl	80043d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
	...

08003984 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d109      	bne.n	80039a8 <HAL_TIM_PWM_Start+0x24>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e03c      	b.n	8003a22 <HAL_TIM_PWM_Start+0x9e>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d109      	bne.n	80039c2 <HAL_TIM_PWM_Start+0x3e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	e02f      	b.n	8003a22 <HAL_TIM_PWM_Start+0x9e>
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	2b08      	cmp	r3, #8
 80039c6:	d109      	bne.n	80039dc <HAL_TIM_PWM_Start+0x58>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	bf14      	ite	ne
 80039d4:	2301      	movne	r3, #1
 80039d6:	2300      	moveq	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	e022      	b.n	8003a22 <HAL_TIM_PWM_Start+0x9e>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d109      	bne.n	80039f6 <HAL_TIM_PWM_Start+0x72>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	bf14      	ite	ne
 80039ee:	2301      	movne	r3, #1
 80039f0:	2300      	moveq	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	e015      	b.n	8003a22 <HAL_TIM_PWM_Start+0x9e>
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2b10      	cmp	r3, #16
 80039fa:	d109      	bne.n	8003a10 <HAL_TIM_PWM_Start+0x8c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	e008      	b.n	8003a22 <HAL_TIM_PWM_Start+0x9e>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e09c      	b.n	8003b64 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_PWM_Start+0xb6>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a38:	e023      	b.n	8003a82 <HAL_TIM_PWM_Start+0xfe>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d104      	bne.n	8003a4a <HAL_TIM_PWM_Start+0xc6>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a48:	e01b      	b.n	8003a82 <HAL_TIM_PWM_Start+0xfe>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d104      	bne.n	8003a5a <HAL_TIM_PWM_Start+0xd6>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	e013      	b.n	8003a82 <HAL_TIM_PWM_Start+0xfe>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b0c      	cmp	r3, #12
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_PWM_Start+0xe6>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a68:	e00b      	b.n	8003a82 <HAL_TIM_PWM_Start+0xfe>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_PWM_Start+0xf6>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a78:	e003      	b.n	8003a82 <HAL_TIM_PWM_Start+0xfe>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2202      	movs	r2, #2
 8003a7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f9d0 	bl	8004e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a35      	ldr	r2, [pc, #212]	; (8003b6c <HAL_TIM_PWM_Start+0x1e8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x13e>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_TIM_PWM_Start+0x1ec>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x13e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a32      	ldr	r2, [pc, #200]	; (8003b74 <HAL_TIM_PWM_Start+0x1f0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d009      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x13e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a31      	ldr	r2, [pc, #196]	; (8003b78 <HAL_TIM_PWM_Start+0x1f4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d004      	beq.n	8003ac2 <HAL_TIM_PWM_Start+0x13e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <HAL_TIM_PWM_Start+0x1f8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d101      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0x142>
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e000      	b.n	8003ac8 <HAL_TIM_PWM_Start+0x144>
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d007      	beq.n	8003adc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ada:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <HAL_TIM_PWM_Start+0x1e8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d01d      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aee:	d018      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <HAL_TIM_PWM_Start+0x1fc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d013      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a21      	ldr	r2, [pc, #132]	; (8003b84 <HAL_TIM_PWM_Start+0x200>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d00e      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_TIM_PWM_Start+0x204>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d009      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <HAL_TIM_PWM_Start+0x1ec>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d004      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x19e>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <HAL_TIM_PWM_Start+0x1f0>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d115      	bne.n	8003b4e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	4b18      	ldr	r3, [pc, #96]	; (8003b8c <HAL_TIM_PWM_Start+0x208>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2b06      	cmp	r3, #6
 8003b32:	d015      	beq.n	8003b60 <HAL_TIM_PWM_Start+0x1dc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3a:	d011      	beq.n	8003b60 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b4c:	e008      	b.n	8003b60 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e000      	b.n	8003b62 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40013400 	.word	0x40013400
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	00010007 	.word	0x00010007

08003b90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e049      	b.n	8003c36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f841 	bl	8003c3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	4610      	mov	r0, r2
 8003bd0:	f000 fc00 	bl	80043d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b083      	sub	sp, #12
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d122      	bne.n	8003cae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d11b      	bne.n	8003cae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f06f 0202 	mvn.w	r2, #2
 8003c7e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 fb7e 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8003c9a:	e005      	b.n	8003ca8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 fb70 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fb81 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d122      	bne.n	8003d02 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d11b      	bne.n	8003d02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f06f 0204 	mvn.w	r2, #4
 8003cd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb54 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8003cee:	e005      	b.n	8003cfc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fb46 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fb57 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f003 0308 	and.w	r3, r3, #8
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d122      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d11b      	bne.n	8003d56 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f06f 0208 	mvn.w	r2, #8
 8003d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2204      	movs	r2, #4
 8003d2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	69db      	ldr	r3, [r3, #28]
 8003d34:	f003 0303 	and.w	r3, r3, #3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fb2a 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8003d42:	e005      	b.n	8003d50 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 fb1c 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fb2d 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b10      	cmp	r3, #16
 8003d62:	d122      	bne.n	8003daa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d11b      	bne.n	8003daa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f06f 0210 	mvn.w	r2, #16
 8003d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2208      	movs	r2, #8
 8003d80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 fb00 	bl	8004396 <HAL_TIM_IC_CaptureCallback>
 8003d96:	e005      	b.n	8003da4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 faf2 	bl	8004382 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fb03 	bl	80043aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d10e      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0201 	mvn.w	r2, #1
 8003dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd f91b 	bl	800100c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	d10e      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f001 f8cf 	bl	8004fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d10e      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d107      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f001 f8c2 	bl	8004fb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e48:	2b40      	cmp	r3, #64	; 0x40
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fab1 	bl	80043be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0320 	and.w	r3, r3, #32
 8003e74:	2b20      	cmp	r3, #32
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0220 	mvn.w	r2, #32
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f001 f882 	bl	8004f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b086      	sub	sp, #24
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <HAL_TIM_IC_ConfigChannel+0x1e>
 8003eaa:	2302      	movs	r3, #2
 8003eac:	e088      	b.n	8003fc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11b      	bne.n	8003ef4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6818      	ldr	r0, [r3, #0]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	6819      	ldr	r1, [r3, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f000 fdf2 	bl	8004ab4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 020c 	bic.w	r2, r2, #12
 8003ede:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	619a      	str	r2, [r3, #24]
 8003ef2:	e060      	b.n	8003fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d11c      	bne.n	8003f34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6818      	ldr	r0, [r3, #0]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	6819      	ldr	r1, [r3, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f000 fe70 	bl	8004bee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699a      	ldr	r2, [r3, #24]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6999      	ldr	r1, [r3, #24]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	619a      	str	r2, [r3, #24]
 8003f32:	e040      	b.n	8003fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d11b      	bne.n	8003f72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	6819      	ldr	r1, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f000 febd 	bl	8004cc8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 020c 	bic.w	r2, r2, #12
 8003f5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	61da      	str	r2, [r3, #28]
 8003f70:	e021      	b.n	8003fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b0c      	cmp	r3, #12
 8003f76:	d11c      	bne.n	8003fb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6818      	ldr	r0, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f000 feda 	bl	8004d40 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69da      	ldr	r2, [r3, #28]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	69d9      	ldr	r1, [r3, #28]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	430a      	orrs	r2, r1
 8003fae:	61da      	str	r2, [r3, #28]
 8003fb0:	e001      	b.n	8003fb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3718      	adds	r7, #24
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0ff      	b.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b14      	cmp	r3, #20
 8003ff2:	f200 80f0 	bhi.w	80041d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003ff6:	a201      	add	r2, pc, #4	; (adr r2, 8003ffc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ffc:	08004051 	.word	0x08004051
 8004000:	080041d7 	.word	0x080041d7
 8004004:	080041d7 	.word	0x080041d7
 8004008:	080041d7 	.word	0x080041d7
 800400c:	08004091 	.word	0x08004091
 8004010:	080041d7 	.word	0x080041d7
 8004014:	080041d7 	.word	0x080041d7
 8004018:	080041d7 	.word	0x080041d7
 800401c:	080040d3 	.word	0x080040d3
 8004020:	080041d7 	.word	0x080041d7
 8004024:	080041d7 	.word	0x080041d7
 8004028:	080041d7 	.word	0x080041d7
 800402c:	08004113 	.word	0x08004113
 8004030:	080041d7 	.word	0x080041d7
 8004034:	080041d7 	.word	0x080041d7
 8004038:	080041d7 	.word	0x080041d7
 800403c:	08004155 	.word	0x08004155
 8004040:	080041d7 	.word	0x080041d7
 8004044:	080041d7 	.word	0x080041d7
 8004048:	080041d7 	.word	0x080041d7
 800404c:	08004195 	.word	0x08004195
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fa56 	bl	8004508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699a      	ldr	r2, [r3, #24]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0208 	orr.w	r2, r2, #8
 800406a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0204 	bic.w	r2, r2, #4
 800407a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6999      	ldr	r1, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	619a      	str	r2, [r3, #24]
      break;
 800408e:	e0a5      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 fac6 	bl	8004628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699a      	ldr	r2, [r3, #24]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6999      	ldr	r1, [r3, #24]
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	021a      	lsls	r2, r3, #8
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	619a      	str	r2, [r3, #24]
      break;
 80040d0:	e084      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	4618      	mov	r0, r3
 80040da:	f000 fb2f 	bl	800473c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69da      	ldr	r2, [r3, #28]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0208 	orr.w	r2, r2, #8
 80040ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	69da      	ldr	r2, [r3, #28]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0204 	bic.w	r2, r2, #4
 80040fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	69d9      	ldr	r1, [r3, #28]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	691a      	ldr	r2, [r3, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	430a      	orrs	r2, r1
 800410e:	61da      	str	r2, [r3, #28]
      break;
 8004110:	e064      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68b9      	ldr	r1, [r7, #8]
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fb97 	bl	800484c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	69da      	ldr	r2, [r3, #28]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800412c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800413c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	61da      	str	r2, [r3, #28]
      break;
 8004152:	e043      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fbe0 	bl	8004920 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0208 	orr.w	r2, r2, #8
 800416e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0204 	bic.w	r2, r2, #4
 800417e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691a      	ldr	r2, [r3, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004192:	e023      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fc24 	bl	80049e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80041d4:	e002      	b.n	80041dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	75fb      	strb	r3, [r7, #23]
      break;
 80041da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3718      	adds	r7, #24
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop

080041f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d101      	bne.n	800420c <HAL_TIM_ConfigClockSource+0x1c>
 8004208:	2302      	movs	r3, #2
 800420a:	e0b6      	b.n	800437a <HAL_TIM_ConfigClockSource+0x18a>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800422e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d03e      	beq.n	80042c8 <HAL_TIM_ConfigClockSource+0xd8>
 800424a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424e:	f200 8087 	bhi.w	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004256:	f000 8086 	beq.w	8004366 <HAL_TIM_ConfigClockSource+0x176>
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d87f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004260:	2b70      	cmp	r3, #112	; 0x70
 8004262:	d01a      	beq.n	800429a <HAL_TIM_ConfigClockSource+0xaa>
 8004264:	2b70      	cmp	r3, #112	; 0x70
 8004266:	d87b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004268:	2b60      	cmp	r3, #96	; 0x60
 800426a:	d050      	beq.n	800430e <HAL_TIM_ConfigClockSource+0x11e>
 800426c:	2b60      	cmp	r3, #96	; 0x60
 800426e:	d877      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004270:	2b50      	cmp	r3, #80	; 0x50
 8004272:	d03c      	beq.n	80042ee <HAL_TIM_ConfigClockSource+0xfe>
 8004274:	2b50      	cmp	r3, #80	; 0x50
 8004276:	d873      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004278:	2b40      	cmp	r3, #64	; 0x40
 800427a:	d058      	beq.n	800432e <HAL_TIM_ConfigClockSource+0x13e>
 800427c:	2b40      	cmp	r3, #64	; 0x40
 800427e:	d86f      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004280:	2b30      	cmp	r3, #48	; 0x30
 8004282:	d064      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004284:	2b30      	cmp	r3, #48	; 0x30
 8004286:	d86b      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004288:	2b20      	cmp	r3, #32
 800428a:	d060      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d867      	bhi.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05c      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004294:	2b10      	cmp	r3, #16
 8004296:	d05a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0x15e>
 8004298:	e062      	b.n	8004360 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f000 fda1 	bl	8004df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
      break;
 80042c6:	e04f      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	6899      	ldr	r1, [r3, #8]
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	685a      	ldr	r2, [r3, #4]
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	f000 fd8a 	bl	8004df0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042ea:	609a      	str	r2, [r3, #8]
      break;
 80042ec:	e03c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	461a      	mov	r2, r3
 80042fc:	f000 fc48 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2150      	movs	r1, #80	; 0x50
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fd57 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800430c:	e02c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6859      	ldr	r1, [r3, #4]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68db      	ldr	r3, [r3, #12]
 800431a:	461a      	mov	r2, r3
 800431c:	f000 fca4 	bl	8004c68 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2160      	movs	r1, #96	; 0x60
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fd47 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800432c:	e01c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6818      	ldr	r0, [r3, #0]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	461a      	mov	r2, r3
 800433c:	f000 fc28 	bl	8004b90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2140      	movs	r1, #64	; 0x40
 8004346:	4618      	mov	r0, r3
 8004348:	f000 fd37 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800434c:	e00c      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4619      	mov	r1, r3
 8004358:	4610      	mov	r0, r2
 800435a:	f000 fd2e 	bl	8004dba <TIM_ITRx_SetConfig>
      break;
 800435e:	e003      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      break;
 8004364:	e000      	b.n	8004368 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004366:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438a:	bf00      	nop
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
	...

080043d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a40      	ldr	r2, [pc, #256]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f2:	d00f      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a3d      	ldr	r2, [pc, #244]	; (80044ec <TIM_Base_SetConfig+0x118>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00b      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a3c      	ldr	r2, [pc, #240]	; (80044f0 <TIM_Base_SetConfig+0x11c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d007      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a3b      	ldr	r2, [pc, #236]	; (80044f4 <TIM_Base_SetConfig+0x120>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d003      	beq.n	8004414 <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a3a      	ldr	r2, [pc, #232]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d108      	bne.n	8004426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2f      	ldr	r2, [pc, #188]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d01f      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d01b      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <TIM_Base_SetConfig+0x118>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d017      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2b      	ldr	r2, [pc, #172]	; (80044f0 <TIM_Base_SetConfig+0x11c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d013      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a2a      	ldr	r2, [pc, #168]	; (80044f4 <TIM_Base_SetConfig+0x120>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d00f      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a29      	ldr	r2, [pc, #164]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00b      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a28      	ldr	r2, [pc, #160]	; (80044fc <TIM_Base_SetConfig+0x128>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d007      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a27      	ldr	r2, [pc, #156]	; (8004500 <TIM_Base_SetConfig+0x12c>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d003      	beq.n	800446e <TIM_Base_SetConfig+0x9a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a26      	ldr	r2, [pc, #152]	; (8004504 <TIM_Base_SetConfig+0x130>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d108      	bne.n	8004480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a10      	ldr	r2, [pc, #64]	; (80044e8 <TIM_Base_SetConfig+0x114>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00f      	beq.n	80044cc <TIM_Base_SetConfig+0xf8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <TIM_Base_SetConfig+0x124>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d00b      	beq.n	80044cc <TIM_Base_SetConfig+0xf8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a11      	ldr	r2, [pc, #68]	; (80044fc <TIM_Base_SetConfig+0x128>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d007      	beq.n	80044cc <TIM_Base_SetConfig+0xf8>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a10      	ldr	r2, [pc, #64]	; (8004500 <TIM_Base_SetConfig+0x12c>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d003      	beq.n	80044cc <TIM_Base_SetConfig+0xf8>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4a0f      	ldr	r2, [pc, #60]	; (8004504 <TIM_Base_SetConfig+0x130>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d103      	bne.n	80044d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	615a      	str	r2, [r3, #20]
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40013400 	.word	0x40013400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40014400 	.word	0x40014400
 8004504:	40014800 	.word	0x40014800

08004508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 0302 	bic.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a2c      	ldr	r2, [pc, #176]	; (8004614 <TIM_OC1_SetConfig+0x10c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00f      	beq.n	8004588 <TIM_OC1_SetConfig+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a2b      	ldr	r2, [pc, #172]	; (8004618 <TIM_OC1_SetConfig+0x110>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <TIM_OC1_SetConfig+0x80>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a2a      	ldr	r2, [pc, #168]	; (800461c <TIM_OC1_SetConfig+0x114>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <TIM_OC1_SetConfig+0x80>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a29      	ldr	r2, [pc, #164]	; (8004620 <TIM_OC1_SetConfig+0x118>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_OC1_SetConfig+0x80>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a28      	ldr	r2, [pc, #160]	; (8004624 <TIM_OC1_SetConfig+0x11c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0308 	bic.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a1b      	ldr	r2, [pc, #108]	; (8004614 <TIM_OC1_SetConfig+0x10c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_OC1_SetConfig+0xc2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a1a      	ldr	r2, [pc, #104]	; (8004618 <TIM_OC1_SetConfig+0x110>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_OC1_SetConfig+0xc2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a19      	ldr	r2, [pc, #100]	; (800461c <TIM_OC1_SetConfig+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_OC1_SetConfig+0xc2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a18      	ldr	r2, [pc, #96]	; (8004620 <TIM_OC1_SetConfig+0x118>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_OC1_SetConfig+0xc2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a17      	ldr	r2, [pc, #92]	; (8004624 <TIM_OC1_SetConfig+0x11c>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d111      	bne.n	80045ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	621a      	str	r2, [r3, #32]
}
 8004608:	bf00      	nop
 800460a:	371c      	adds	r7, #28
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40013400 	.word	0x40013400
 800461c:	40014000 	.word	0x40014000
 8004620:	40014400 	.word	0x40014400
 8004624:	40014800 	.word	0x40014800

08004628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004628:	b480      	push	{r7}
 800462a:	b087      	sub	sp, #28
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f023 0210 	bic.w	r2, r3, #16
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	021b      	lsls	r3, r3, #8
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f023 0320 	bic.w	r3, r3, #32
 8004676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a28      	ldr	r2, [pc, #160]	; (8004728 <TIM_OC2_SetConfig+0x100>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d003      	beq.n	8004694 <TIM_OC2_SetConfig+0x6c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a27      	ldr	r2, [pc, #156]	; (800472c <TIM_OC2_SetConfig+0x104>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d10d      	bne.n	80046b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800469a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	697a      	ldr	r2, [r7, #20]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <TIM_OC2_SetConfig+0x100>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00f      	beq.n	80046d8 <TIM_OC2_SetConfig+0xb0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <TIM_OC2_SetConfig+0x104>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_OC2_SetConfig+0xb0>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a1b      	ldr	r2, [pc, #108]	; (8004730 <TIM_OC2_SetConfig+0x108>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_OC2_SetConfig+0xb0>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <TIM_OC2_SetConfig+0x10c>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_OC2_SetConfig+0xb0>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a19      	ldr	r2, [pc, #100]	; (8004738 <TIM_OC2_SetConfig+0x110>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d113      	bne.n	8004700 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400
 8004738:	40014800 	.word	0x40014800

0800473c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0303 	bic.w	r3, r3, #3
 8004776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a27      	ldr	r2, [pc, #156]	; (8004838 <TIM_OC3_SetConfig+0xfc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d003      	beq.n	80047a6 <TIM_OC3_SetConfig+0x6a>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a26      	ldr	r2, [pc, #152]	; (800483c <TIM_OC3_SetConfig+0x100>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d10d      	bne.n	80047c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <TIM_OC3_SetConfig+0xfc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00f      	beq.n	80047ea <TIM_OC3_SetConfig+0xae>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a1b      	ldr	r2, [pc, #108]	; (800483c <TIM_OC3_SetConfig+0x100>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_OC3_SetConfig+0xae>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1a      	ldr	r2, [pc, #104]	; (8004840 <TIM_OC3_SetConfig+0x104>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_OC3_SetConfig+0xae>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a19      	ldr	r2, [pc, #100]	; (8004844 <TIM_OC3_SetConfig+0x108>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC3_SetConfig+0xae>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <TIM_OC3_SetConfig+0x10c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d113      	bne.n	8004812 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800

0800484c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a1b      	ldr	r3, [r3, #32]
 8004866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800489a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	031b      	lsls	r3, r3, #12
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a18      	ldr	r2, [pc, #96]	; (800490c <TIM_OC4_SetConfig+0xc0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00f      	beq.n	80048d0 <TIM_OC4_SetConfig+0x84>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <TIM_OC4_SetConfig+0xc4>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_OC4_SetConfig+0x84>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <TIM_OC4_SetConfig+0xc8>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_OC4_SetConfig+0x84>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC4_SetConfig+0xcc>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_OC4_SetConfig+0x84>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a14      	ldr	r2, [pc, #80]	; (800491c <TIM_OC4_SetConfig+0xd0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d109      	bne.n	80048e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	693a      	ldr	r2, [r7, #16]
 80048fc:	621a      	str	r2, [r3, #32]
}
 80048fe:	bf00      	nop
 8004900:	371c      	adds	r7, #28
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	40012c00 	.word	0x40012c00
 8004910:	40013400 	.word	0x40013400
 8004914:	40014000 	.word	0x40014000
 8004918:	40014400 	.word	0x40014400
 800491c:	40014800 	.word	0x40014800

08004920 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004964:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	041b      	lsls	r3, r3, #16
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <TIM_OC5_SetConfig+0xb4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d00f      	beq.n	800499a <TIM_OC5_SetConfig+0x7a>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <TIM_OC5_SetConfig+0xb8>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <TIM_OC5_SetConfig+0x7a>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <TIM_OC5_SetConfig+0xbc>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d007      	beq.n	800499a <TIM_OC5_SetConfig+0x7a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <TIM_OC5_SetConfig+0xc0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC5_SetConfig+0x7a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <TIM_OC5_SetConfig+0xc4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d109      	bne.n	80049ae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	021b      	lsls	r3, r3, #8
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	621a      	str	r2, [r3, #32]
}
 80049c8:	bf00      	nop
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40014400 	.word	0x40014400
 80049e4:	40014800 	.word	0x40014800

080049e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	021b      	lsls	r3, r3, #8
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	051b      	lsls	r3, r3, #20
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <TIM_OC6_SetConfig+0xb8>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00f      	beq.n	8004a64 <TIM_OC6_SetConfig+0x7c>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <TIM_OC6_SetConfig+0xbc>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <TIM_OC6_SetConfig+0x7c>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <TIM_OC6_SetConfig+0xc0>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <TIM_OC6_SetConfig+0x7c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <TIM_OC6_SetConfig+0xc4>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <TIM_OC6_SetConfig+0x7c>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <TIM_OC6_SetConfig+0xc8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d109      	bne.n	8004a78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40013400 	.word	0x40013400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	f023 0201 	bic.w	r2, r3, #1
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a26      	ldr	r2, [pc, #152]	; (8004b78 <TIM_TI1_SetConfig+0xc4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d017      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae8:	d013      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <TIM_TI1_SetConfig+0xc8>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4a22      	ldr	r2, [pc, #136]	; (8004b80 <TIM_TI1_SetConfig+0xcc>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00b      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <TIM_TI1_SetConfig+0xd0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d007      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4a20      	ldr	r2, [pc, #128]	; (8004b88 <TIM_TI1_SetConfig+0xd4>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d003      	beq.n	8004b12 <TIM_TI1_SetConfig+0x5e>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <TIM_TI1_SetConfig+0xd8>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d101      	bne.n	8004b16 <TIM_TI1_SetConfig+0x62>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <TIM_TI1_SetConfig+0x64>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d008      	beq.n	8004b2e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f023 0303 	bic.w	r3, r3, #3
 8004b22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]
 8004b2c:	e003      	b.n	8004b36 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f023 030a 	bic.w	r3, r3, #10
 8004b50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f003 030a 	and.w	r3, r3, #10
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	621a      	str	r2, [r3, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	40012c00 	.word	0x40012c00
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40014000 	.word	0x40014000

08004b90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0201 	bic.w	r2, r3, #1
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	011b      	lsls	r3, r3, #4
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 030a 	bic.w	r3, r3, #10
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	621a      	str	r2, [r3, #32]
}
 8004be2:	bf00      	nop
 8004be4:	371c      	adds	r7, #28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	f023 0210 	bic.w	r2, r3, #16
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	021b      	lsls	r3, r3, #8
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	031b      	lsls	r3, r3, #12
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	697a      	ldr	r2, [r7, #20]
 8004c54:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0210 	bic.w	r2, r3, #16
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c92:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	031b      	lsls	r3, r3, #12
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ca4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	621a      	str	r2, [r3, #32]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6a1b      	ldr	r3, [r3, #32]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004d18:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	621a      	str	r2, [r3, #32]
}
 8004d34:	bf00      	nop
 8004d36:	371c      	adds	r7, #28
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d7e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	031b      	lsls	r3, r3, #12
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004d92:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	031b      	lsls	r3, r3, #12
 8004d98:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr

08004dba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dba:	b480      	push	{r7}
 8004dbc:	b085      	sub	sp, #20
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f043 0307 	orr.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	609a      	str	r2, [r3, #8]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	609a      	str	r2, [r3, #8]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2201      	movs	r2, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6a1a      	ldr	r2, [r3, #32]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	43db      	mvns	r3, r3
 8004e52:	401a      	ands	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a1a      	ldr	r2, [r3, #32]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f003 031f 	and.w	r3, r3, #31
 8004e62:	6879      	ldr	r1, [r7, #4]
 8004e64:	fa01 f303 	lsl.w	r3, r1, r3
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e068      	b.n	8004f66 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2e      	ldr	r2, [pc, #184]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d108      	bne.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ece:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	; (8004f74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d018      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1b      	ldr	r2, [pc, #108]	; (8004f7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1a      	ldr	r2, [pc, #104]	; (8004f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a18      	ldr	r2, [pc, #96]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a13      	ldr	r2, [pc, #76]	; (8004f78 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d10c      	bne.n	8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
 8004f72:	bf00      	nop
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	40013400 	.word	0x40013400
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	40000800 	.word	0x40000800
 8004f84:	40000c00 	.word	0x40000c00
 8004f88:	40014000 	.word	0x40014000

08004f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e040      	b.n	800505c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7fc fae8 	bl	80015c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2224      	movs	r2, #36	; 0x24
 8004ff4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f022 0201 	bic.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 f8c0 	bl	800518c <UART_SetConfig>
 800500c:	4603      	mov	r3, r0
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e022      	b.n	800505c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fb6c 	bl	80056fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	689a      	ldr	r2, [r3, #8]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fbf3 	bl	8005840 <UART_CheckIdleState>
 800505a:	4603      	mov	r3, r0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b08a      	sub	sp, #40	; 0x28
 8005068:	af02      	add	r7, sp, #8
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	603b      	str	r3, [r7, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005078:	2b20      	cmp	r3, #32
 800507a:	f040 8082 	bne.w	8005182 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <HAL_UART_Transmit+0x26>
 8005084:	88fb      	ldrh	r3, [r7, #6]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e07a      	b.n	8005184 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x38>
 8005098:	2302      	movs	r3, #2
 800509a:	e073      	b.n	8005184 <HAL_UART_Transmit+0x120>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	; 0x21
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050b2:	f7fc fc01 	bl	80018b8 <HAL_GetTick>
 80050b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d0:	d108      	bne.n	80050e4 <HAL_UART_Transmit+0x80>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d104      	bne.n	80050e4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	e003      	b.n	80050ec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80050f4:	e02d      	b.n	8005152 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	2200      	movs	r2, #0
 80050fe:	2180      	movs	r1, #128	; 0x80
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 fbe6 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d001      	beq.n	8005110 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e039      	b.n	8005184 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d10b      	bne.n	800512e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	881a      	ldrh	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005122:	b292      	uxth	r2, r2
 8005124:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	3302      	adds	r3, #2
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e008      	b.n	8005140 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	781a      	ldrb	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	b292      	uxth	r2, r2
 8005138:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	3301      	adds	r3, #1
 800513e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005146:	b29b      	uxth	r3, r3
 8005148:	3b01      	subs	r3, #1
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1cb      	bne.n	80050f6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	9300      	str	r3, [sp, #0]
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2200      	movs	r2, #0
 8005166:	2140      	movs	r1, #64	; 0x40
 8005168:	68f8      	ldr	r0, [r7, #12]
 800516a:	f000 fbb2 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e005      	b.n	8005184 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2220      	movs	r2, #32
 800517c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800517e:	2300      	movs	r3, #0
 8005180:	e000      	b.n	8005184 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005182:	2302      	movs	r3, #2
  }
}
 8005184:	4618      	mov	r0, r3
 8005186:	3720      	adds	r7, #32
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800518c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005190:	b08a      	sub	sp, #40	; 0x28
 8005192:	af00      	add	r7, sp, #0
 8005194:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	689a      	ldr	r2, [r3, #8]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4ba4      	ldr	r3, [pc, #656]	; (800544c <UART_SetConfig+0x2c0>)
 80051bc:	4013      	ands	r3, r2
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051c4:	430b      	orrs	r3, r1
 80051c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a99      	ldr	r2, [pc, #612]	; (8005450 <UART_SetConfig+0x2c4>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f4:	4313      	orrs	r3, r2
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a90      	ldr	r2, [pc, #576]	; (8005454 <UART_SetConfig+0x2c8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d126      	bne.n	8005264 <UART_SetConfig+0xd8>
 8005216:	4b90      	ldr	r3, [pc, #576]	; (8005458 <UART_SetConfig+0x2cc>)
 8005218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b03      	cmp	r3, #3
 8005222:	d81b      	bhi.n	800525c <UART_SetConfig+0xd0>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <UART_SetConfig+0xa0>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	0800523d 	.word	0x0800523d
 8005230:	0800524d 	.word	0x0800524d
 8005234:	08005245 	.word	0x08005245
 8005238:	08005255 	.word	0x08005255
 800523c:	2301      	movs	r3, #1
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005242:	e116      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800524a:	e112      	b.n	8005472 <UART_SetConfig+0x2e6>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005252:	e10e      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800525a:	e10a      	b.n	8005472 <UART_SetConfig+0x2e6>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005262:	e106      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a7c      	ldr	r2, [pc, #496]	; (800545c <UART_SetConfig+0x2d0>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d138      	bne.n	80052e0 <UART_SetConfig+0x154>
 800526e:	4b7a      	ldr	r3, [pc, #488]	; (8005458 <UART_SetConfig+0x2cc>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005274:	f003 030c 	and.w	r3, r3, #12
 8005278:	2b0c      	cmp	r3, #12
 800527a:	d82d      	bhi.n	80052d8 <UART_SetConfig+0x14c>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <UART_SetConfig+0xf8>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b9 	.word	0x080052b9
 8005288:	080052d9 	.word	0x080052d9
 800528c:	080052d9 	.word	0x080052d9
 8005290:	080052d9 	.word	0x080052d9
 8005294:	080052c9 	.word	0x080052c9
 8005298:	080052d9 	.word	0x080052d9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052d9 	.word	0x080052d9
 80052a4:	080052c1 	.word	0x080052c1
 80052a8:	080052d9 	.word	0x080052d9
 80052ac:	080052d9 	.word	0x080052d9
 80052b0:	080052d9 	.word	0x080052d9
 80052b4:	080052d1 	.word	0x080052d1
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052be:	e0d8      	b.n	8005472 <UART_SetConfig+0x2e6>
 80052c0:	2302      	movs	r3, #2
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052c6:	e0d4      	b.n	8005472 <UART_SetConfig+0x2e6>
 80052c8:	2304      	movs	r3, #4
 80052ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052ce:	e0d0      	b.n	8005472 <UART_SetConfig+0x2e6>
 80052d0:	2308      	movs	r3, #8
 80052d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052d6:	e0cc      	b.n	8005472 <UART_SetConfig+0x2e6>
 80052d8:	2310      	movs	r3, #16
 80052da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80052de:	e0c8      	b.n	8005472 <UART_SetConfig+0x2e6>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a5e      	ldr	r2, [pc, #376]	; (8005460 <UART_SetConfig+0x2d4>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d125      	bne.n	8005336 <UART_SetConfig+0x1aa>
 80052ea:	4b5b      	ldr	r3, [pc, #364]	; (8005458 <UART_SetConfig+0x2cc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052f4:	2b30      	cmp	r3, #48	; 0x30
 80052f6:	d016      	beq.n	8005326 <UART_SetConfig+0x19a>
 80052f8:	2b30      	cmp	r3, #48	; 0x30
 80052fa:	d818      	bhi.n	800532e <UART_SetConfig+0x1a2>
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d00a      	beq.n	8005316 <UART_SetConfig+0x18a>
 8005300:	2b20      	cmp	r3, #32
 8005302:	d814      	bhi.n	800532e <UART_SetConfig+0x1a2>
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <UART_SetConfig+0x182>
 8005308:	2b10      	cmp	r3, #16
 800530a:	d008      	beq.n	800531e <UART_SetConfig+0x192>
 800530c:	e00f      	b.n	800532e <UART_SetConfig+0x1a2>
 800530e:	2300      	movs	r3, #0
 8005310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005314:	e0ad      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005316:	2302      	movs	r3, #2
 8005318:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800531c:	e0a9      	b.n	8005472 <UART_SetConfig+0x2e6>
 800531e:	2304      	movs	r3, #4
 8005320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005324:	e0a5      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005326:	2308      	movs	r3, #8
 8005328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800532c:	e0a1      	b.n	8005472 <UART_SetConfig+0x2e6>
 800532e:	2310      	movs	r3, #16
 8005330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005334:	e09d      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a4a      	ldr	r2, [pc, #296]	; (8005464 <UART_SetConfig+0x2d8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d125      	bne.n	800538c <UART_SetConfig+0x200>
 8005340:	4b45      	ldr	r3, [pc, #276]	; (8005458 <UART_SetConfig+0x2cc>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800534a:	2bc0      	cmp	r3, #192	; 0xc0
 800534c:	d016      	beq.n	800537c <UART_SetConfig+0x1f0>
 800534e:	2bc0      	cmp	r3, #192	; 0xc0
 8005350:	d818      	bhi.n	8005384 <UART_SetConfig+0x1f8>
 8005352:	2b80      	cmp	r3, #128	; 0x80
 8005354:	d00a      	beq.n	800536c <UART_SetConfig+0x1e0>
 8005356:	2b80      	cmp	r3, #128	; 0x80
 8005358:	d814      	bhi.n	8005384 <UART_SetConfig+0x1f8>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <UART_SetConfig+0x1d8>
 800535e:	2b40      	cmp	r3, #64	; 0x40
 8005360:	d008      	beq.n	8005374 <UART_SetConfig+0x1e8>
 8005362:	e00f      	b.n	8005384 <UART_SetConfig+0x1f8>
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800536a:	e082      	b.n	8005472 <UART_SetConfig+0x2e6>
 800536c:	2302      	movs	r3, #2
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005372:	e07e      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005374:	2304      	movs	r3, #4
 8005376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800537a:	e07a      	b.n	8005472 <UART_SetConfig+0x2e6>
 800537c:	2308      	movs	r3, #8
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005382:	e076      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800538a:	e072      	b.n	8005472 <UART_SetConfig+0x2e6>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a35      	ldr	r2, [pc, #212]	; (8005468 <UART_SetConfig+0x2dc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d12a      	bne.n	80053ec <UART_SetConfig+0x260>
 8005396:	4b30      	ldr	r3, [pc, #192]	; (8005458 <UART_SetConfig+0x2cc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053a4:	d01a      	beq.n	80053dc <UART_SetConfig+0x250>
 80053a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053aa:	d81b      	bhi.n	80053e4 <UART_SetConfig+0x258>
 80053ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b0:	d00c      	beq.n	80053cc <UART_SetConfig+0x240>
 80053b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053b6:	d815      	bhi.n	80053e4 <UART_SetConfig+0x258>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <UART_SetConfig+0x238>
 80053bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053c0:	d008      	beq.n	80053d4 <UART_SetConfig+0x248>
 80053c2:	e00f      	b.n	80053e4 <UART_SetConfig+0x258>
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ca:	e052      	b.n	8005472 <UART_SetConfig+0x2e6>
 80053cc:	2302      	movs	r3, #2
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d2:	e04e      	b.n	8005472 <UART_SetConfig+0x2e6>
 80053d4:	2304      	movs	r3, #4
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053da:	e04a      	b.n	8005472 <UART_SetConfig+0x2e6>
 80053dc:	2308      	movs	r3, #8
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053e2:	e046      	b.n	8005472 <UART_SetConfig+0x2e6>
 80053e4:	2310      	movs	r3, #16
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ea:	e042      	b.n	8005472 <UART_SetConfig+0x2e6>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a17      	ldr	r2, [pc, #92]	; (8005450 <UART_SetConfig+0x2c4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d13a      	bne.n	800546c <UART_SetConfig+0x2e0>
 80053f6:	4b18      	ldr	r3, [pc, #96]	; (8005458 <UART_SetConfig+0x2cc>)
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005404:	d01a      	beq.n	800543c <UART_SetConfig+0x2b0>
 8005406:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800540a:	d81b      	bhi.n	8005444 <UART_SetConfig+0x2b8>
 800540c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005410:	d00c      	beq.n	800542c <UART_SetConfig+0x2a0>
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d815      	bhi.n	8005444 <UART_SetConfig+0x2b8>
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <UART_SetConfig+0x298>
 800541c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005420:	d008      	beq.n	8005434 <UART_SetConfig+0x2a8>
 8005422:	e00f      	b.n	8005444 <UART_SetConfig+0x2b8>
 8005424:	2300      	movs	r3, #0
 8005426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542a:	e022      	b.n	8005472 <UART_SetConfig+0x2e6>
 800542c:	2302      	movs	r3, #2
 800542e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005432:	e01e      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005434:	2304      	movs	r3, #4
 8005436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800543a:	e01a      	b.n	8005472 <UART_SetConfig+0x2e6>
 800543c:	2308      	movs	r3, #8
 800543e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005442:	e016      	b.n	8005472 <UART_SetConfig+0x2e6>
 8005444:	2310      	movs	r3, #16
 8005446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800544a:	e012      	b.n	8005472 <UART_SetConfig+0x2e6>
 800544c:	efff69f3 	.word	0xefff69f3
 8005450:	40008000 	.word	0x40008000
 8005454:	40013800 	.word	0x40013800
 8005458:	40021000 	.word	0x40021000
 800545c:	40004400 	.word	0x40004400
 8005460:	40004800 	.word	0x40004800
 8005464:	40004c00 	.word	0x40004c00
 8005468:	40005000 	.word	0x40005000
 800546c:	2310      	movs	r3, #16
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a9f      	ldr	r2, [pc, #636]	; (80056f4 <UART_SetConfig+0x568>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d17a      	bne.n	8005572 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005480:	2b08      	cmp	r3, #8
 8005482:	d824      	bhi.n	80054ce <UART_SetConfig+0x342>
 8005484:	a201      	add	r2, pc, #4	; (adr r2, 800548c <UART_SetConfig+0x300>)
 8005486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548a:	bf00      	nop
 800548c:	080054b1 	.word	0x080054b1
 8005490:	080054cf 	.word	0x080054cf
 8005494:	080054b9 	.word	0x080054b9
 8005498:	080054cf 	.word	0x080054cf
 800549c:	080054bf 	.word	0x080054bf
 80054a0:	080054cf 	.word	0x080054cf
 80054a4:	080054cf 	.word	0x080054cf
 80054a8:	080054cf 	.word	0x080054cf
 80054ac:	080054c7 	.word	0x080054c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054b0:	f7fd faa2 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80054b4:	61f8      	str	r0, [r7, #28]
        break;
 80054b6:	e010      	b.n	80054da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b8:	4b8f      	ldr	r3, [pc, #572]	; (80056f8 <UART_SetConfig+0x56c>)
 80054ba:	61fb      	str	r3, [r7, #28]
        break;
 80054bc:	e00d      	b.n	80054da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054be:	f7fd fa03 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 80054c2:	61f8      	str	r0, [r7, #28]
        break;
 80054c4:	e009      	b.n	80054da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ca:	61fb      	str	r3, [r7, #28]
        break;
 80054cc:	e005      	b.n	80054da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80054ce:	2300      	movs	r3, #0
 80054d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80054d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80fb 	beq.w	80056d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	4413      	add	r3, r2
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d305      	bcc.n	80054fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d903      	bls.n	8005506 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005504:	e0e8      	b.n	80056d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	2200      	movs	r2, #0
 800550a:	461c      	mov	r4, r3
 800550c:	4615      	mov	r5, r2
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	022b      	lsls	r3, r5, #8
 8005518:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800551c:	0222      	lsls	r2, r4, #8
 800551e:	68f9      	ldr	r1, [r7, #12]
 8005520:	6849      	ldr	r1, [r1, #4]
 8005522:	0849      	lsrs	r1, r1, #1
 8005524:	2000      	movs	r0, #0
 8005526:	4688      	mov	r8, r1
 8005528:	4681      	mov	r9, r0
 800552a:	eb12 0a08 	adds.w	sl, r2, r8
 800552e:	eb43 0b09 	adc.w	fp, r3, r9
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	603b      	str	r3, [r7, #0]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	f7fa fe44 	bl	80001d0 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005556:	d308      	bcc.n	800556a <UART_SetConfig+0x3de>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800555e:	d204      	bcs.n	800556a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	60da      	str	r2, [r3, #12]
 8005568:	e0b6      	b.n	80056d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005570:	e0b2      	b.n	80056d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557a:	d15e      	bne.n	800563a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800557c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005580:	2b08      	cmp	r3, #8
 8005582:	d828      	bhi.n	80055d6 <UART_SetConfig+0x44a>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x400>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055b9 	.word	0x080055b9
 8005594:	080055c1 	.word	0x080055c1
 8005598:	080055d7 	.word	0x080055d7
 800559c:	080055c7 	.word	0x080055c7
 80055a0:	080055d7 	.word	0x080055d7
 80055a4:	080055d7 	.word	0x080055d7
 80055a8:	080055d7 	.word	0x080055d7
 80055ac:	080055cf 	.word	0x080055cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fd fa22 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 80055b4:	61f8      	str	r0, [r7, #28]
        break;
 80055b6:	e014      	b.n	80055e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055b8:	f7fd fa34 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 80055bc:	61f8      	str	r0, [r7, #28]
        break;
 80055be:	e010      	b.n	80055e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055c0:	4b4d      	ldr	r3, [pc, #308]	; (80056f8 <UART_SetConfig+0x56c>)
 80055c2:	61fb      	str	r3, [r7, #28]
        break;
 80055c4:	e00d      	b.n	80055e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055c6:	f7fd f97f 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 80055ca:	61f8      	str	r0, [r7, #28]
        break;
 80055cc:	e009      	b.n	80055e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055d2:	61fb      	str	r3, [r7, #28]
        break;
 80055d4:	e005      	b.n	80055e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80055d6:	2300      	movs	r3, #0
 80055d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d077      	beq.n	80056d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005a      	lsls	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	085b      	lsrs	r3, r3, #1
 80055f2:	441a      	add	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	2b0f      	cmp	r3, #15
 8005602:	d916      	bls.n	8005632 <UART_SetConfig+0x4a6>
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800560a:	d212      	bcs.n	8005632 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	b29b      	uxth	r3, r3
 8005610:	f023 030f 	bic.w	r3, r3, #15
 8005614:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	085b      	lsrs	r3, r3, #1
 800561a:	b29b      	uxth	r3, r3
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	b29a      	uxth	r2, r3
 8005622:	8afb      	ldrh	r3, [r7, #22]
 8005624:	4313      	orrs	r3, r2
 8005626:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	8afa      	ldrh	r2, [r7, #22]
 800562e:	60da      	str	r2, [r3, #12]
 8005630:	e052      	b.n	80056d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005638:	e04e      	b.n	80056d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800563a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800563e:	2b08      	cmp	r3, #8
 8005640:	d827      	bhi.n	8005692 <UART_SetConfig+0x506>
 8005642:	a201      	add	r2, pc, #4	; (adr r2, 8005648 <UART_SetConfig+0x4bc>)
 8005644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005648:	0800566d 	.word	0x0800566d
 800564c:	08005675 	.word	0x08005675
 8005650:	0800567d 	.word	0x0800567d
 8005654:	08005693 	.word	0x08005693
 8005658:	08005683 	.word	0x08005683
 800565c:	08005693 	.word	0x08005693
 8005660:	08005693 	.word	0x08005693
 8005664:	08005693 	.word	0x08005693
 8005668:	0800568b 	.word	0x0800568b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800566c:	f7fd f9c4 	bl	80029f8 <HAL_RCC_GetPCLK1Freq>
 8005670:	61f8      	str	r0, [r7, #28]
        break;
 8005672:	e014      	b.n	800569e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005674:	f7fd f9d6 	bl	8002a24 <HAL_RCC_GetPCLK2Freq>
 8005678:	61f8      	str	r0, [r7, #28]
        break;
 800567a:	e010      	b.n	800569e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800567c:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <UART_SetConfig+0x56c>)
 800567e:	61fb      	str	r3, [r7, #28]
        break;
 8005680:	e00d      	b.n	800569e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005682:	f7fd f921 	bl	80028c8 <HAL_RCC_GetSysClockFreq>
 8005686:	61f8      	str	r0, [r7, #28]
        break;
 8005688:	e009      	b.n	800569e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	61fb      	str	r3, [r7, #28]
        break;
 8005690:	e005      	b.n	800569e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800569c:	bf00      	nop
    }

    if (pclk != 0U)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d019      	beq.n	80056d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	085a      	lsrs	r2, r3, #1
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	441a      	add	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	2b0f      	cmp	r3, #15
 80056bc:	d909      	bls.n	80056d2 <UART_SetConfig+0x546>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c4:	d205      	bcs.n	80056d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
 80056d0:	e002      	b.n	80056d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80056e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3728      	adds	r7, #40	; 0x28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056f2:	bf00      	nop
 80056f4:	40008000 	.word	0x40008000
 80056f8:	00f42400 	.word	0x00f42400

080056fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00a      	beq.n	8005748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00a      	beq.n	800576a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00a      	beq.n	800578c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	430a      	orrs	r2, r1
 800578a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00a      	beq.n	80057ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00a      	beq.n	80057d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d01a      	beq.n	8005812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fa:	d10a      	bne.n	8005812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af02      	add	r7, sp, #8
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005850:	f7fc f832 	bl	80018b8 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0308 	and.w	r3, r3, #8
 8005860:	2b08      	cmp	r3, #8
 8005862:	d10e      	bne.n	8005882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2200      	movs	r2, #0
 800586e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f82d 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e023      	b.n	80058ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d10e      	bne.n	80058ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f817 	bl	80058d2 <UART_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	e00d      	b.n	80058ca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b09c      	sub	sp, #112	; 0x70
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	60f8      	str	r0, [r7, #12]
 80058da:	60b9      	str	r1, [r7, #8]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e2:	e0a5      	b.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ea:	f000 80a1 	beq.w	8005a30 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ee:	f7fb ffe3 	bl	80018b8 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d302      	bcc.n	8005904 <UART_WaitOnFlagUntilTimeout+0x32>
 80058fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005900:	2b00      	cmp	r3, #0
 8005902:	d13e      	bne.n	8005982 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800590c:	e853 3f00 	ldrex	r3, [r3]
 8005910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005918:	667b      	str	r3, [r7, #100]	; 0x64
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005924:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e6      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	3308      	adds	r3, #8
 800593c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	663b      	str	r3, [r7, #96]	; 0x60
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3308      	adds	r3, #8
 8005954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005956:	64ba      	str	r2, [r7, #72]	; 0x48
 8005958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800595c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800595e:	e841 2300 	strex	r3, r2, [r1]
 8005962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1e5      	bne.n	8005936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2220      	movs	r2, #32
 800596e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2220      	movs	r2, #32
 8005974:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e067      	b.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d04f      	beq.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	69db      	ldr	r3, [r3, #28]
 8005996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800599a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800599e:	d147      	bne.n	8005a30 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	461a      	mov	r2, r3
 80059c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059c8:	637b      	str	r3, [r7, #52]	; 0x34
 80059ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e6      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3308      	adds	r3, #8
 80059e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	613b      	str	r3, [r7, #16]
   return(result);
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f023 0301 	bic.w	r3, r3, #1
 80059f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	3308      	adds	r3, #8
 80059fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059fc:	623a      	str	r2, [r7, #32]
 80059fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	69f9      	ldr	r1, [r7, #28]
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e010      	b.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69da      	ldr	r2, [r3, #28]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	4013      	ands	r3, r2
 8005a3a:	68ba      	ldr	r2, [r7, #8]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	461a      	mov	r2, r3
 8005a48:	79fb      	ldrb	r3, [r7, #7]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	f43f af4a 	beq.w	80058e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3770      	adds	r7, #112	; 0x70
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a5e:	f000 fa95 	bl	8005f8c <vTaskStartScheduler>
  
  return osOK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f103 0208 	add.w	r2, r3, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f103 0208 	add.w	r2, r3, #8
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f103 0208 	add.w	r2, r3, #8
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b085      	sub	sp, #20
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	683a      	ldr	r2, [r7, #0]
 8005aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	1c5a      	adds	r2, r3, #1
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	601a      	str	r2, [r3, #0]
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b085      	sub	sp, #20
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b20:	d103      	bne.n	8005b2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	e00c      	b.n	8005b44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3308      	adds	r3, #8
 8005b2e:	60fb      	str	r3, [r7, #12]
 8005b30:	e002      	b.n	8005b38 <vListInsert+0x2e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d2f6      	bcs.n	8005b32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	683a      	ldr	r2, [r7, #0]
 8005b5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	601a      	str	r2, [r3, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6892      	ldr	r2, [r2, #8]
 8005b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6852      	ldr	r2, [r2, #4]
 8005b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d103      	bne.n	8005bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	689a      	ldr	r2, [r3, #8]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	1e5a      	subs	r2, r3, #1
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08e      	sub	sp, #56	; 0x38
 8005bd4:	af04      	add	r7, sp, #16
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bf6:	bf00      	nop
 8005bf8:	e7fe      	b.n	8005bf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10a      	bne.n	8005c16 <xTaskCreateStatic+0x46>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	61fb      	str	r3, [r7, #28]
}
 8005c12:	bf00      	nop
 8005c14:	e7fe      	b.n	8005c14 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c16:	23b4      	movs	r3, #180	; 0xb4
 8005c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2bb4      	cmp	r3, #180	; 0xb4
 8005c1e:	d00a      	beq.n	8005c36 <xTaskCreateStatic+0x66>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61bb      	str	r3, [r7, #24]
}
 8005c32:	bf00      	nop
 8005c34:	e7fe      	b.n	8005c34 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d01e      	beq.n	8005c7c <xTaskCreateStatic+0xac>
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01b      	beq.n	8005c7c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	2202      	movs	r2, #2
 8005c52:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c56:	2300      	movs	r3, #0
 8005c58:	9303      	str	r3, [sp, #12]
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5c:	9302      	str	r3, [sp, #8]
 8005c5e:	f107 0314 	add.w	r3, r7, #20
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f850 	bl	8005d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c76:	f000 f8eb 	bl	8005e50 <prvAddNewTaskToReadyList>
 8005c7a:	e001      	b.n	8005c80 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005c80:	697b      	ldr	r3, [r7, #20]
	}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3728      	adds	r7, #40	; 0x28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c8a:	b580      	push	{r7, lr}
 8005c8c:	b08c      	sub	sp, #48	; 0x30
 8005c8e:	af04      	add	r7, sp, #16
 8005c90:	60f8      	str	r0, [r7, #12]
 8005c92:	60b9      	str	r1, [r7, #8]
 8005c94:	603b      	str	r3, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c9a:	88fb      	ldrh	r3, [r7, #6]
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 fef2 	bl	8006a88 <pvPortMalloc>
 8005ca4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00e      	beq.n	8005cca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cac:	20b4      	movs	r0, #180	; 0xb4
 8005cae:	f000 feeb 	bl	8006a88 <pvPortMalloc>
 8005cb2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc0:	e005      	b.n	8005cce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cc2:	6978      	ldr	r0, [r7, #20]
 8005cc4:	f000 ffac 	bl	8006c20 <vPortFree>
 8005cc8:	e001      	b.n	8005cce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d017      	beq.n	8005d04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9303      	str	r3, [sp, #12]
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	9302      	str	r3, [sp, #8]
 8005ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	68f8      	ldr	r0, [r7, #12]
 8005cf4:	f000 f80e 	bl	8005d14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cf8:	69f8      	ldr	r0, [r7, #28]
 8005cfa:	f000 f8a9 	bl	8005e50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	61bb      	str	r3, [r7, #24]
 8005d02:	e002      	b.n	8005d0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d04:	f04f 33ff 	mov.w	r3, #4294967295
 8005d08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3720      	adds	r7, #32
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]
 8005d20:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	617b      	str	r3, [r7, #20]
}
 8005d58:	bf00      	nop
 8005d5a:	e7fe      	b.n	8005d5a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d01f      	beq.n	8005da2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	61fb      	str	r3, [r7, #28]
 8005d66:	e012      	b.n	8005d8e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	7819      	ldrb	r1, [r3, #0]
 8005d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	4413      	add	r3, r2
 8005d76:	3334      	adds	r3, #52	; 0x34
 8005d78:	460a      	mov	r2, r1
 8005d7a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d7c:	68ba      	ldr	r2, [r7, #8]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	4413      	add	r3, r2
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b0f      	cmp	r3, #15
 8005d92:	d9e9      	bls.n	8005d68 <prvInitialiseNewTask+0x54>
 8005d94:	e000      	b.n	8005d98 <prvInitialiseNewTask+0x84>
			{
				break;
 8005d96:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da0:	e003      	b.n	8005daa <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dac:	2b06      	cmp	r3, #6
 8005dae:	d901      	bls.n	8005db4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005db0:	2306      	movs	r3, #6
 8005db2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005db8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dbe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fe6c 	bl	8005aa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7ff fe67 	bl	8005aa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dde:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	f1c3 0207 	rsb	r2, r3, #7
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e02:	334c      	adds	r3, #76	; 0x4c
 8005e04:	2260      	movs	r2, #96	; 0x60
 8005e06:	2100      	movs	r1, #0
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 f84d 	bl	8006ea8 <memset>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <prvInitialiseNewTask+0x130>)
 8005e12:	651a      	str	r2, [r3, #80]	; 0x50
 8005e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e16:	4a0c      	ldr	r2, [pc, #48]	; (8005e48 <prvInitialiseNewTask+0x134>)
 8005e18:	655a      	str	r2, [r3, #84]	; 0x54
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	4a0b      	ldr	r2, [pc, #44]	; (8005e4c <prvInitialiseNewTask+0x138>)
 8005e1e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68f9      	ldr	r1, [r7, #12]
 8005e24:	69b8      	ldr	r0, [r7, #24]
 8005e26:	f000 fc1f 	bl	8006668 <pxPortInitialiseStack>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e3a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e3c:	bf00      	nop
 8005e3e:	3720      	adds	r7, #32
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	080071e4 	.word	0x080071e4
 8005e48:	08007204 	.word	0x08007204
 8005e4c:	080071c4 	.word	0x080071c4

08005e50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e58:	f000 fd34 	bl	80068c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e5c:	4b2a      	ldr	r3, [pc, #168]	; (8005f08 <prvAddNewTaskToReadyList+0xb8>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	4a29      	ldr	r2, [pc, #164]	; (8005f08 <prvAddNewTaskToReadyList+0xb8>)
 8005e64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e66:	4b29      	ldr	r3, [pc, #164]	; (8005f0c <prvAddNewTaskToReadyList+0xbc>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d109      	bne.n	8005e82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e6e:	4a27      	ldr	r2, [pc, #156]	; (8005f0c <prvAddNewTaskToReadyList+0xbc>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e74:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <prvAddNewTaskToReadyList+0xb8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d110      	bne.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e7c:	f000 facc 	bl	8006418 <prvInitialiseTaskLists>
 8005e80:	e00d      	b.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e82:	4b23      	ldr	r3, [pc, #140]	; (8005f10 <prvAddNewTaskToReadyList+0xc0>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d109      	bne.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e8a:	4b20      	ldr	r3, [pc, #128]	; (8005f0c <prvAddNewTaskToReadyList+0xbc>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d802      	bhi.n	8005e9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <prvAddNewTaskToReadyList+0xbc>)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e9e:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <prvAddNewTaskToReadyList+0xc4>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	4a1b      	ldr	r2, [pc, #108]	; (8005f14 <prvAddNewTaskToReadyList+0xc4>)
 8005ea6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	2201      	movs	r2, #1
 8005eae:	409a      	lsls	r2, r3
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	4a18      	ldr	r2, [pc, #96]	; (8005f18 <prvAddNewTaskToReadyList+0xc8>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a15      	ldr	r2, [pc, #84]	; (8005f1c <prvAddNewTaskToReadyList+0xcc>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7ff fdf6 	bl	8005ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ed6:	f000 fd25 	bl	8006924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005eda:	4b0d      	ldr	r3, [pc, #52]	; (8005f10 <prvAddNewTaskToReadyList+0xc0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00e      	beq.n	8005f00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ee2:	4b0a      	ldr	r3, [pc, #40]	; (8005f0c <prvAddNewTaskToReadyList+0xbc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d207      	bcs.n	8005f00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ef0:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <prvAddNewTaskToReadyList+0xd0>)
 8005ef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f00:	bf00      	nop
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	200005ec 	.word	0x200005ec
 8005f0c:	200004ec 	.word	0x200004ec
 8005f10:	200005f8 	.word	0x200005f8
 8005f14:	20000608 	.word	0x20000608
 8005f18:	200005f4 	.word	0x200005f4
 8005f1c:	200004f0 	.word	0x200004f0
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d017      	beq.n	8005f66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <vTaskDelay+0x60>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <vTaskDelay+0x30>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	f383 8811 	msr	BASEPRI, r3
 8005f46:	f3bf 8f6f 	isb	sy
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	60bb      	str	r3, [r7, #8]
}
 8005f50:	bf00      	nop
 8005f52:	e7fe      	b.n	8005f52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f54:	f000 f884 	bl	8006060 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f58:	2100      	movs	r1, #0
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fb1e 	bl	800659c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f60:	f000 f88c 	bl	800607c <xTaskResumeAll>
 8005f64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d107      	bne.n	8005f7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <vTaskDelay+0x64>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	f3bf 8f4f 	dsb	sy
 8005f78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000614 	.word	0x20000614
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b08a      	sub	sp, #40	; 0x28
 8005f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	1d39      	adds	r1, r7, #4
 8005f9e:	f107 0308 	add.w	r3, r7, #8
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fa fb52 	bl	800064c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	9202      	str	r2, [sp, #8]
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	460a      	mov	r2, r1
 8005fba:	4921      	ldr	r1, [pc, #132]	; (8006040 <vTaskStartScheduler+0xb4>)
 8005fbc:	4821      	ldr	r0, [pc, #132]	; (8006044 <vTaskStartScheduler+0xb8>)
 8005fbe:	f7ff fe07 	bl	8005bd0 <xTaskCreateStatic>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	4a20      	ldr	r2, [pc, #128]	; (8006048 <vTaskStartScheduler+0xbc>)
 8005fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005fc8:	4b1f      	ldr	r3, [pc, #124]	; (8006048 <vTaskStartScheduler+0xbc>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e001      	b.n	8005fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d11b      	bne.n	8006018 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
 8005fec:	f3bf 8f4f 	dsb	sy
 8005ff0:	613b      	str	r3, [r7, #16]
}
 8005ff2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ff4:	4b15      	ldr	r3, [pc, #84]	; (800604c <vTaskStartScheduler+0xc0>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	334c      	adds	r3, #76	; 0x4c
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <vTaskStartScheduler+0xc4>)
 8005ffc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005ffe:	4b15      	ldr	r3, [pc, #84]	; (8006054 <vTaskStartScheduler+0xc8>)
 8006000:	f04f 32ff 	mov.w	r2, #4294967295
 8006004:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <vTaskStartScheduler+0xcc>)
 8006008:	2201      	movs	r2, #1
 800600a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800600c:	4b13      	ldr	r3, [pc, #76]	; (800605c <vTaskStartScheduler+0xd0>)
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006012:	f000 fbb5 	bl	8006780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006016:	e00e      	b.n	8006036 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	d10a      	bne.n	8006036 <vTaskStartScheduler+0xaa>
	__asm volatile
 8006020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006024:	f383 8811 	msr	BASEPRI, r3
 8006028:	f3bf 8f6f 	isb	sy
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	60fb      	str	r3, [r7, #12]
}
 8006032:	bf00      	nop
 8006034:	e7fe      	b.n	8006034 <vTaskStartScheduler+0xa8>
}
 8006036:	bf00      	nop
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	08007164 	.word	0x08007164
 8006044:	080063e9 	.word	0x080063e9
 8006048:	20000610 	.word	0x20000610
 800604c:	200004ec 	.word	0x200004ec
 8006050:	20000010 	.word	0x20000010
 8006054:	2000060c 	.word	0x2000060c
 8006058:	200005f8 	.word	0x200005f8
 800605c:	200005f0 	.word	0x200005f0

08006060 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <vTaskSuspendAll+0x18>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	4a03      	ldr	r2, [pc, #12]	; (8006078 <vTaskSuspendAll+0x18>)
 800606c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800606e:	bf00      	nop
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	20000614 	.word	0x20000614

0800607c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800608a:	4b41      	ldr	r3, [pc, #260]	; (8006190 <xTaskResumeAll+0x114>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	603b      	str	r3, [r7, #0]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060a8:	f000 fc0c 	bl	80068c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ac:	4b38      	ldr	r3, [pc, #224]	; (8006190 <xTaskResumeAll+0x114>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	4a37      	ldr	r2, [pc, #220]	; (8006190 <xTaskResumeAll+0x114>)
 80060b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <xTaskResumeAll+0x114>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d161      	bne.n	8006182 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060be:	4b35      	ldr	r3, [pc, #212]	; (8006194 <xTaskResumeAll+0x118>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d05d      	beq.n	8006182 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060c6:	e02e      	b.n	8006126 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060c8:	4b33      	ldr	r3, [pc, #204]	; (8006198 <xTaskResumeAll+0x11c>)
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3318      	adds	r3, #24
 80060d4:	4618      	mov	r0, r3
 80060d6:	f7ff fd51 	bl	8005b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	3304      	adds	r3, #4
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff fd4c 	bl	8005b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	4b2b      	ldr	r3, [pc, #172]	; (800619c <xTaskResumeAll+0x120>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	4a2a      	ldr	r2, [pc, #168]	; (800619c <xTaskResumeAll+0x120>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a27      	ldr	r2, [pc, #156]	; (80061a0 <xTaskResumeAll+0x124>)
 8006104:	441a      	add	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7ff fcd8 	bl	8005ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4b23      	ldr	r3, [pc, #140]	; (80061a4 <xTaskResumeAll+0x128>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d302      	bcc.n	8006126 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006120:	4b21      	ldr	r3, [pc, #132]	; (80061a8 <xTaskResumeAll+0x12c>)
 8006122:	2201      	movs	r2, #1
 8006124:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <xTaskResumeAll+0x11c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1cc      	bne.n	80060c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006134:	f000 fa12 	bl	800655c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006138:	4b1c      	ldr	r3, [pc, #112]	; (80061ac <xTaskResumeAll+0x130>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d010      	beq.n	8006166 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006144:	f000 f836 	bl	80061b4 <xTaskIncrementTick>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800614e:	4b16      	ldr	r3, [pc, #88]	; (80061a8 <xTaskResumeAll+0x12c>)
 8006150:	2201      	movs	r2, #1
 8006152:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3b01      	subs	r3, #1
 8006158:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1f1      	bne.n	8006144 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006160:	4b12      	ldr	r3, [pc, #72]	; (80061ac <xTaskResumeAll+0x130>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <xTaskResumeAll+0x12c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800616e:	2301      	movs	r3, #1
 8006170:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006172:	4b0f      	ldr	r3, [pc, #60]	; (80061b0 <xTaskResumeAll+0x134>)
 8006174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	f3bf 8f4f 	dsb	sy
 800617e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006182:	f000 fbcf 	bl	8006924 <vPortExitCritical>

	return xAlreadyYielded;
 8006186:	68bb      	ldr	r3, [r7, #8]
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000614 	.word	0x20000614
 8006194:	200005ec 	.word	0x200005ec
 8006198:	200005ac 	.word	0x200005ac
 800619c:	200005f4 	.word	0x200005f4
 80061a0:	200004f0 	.word	0x200004f0
 80061a4:	200004ec 	.word	0x200004ec
 80061a8:	20000600 	.word	0x20000600
 80061ac:	200005fc 	.word	0x200005fc
 80061b0:	e000ed04 	.word	0xe000ed04

080061b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061be:	4b4e      	ldr	r3, [pc, #312]	; (80062f8 <xTaskIncrementTick+0x144>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f040 808e 	bne.w	80062e4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061c8:	4b4c      	ldr	r3, [pc, #304]	; (80062fc <xTaskIncrementTick+0x148>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061d0:	4a4a      	ldr	r2, [pc, #296]	; (80062fc <xTaskIncrementTick+0x148>)
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d120      	bne.n	800621e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80061dc:	4b48      	ldr	r3, [pc, #288]	; (8006300 <xTaskIncrementTick+0x14c>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00a      	beq.n	80061fc <xTaskIncrementTick+0x48>
	__asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	603b      	str	r3, [r7, #0]
}
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xTaskIncrementTick+0x46>
 80061fc:	4b40      	ldr	r3, [pc, #256]	; (8006300 <xTaskIncrementTick+0x14c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	4b40      	ldr	r3, [pc, #256]	; (8006304 <xTaskIncrementTick+0x150>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3e      	ldr	r2, [pc, #248]	; (8006300 <xTaskIncrementTick+0x14c>)
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4a3e      	ldr	r2, [pc, #248]	; (8006304 <xTaskIncrementTick+0x150>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	4b3d      	ldr	r3, [pc, #244]	; (8006308 <xTaskIncrementTick+0x154>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	3301      	adds	r3, #1
 8006216:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <xTaskIncrementTick+0x154>)
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	f000 f99f 	bl	800655c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800621e:	4b3b      	ldr	r3, [pc, #236]	; (800630c <xTaskIncrementTick+0x158>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	429a      	cmp	r2, r3
 8006226:	d348      	bcc.n	80062ba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006228:	4b35      	ldr	r3, [pc, #212]	; (8006300 <xTaskIncrementTick+0x14c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d104      	bne.n	800623c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006232:	4b36      	ldr	r3, [pc, #216]	; (800630c <xTaskIncrementTick+0x158>)
 8006234:	f04f 32ff 	mov.w	r2, #4294967295
 8006238:	601a      	str	r2, [r3, #0]
					break;
 800623a:	e03e      	b.n	80062ba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623c:	4b30      	ldr	r3, [pc, #192]	; (8006300 <xTaskIncrementTick+0x14c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	429a      	cmp	r2, r3
 8006252:	d203      	bcs.n	800625c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006254:	4a2d      	ldr	r2, [pc, #180]	; (800630c <xTaskIncrementTick+0x158>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800625a:	e02e      	b.n	80062ba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	3304      	adds	r3, #4
 8006260:	4618      	mov	r0, r3
 8006262:	f7ff fc8b 	bl	8005b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	2b00      	cmp	r3, #0
 800626c:	d004      	beq.n	8006278 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	3318      	adds	r3, #24
 8006272:	4618      	mov	r0, r3
 8006274:	f7ff fc82 	bl	8005b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	2201      	movs	r2, #1
 800627e:	409a      	lsls	r2, r3
 8006280:	4b23      	ldr	r3, [pc, #140]	; (8006310 <xTaskIncrementTick+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4313      	orrs	r3, r2
 8006286:	4a22      	ldr	r2, [pc, #136]	; (8006310 <xTaskIncrementTick+0x15c>)
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628e:	4613      	mov	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4413      	add	r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	4a1f      	ldr	r2, [pc, #124]	; (8006314 <xTaskIncrementTick+0x160>)
 8006298:	441a      	add	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	3304      	adds	r3, #4
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7ff fc0e 	bl	8005ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	4b1b      	ldr	r3, [pc, #108]	; (8006318 <xTaskIncrementTick+0x164>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d3b9      	bcc.n	8006228 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80062b4:	2301      	movs	r3, #1
 80062b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b8:	e7b6      	b.n	8006228 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <xTaskIncrementTick+0x164>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062c0:	4914      	ldr	r1, [pc, #80]	; (8006314 <xTaskIncrementTick+0x160>)
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d901      	bls.n	80062d6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80062d2:	2301      	movs	r3, #1
 80062d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062d6:	4b11      	ldr	r3, [pc, #68]	; (800631c <xTaskIncrementTick+0x168>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d007      	beq.n	80062ee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80062de:	2301      	movs	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	e004      	b.n	80062ee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062e4:	4b0e      	ldr	r3, [pc, #56]	; (8006320 <xTaskIncrementTick+0x16c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	4a0d      	ldr	r2, [pc, #52]	; (8006320 <xTaskIncrementTick+0x16c>)
 80062ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062ee:	697b      	ldr	r3, [r7, #20]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3718      	adds	r7, #24
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	20000614 	.word	0x20000614
 80062fc:	200005f0 	.word	0x200005f0
 8006300:	200005a4 	.word	0x200005a4
 8006304:	200005a8 	.word	0x200005a8
 8006308:	20000604 	.word	0x20000604
 800630c:	2000060c 	.word	0x2000060c
 8006310:	200005f4 	.word	0x200005f4
 8006314:	200004f0 	.word	0x200004f0
 8006318:	200004ec 	.word	0x200004ec
 800631c:	20000600 	.word	0x20000600
 8006320:	200005fc 	.word	0x200005fc

08006324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800632a:	4b29      	ldr	r3, [pc, #164]	; (80063d0 <vTaskSwitchContext+0xac>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006332:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <vTaskSwitchContext+0xb0>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006338:	e044      	b.n	80063c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800633a:	4b26      	ldr	r3, [pc, #152]	; (80063d4 <vTaskSwitchContext+0xb0>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	4b25      	ldr	r3, [pc, #148]	; (80063d8 <vTaskSwitchContext+0xb4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800634e:	7afb      	ldrb	r3, [r7, #11]
 8006350:	f1c3 031f 	rsb	r3, r3, #31
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	4921      	ldr	r1, [pc, #132]	; (80063dc <vTaskSwitchContext+0xb8>)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <vTaskSwitchContext+0x5c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	607b      	str	r3, [r7, #4]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <vTaskSwitchContext+0x5a>
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a14      	ldr	r2, [pc, #80]	; (80063dc <vTaskSwitchContext+0xb8>)
 800638c:	4413      	add	r3, r2
 800638e:	613b      	str	r3, [r7, #16]
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	605a      	str	r2, [r3, #4]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	3308      	adds	r3, #8
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d104      	bne.n	80063b0 <vTaskSwitchContext+0x8c>
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	605a      	str	r2, [r3, #4]
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	4a0a      	ldr	r2, [pc, #40]	; (80063e0 <vTaskSwitchContext+0xbc>)
 80063b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80063ba:	4b09      	ldr	r3, [pc, #36]	; (80063e0 <vTaskSwitchContext+0xbc>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	334c      	adds	r3, #76	; 0x4c
 80063c0:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <vTaskSwitchContext+0xc0>)
 80063c2:	6013      	str	r3, [r2, #0]
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	20000614 	.word	0x20000614
 80063d4:	20000600 	.word	0x20000600
 80063d8:	200005f4 	.word	0x200005f4
 80063dc:	200004f0 	.word	0x200004f0
 80063e0:	200004ec 	.word	0x200004ec
 80063e4:	20000010 	.word	0x20000010

080063e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063f0:	f000 f852 	bl	8006498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063f4:	4b06      	ldr	r3, [pc, #24]	; (8006410 <prvIdleTask+0x28>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d9f9      	bls.n	80063f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063fc:	4b05      	ldr	r3, [pc, #20]	; (8006414 <prvIdleTask+0x2c>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800640c:	e7f0      	b.n	80063f0 <prvIdleTask+0x8>
 800640e:	bf00      	nop
 8006410:	200004f0 	.word	0x200004f0
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800641e:	2300      	movs	r3, #0
 8006420:	607b      	str	r3, [r7, #4]
 8006422:	e00c      	b.n	800643e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a12      	ldr	r2, [pc, #72]	; (8006478 <prvInitialiseTaskLists+0x60>)
 8006430:	4413      	add	r3, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff fb18 	bl	8005a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3301      	adds	r3, #1
 800643c:	607b      	str	r3, [r7, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2b06      	cmp	r3, #6
 8006442:	d9ef      	bls.n	8006424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006444:	480d      	ldr	r0, [pc, #52]	; (800647c <prvInitialiseTaskLists+0x64>)
 8006446:	f7ff fb0f 	bl	8005a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800644a:	480d      	ldr	r0, [pc, #52]	; (8006480 <prvInitialiseTaskLists+0x68>)
 800644c:	f7ff fb0c 	bl	8005a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006450:	480c      	ldr	r0, [pc, #48]	; (8006484 <prvInitialiseTaskLists+0x6c>)
 8006452:	f7ff fb09 	bl	8005a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006456:	480c      	ldr	r0, [pc, #48]	; (8006488 <prvInitialiseTaskLists+0x70>)
 8006458:	f7ff fb06 	bl	8005a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800645c:	480b      	ldr	r0, [pc, #44]	; (800648c <prvInitialiseTaskLists+0x74>)
 800645e:	f7ff fb03 	bl	8005a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <prvInitialiseTaskLists+0x78>)
 8006464:	4a05      	ldr	r2, [pc, #20]	; (800647c <prvInitialiseTaskLists+0x64>)
 8006466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006468:	4b0a      	ldr	r3, [pc, #40]	; (8006494 <prvInitialiseTaskLists+0x7c>)
 800646a:	4a05      	ldr	r2, [pc, #20]	; (8006480 <prvInitialiseTaskLists+0x68>)
 800646c:	601a      	str	r2, [r3, #0]
}
 800646e:	bf00      	nop
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	200004f0 	.word	0x200004f0
 800647c:	2000057c 	.word	0x2000057c
 8006480:	20000590 	.word	0x20000590
 8006484:	200005ac 	.word	0x200005ac
 8006488:	200005c0 	.word	0x200005c0
 800648c:	200005d8 	.word	0x200005d8
 8006490:	200005a4 	.word	0x200005a4
 8006494:	200005a8 	.word	0x200005a8

08006498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800649e:	e019      	b.n	80064d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064a0:	f000 fa10 	bl	80068c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a4:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <prvCheckTasksWaitingTermination+0x50>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fb63 	bl	8005b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064b6:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <prvCheckTasksWaitingTermination+0x54>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	4a0b      	ldr	r2, [pc, #44]	; (80064ec <prvCheckTasksWaitingTermination+0x54>)
 80064be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064c0:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <prvCheckTasksWaitingTermination+0x58>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	4a0a      	ldr	r2, [pc, #40]	; (80064f0 <prvCheckTasksWaitingTermination+0x58>)
 80064c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064ca:	f000 fa2b 	bl	8006924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f810 	bl	80064f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d4:	4b06      	ldr	r3, [pc, #24]	; (80064f0 <prvCheckTasksWaitingTermination+0x58>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e1      	bne.n	80064a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064dc:	bf00      	nop
 80064de:	bf00      	nop
 80064e0:	3708      	adds	r7, #8
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	200005c0 	.word	0x200005c0
 80064ec:	200005ec 	.word	0x200005ec
 80064f0:	200005d4 	.word	0x200005d4

080064f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	334c      	adds	r3, #76	; 0x4c
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fce7 	bl	8006ed4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fb83 	bl	8006c20 <vPortFree>
				vPortFree( pxTCB );
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fb80 	bl	8006c20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006520:	e018      	b.n	8006554 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8006528:	2b01      	cmp	r3, #1
 800652a:	d103      	bne.n	8006534 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fb77 	bl	8006c20 <vPortFree>
	}
 8006532:	e00f      	b.n	8006554 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800653a:	2b02      	cmp	r3, #2
 800653c:	d00a      	beq.n	8006554 <prvDeleteTCB+0x60>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <prvDeleteTCB+0x5e>
	}
 8006554:	bf00      	nop
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <prvResetNextTaskUnblockTime+0x38>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d104      	bne.n	8006576 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <prvResetNextTaskUnblockTime+0x3c>)
 800656e:	f04f 32ff 	mov.w	r2, #4294967295
 8006572:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006574:	e008      	b.n	8006588 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006576:	4b07      	ldr	r3, [pc, #28]	; (8006594 <prvResetNextTaskUnblockTime+0x38>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	4a04      	ldr	r2, [pc, #16]	; (8006598 <prvResetNextTaskUnblockTime+0x3c>)
 8006586:	6013      	str	r3, [r2, #0]
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	200005a4 	.word	0x200005a4
 8006598:	2000060c 	.word	0x2000060c

0800659c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <prvAddCurrentTaskToDelayedList+0xb0>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ac:	4b28      	ldr	r3, [pc, #160]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3304      	adds	r3, #4
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7ff fae2 	bl	8005b7c <uxListRemove>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10b      	bne.n	80065d6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065be:	4b24      	ldr	r3, [pc, #144]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c4:	2201      	movs	r2, #1
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43da      	mvns	r2, r3
 80065cc:	4b21      	ldr	r3, [pc, #132]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4013      	ands	r3, r2
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065d4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d10a      	bne.n	80065f4 <prvAddCurrentTaskToDelayedList+0x58>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d007      	beq.n	80065f4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065e4:	4b1a      	ldr	r3, [pc, #104]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3304      	adds	r3, #4
 80065ea:	4619      	mov	r1, r3
 80065ec:	481a      	ldr	r0, [pc, #104]	; (8006658 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065ee:	f7ff fa68 	bl	8005ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065f2:	e026      	b.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065fc:	4b14      	ldr	r3, [pc, #80]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	429a      	cmp	r2, r3
 800660a:	d209      	bcs.n	8006620 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660c:	4b13      	ldr	r3, [pc, #76]	; (800665c <prvAddCurrentTaskToDelayedList+0xc0>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b0f      	ldr	r3, [pc, #60]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7ff fa76 	bl	8005b0a <vListInsert>
}
 800661e:	e010      	b.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3304      	adds	r3, #4
 800662a:	4619      	mov	r1, r3
 800662c:	4610      	mov	r0, r2
 800662e:	f7ff fa6c 	bl	8005b0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68ba      	ldr	r2, [r7, #8]
 8006638:	429a      	cmp	r2, r3
 800663a:	d202      	bcs.n	8006642 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800663c:	4a09      	ldr	r2, [pc, #36]	; (8006664 <prvAddCurrentTaskToDelayedList+0xc8>)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	6013      	str	r3, [r2, #0]
}
 8006642:	bf00      	nop
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	200005f0 	.word	0x200005f0
 8006650:	200004ec 	.word	0x200004ec
 8006654:	200005f4 	.word	0x200005f4
 8006658:	200005d8 	.word	0x200005d8
 800665c:	200005a8 	.word	0x200005a8
 8006660:	200005a4 	.word	0x200005a4
 8006664:	2000060c 	.word	0x2000060c

08006668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3b04      	subs	r3, #4
 8006678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3b04      	subs	r3, #4
 8006686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	f023 0201 	bic.w	r2, r3, #1
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3b04      	subs	r3, #4
 8006696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006698:	4a0c      	ldr	r2, [pc, #48]	; (80066cc <pxPortInitialiseStack+0x64>)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	3b14      	subs	r3, #20
 80066a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3b04      	subs	r3, #4
 80066ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f06f 0202 	mvn.w	r2, #2
 80066b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3b20      	subs	r3, #32
 80066bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066be:	68fb      	ldr	r3, [r7, #12]
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3714      	adds	r7, #20
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr
 80066cc:	080066d1 	.word	0x080066d1

080066d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <prvTaskExitError+0x54>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066e2:	d00a      	beq.n	80066fa <prvTaskExitError+0x2a>
	__asm volatile
 80066e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e8:	f383 8811 	msr	BASEPRI, r3
 80066ec:	f3bf 8f6f 	isb	sy
 80066f0:	f3bf 8f4f 	dsb	sy
 80066f4:	60fb      	str	r3, [r7, #12]
}
 80066f6:	bf00      	nop
 80066f8:	e7fe      	b.n	80066f8 <prvTaskExitError+0x28>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60bb      	str	r3, [r7, #8]
}
 800670c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800670e:	bf00      	nop
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0fc      	beq.n	8006710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006716:	bf00      	nop
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	2000000c 	.word	0x2000000c
	...

08006730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <pxCurrentTCBConst2>)
 8006732:	6819      	ldr	r1, [r3, #0]
 8006734:	6808      	ldr	r0, [r1, #0]
 8006736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800673a:	f380 8809 	msr	PSP, r0
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f04f 0000 	mov.w	r0, #0
 8006746:	f380 8811 	msr	BASEPRI, r0
 800674a:	4770      	bx	lr
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst2>:
 8006750:	200004ec 	.word	0x200004ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006758:	4808      	ldr	r0, [pc, #32]	; (800677c <prvPortStartFirstTask+0x24>)
 800675a:	6800      	ldr	r0, [r0, #0]
 800675c:	6800      	ldr	r0, [r0, #0]
 800675e:	f380 8808 	msr	MSP, r0
 8006762:	f04f 0000 	mov.w	r0, #0
 8006766:	f380 8814 	msr	CONTROL, r0
 800676a:	b662      	cpsie	i
 800676c:	b661      	cpsie	f
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	df00      	svc	0
 8006778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800677a:	bf00      	nop
 800677c:	e000ed08 	.word	0xe000ed08

08006780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006786:	4b46      	ldr	r3, [pc, #280]	; (80068a0 <xPortStartScheduler+0x120>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a46      	ldr	r2, [pc, #280]	; (80068a4 <xPortStartScheduler+0x124>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d10a      	bne.n	80067a6 <xPortStartScheduler+0x26>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	613b      	str	r3, [r7, #16]
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067a6:	4b3e      	ldr	r3, [pc, #248]	; (80068a0 <xPortStartScheduler+0x120>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <xPortStartScheduler+0x128>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10a      	bne.n	80067c6 <xPortStartScheduler+0x46>
	__asm volatile
 80067b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	60fb      	str	r3, [r7, #12]
}
 80067c2:	bf00      	nop
 80067c4:	e7fe      	b.n	80067c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067c6:	4b39      	ldr	r3, [pc, #228]	; (80068ac <xPortStartScheduler+0x12c>)
 80067c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	22ff      	movs	r2, #255	; 0xff
 80067d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b31      	ldr	r3, [pc, #196]	; (80068b0 <xPortStartScheduler+0x130>)
 80067ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067ee:	4b31      	ldr	r3, [pc, #196]	; (80068b4 <xPortStartScheduler+0x134>)
 80067f0:	2207      	movs	r2, #7
 80067f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067f4:	e009      	b.n	800680a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067f6:	4b2f      	ldr	r3, [pc, #188]	; (80068b4 <xPortStartScheduler+0x134>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3b01      	subs	r3, #1
 80067fc:	4a2d      	ldr	r2, [pc, #180]	; (80068b4 <xPortStartScheduler+0x134>)
 80067fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	b2db      	uxtb	r3, r3
 8006808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800680a:	78fb      	ldrb	r3, [r7, #3]
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006812:	2b80      	cmp	r3, #128	; 0x80
 8006814:	d0ef      	beq.n	80067f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <xPortStartScheduler+0x134>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f1c3 0307 	rsb	r3, r3, #7
 800681e:	2b04      	cmp	r3, #4
 8006820:	d00a      	beq.n	8006838 <xPortStartScheduler+0xb8>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60bb      	str	r3, [r7, #8]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006838:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <xPortStartScheduler+0x134>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	021b      	lsls	r3, r3, #8
 800683e:	4a1d      	ldr	r2, [pc, #116]	; (80068b4 <xPortStartScheduler+0x134>)
 8006840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <xPortStartScheduler+0x134>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800684a:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <xPortStartScheduler+0x134>)
 800684c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006856:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <xPortStartScheduler+0x138>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <xPortStartScheduler+0x138>)
 800685c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006862:	4b15      	ldr	r3, [pc, #84]	; (80068b8 <xPortStartScheduler+0x138>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a14      	ldr	r2, [pc, #80]	; (80068b8 <xPortStartScheduler+0x138>)
 8006868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800686c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800686e:	f000 f8dd 	bl	8006a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006872:	4b12      	ldr	r3, [pc, #72]	; (80068bc <xPortStartScheduler+0x13c>)
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006878:	f000 f8fc 	bl	8006a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800687c:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <xPortStartScheduler+0x140>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a0f      	ldr	r2, [pc, #60]	; (80068c0 <xPortStartScheduler+0x140>)
 8006882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006888:	f7ff ff66 	bl	8006758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800688c:	f7ff fd4a 	bl	8006324 <vTaskSwitchContext>
	prvTaskExitError();
 8006890:	f7ff ff1e 	bl	80066d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	e000ed00 	.word	0xe000ed00
 80068a4:	410fc271 	.word	0x410fc271
 80068a8:	410fc270 	.word	0x410fc270
 80068ac:	e000e400 	.word	0xe000e400
 80068b0:	20000618 	.word	0x20000618
 80068b4:	2000061c 	.word	0x2000061c
 80068b8:	e000ed20 	.word	0xe000ed20
 80068bc:	2000000c 	.word	0x2000000c
 80068c0:	e000ef34 	.word	0xe000ef34

080068c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ce:	f383 8811 	msr	BASEPRI, r3
 80068d2:	f3bf 8f6f 	isb	sy
 80068d6:	f3bf 8f4f 	dsb	sy
 80068da:	607b      	str	r3, [r7, #4]
}
 80068dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068de:	4b0f      	ldr	r3, [pc, #60]	; (800691c <vPortEnterCritical+0x58>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3301      	adds	r3, #1
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <vPortEnterCritical+0x58>)
 80068e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <vPortEnterCritical+0x58>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d10f      	bne.n	8006910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <vPortEnterCritical+0x5c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00a      	beq.n	8006910 <vPortEnterCritical+0x4c>
	__asm volatile
 80068fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fe:	f383 8811 	msr	BASEPRI, r3
 8006902:	f3bf 8f6f 	isb	sy
 8006906:	f3bf 8f4f 	dsb	sy
 800690a:	603b      	str	r3, [r7, #0]
}
 800690c:	bf00      	nop
 800690e:	e7fe      	b.n	800690e <vPortEnterCritical+0x4a>
	}
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	2000000c 	.word	0x2000000c
 8006920:	e000ed04 	.word	0xe000ed04

08006924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800692a:	4b12      	ldr	r3, [pc, #72]	; (8006974 <vPortExitCritical+0x50>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <vPortExitCritical+0x24>
	__asm volatile
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	607b      	str	r3, [r7, #4]
}
 8006944:	bf00      	nop
 8006946:	e7fe      	b.n	8006946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006948:	4b0a      	ldr	r3, [pc, #40]	; (8006974 <vPortExitCritical+0x50>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3b01      	subs	r3, #1
 800694e:	4a09      	ldr	r2, [pc, #36]	; (8006974 <vPortExitCritical+0x50>)
 8006950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <vPortExitCritical+0x50>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d105      	bne.n	8006966 <vPortExitCritical+0x42>
 800695a:	2300      	movs	r3, #0
 800695c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006966:	bf00      	nop
 8006968:	370c      	adds	r7, #12
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
 8006972:	bf00      	nop
 8006974:	2000000c 	.word	0x2000000c
	...

08006980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006980:	f3ef 8009 	mrs	r0, PSP
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <pxCurrentTCBConst>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	f01e 0f10 	tst.w	lr, #16
 8006990:	bf08      	it	eq
 8006992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699a:	6010      	str	r0, [r2, #0]
 800699c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069a4:	f380 8811 	msr	BASEPRI, r0
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f7ff fcb8 	bl	8006324 <vTaskSwitchContext>
 80069b4:	f04f 0000 	mov.w	r0, #0
 80069b8:	f380 8811 	msr	BASEPRI, r0
 80069bc:	bc09      	pop	{r0, r3}
 80069be:	6819      	ldr	r1, [r3, #0]
 80069c0:	6808      	ldr	r0, [r1, #0]
 80069c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069c6:	f01e 0f10 	tst.w	lr, #16
 80069ca:	bf08      	it	eq
 80069cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069d0:	f380 8809 	msr	PSP, r0
 80069d4:	f3bf 8f6f 	isb	sy
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	f3af 8000 	nop.w

080069e0 <pxCurrentTCBConst>:
 80069e0:	200004ec 	.word	0x200004ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop

080069e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	__asm volatile
 80069ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f2:	f383 8811 	msr	BASEPRI, r3
 80069f6:	f3bf 8f6f 	isb	sy
 80069fa:	f3bf 8f4f 	dsb	sy
 80069fe:	607b      	str	r3, [r7, #4]
}
 8006a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a02:	f7ff fbd7 	bl	80061b4 <xTaskIncrementTick>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d003      	beq.n	8006a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <SysTick_Handler+0x40>)
 8006a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	2300      	movs	r3, #0
 8006a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f383 8811 	msr	BASEPRI, r3
}
 8006a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a20:	bf00      	nop
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a30:	4b0b      	ldr	r3, [pc, #44]	; (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <vPortSetupTimerInterrupt+0x38>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	; (8006a68 <vPortSetupTimerInterrupt+0x3c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a0a      	ldr	r2, [pc, #40]	; (8006a6c <vPortSetupTimerInterrupt+0x40>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	099b      	lsrs	r3, r3, #6
 8006a48:	4a09      	ldr	r2, [pc, #36]	; (8006a70 <vPortSetupTimerInterrupt+0x44>)
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a4e:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <vPortSetupTimerInterrupt+0x34>)
 8006a50:	2207      	movs	r2, #7
 8006a52:	601a      	str	r2, [r3, #0]
}
 8006a54:	bf00      	nop
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	e000e010 	.word	0xe000e010
 8006a64:	e000e018 	.word	0xe000e018
 8006a68:	20000000 	.word	0x20000000
 8006a6c:	10624dd3 	.word	0x10624dd3
 8006a70:	e000e014 	.word	0xe000e014

08006a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a84 <vPortEnableVFP+0x10>
 8006a78:	6801      	ldr	r1, [r0, #0]
 8006a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a7e:	6001      	str	r1, [r0, #0]
 8006a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a82:	bf00      	nop
 8006a84:	e000ed88 	.word	0xe000ed88

08006a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	; 0x28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a94:	f7ff fae4 	bl	8006060 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a98:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <pvPortMalloc+0x180>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d101      	bne.n	8006aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006aa0:	f000 f920 	bl	8006ce4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006aa4:	4b59      	ldr	r3, [pc, #356]	; (8006c0c <pvPortMalloc+0x184>)
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f040 8093 	bne.w	8006bd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d01d      	beq.n	8006af4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ab8:	2208      	movs	r2, #8
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4413      	add	r3, r2
 8006abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f003 0307 	and.w	r3, r3, #7
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d014      	beq.n	8006af4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f023 0307 	bic.w	r3, r3, #7
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0307 	and.w	r3, r3, #7
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <pvPortMalloc+0x6c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	617b      	str	r3, [r7, #20]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d06e      	beq.n	8006bd8 <pvPortMalloc+0x150>
 8006afa:	4b45      	ldr	r3, [pc, #276]	; (8006c10 <pvPortMalloc+0x188>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d869      	bhi.n	8006bd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b04:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <pvPortMalloc+0x18c>)
 8006b06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b08:	4b42      	ldr	r3, [pc, #264]	; (8006c14 <pvPortMalloc+0x18c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b0e:	e004      	b.n	8006b1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d903      	bls.n	8006b2c <pvPortMalloc+0xa4>
 8006b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1f1      	bne.n	8006b10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b2c:	4b36      	ldr	r3, [pc, #216]	; (8006c08 <pvPortMalloc+0x180>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d050      	beq.n	8006bd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	4413      	add	r3, r2
 8006b3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	1ad2      	subs	r2, r2, r3
 8006b50:	2308      	movs	r3, #8
 8006b52:	005b      	lsls	r3, r3, #1
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d91f      	bls.n	8006b98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <pvPortMalloc+0xf8>
	__asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	613b      	str	r3, [r7, #16]
}
 8006b7c:	bf00      	nop
 8006b7e:	e7fe      	b.n	8006b7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	1ad2      	subs	r2, r2, r3
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b92:	69b8      	ldr	r0, [r7, #24]
 8006b94:	f000 f908 	bl	8006da8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b98:	4b1d      	ldr	r3, [pc, #116]	; (8006c10 <pvPortMalloc+0x188>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <pvPortMalloc+0x188>)
 8006ba4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ba6:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <pvPortMalloc+0x188>)
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <pvPortMalloc+0x190>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d203      	bcs.n	8006bba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006bb2:	4b17      	ldr	r3, [pc, #92]	; (8006c10 <pvPortMalloc+0x188>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a18      	ldr	r2, [pc, #96]	; (8006c18 <pvPortMalloc+0x190>)
 8006bb8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	4b13      	ldr	r3, [pc, #76]	; (8006c0c <pvPortMalloc+0x184>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006bce:	4b13      	ldr	r3, [pc, #76]	; (8006c1c <pvPortMalloc+0x194>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	4a11      	ldr	r2, [pc, #68]	; (8006c1c <pvPortMalloc+0x194>)
 8006bd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006bd8:	f7ff fa50 	bl	800607c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <pvPortMalloc+0x174>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	60fb      	str	r3, [r7, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <pvPortMalloc+0x172>
	return pvReturn;
 8006bfc:	69fb      	ldr	r3, [r7, #28]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3728      	adds	r7, #40	; 0x28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200011e0 	.word	0x200011e0
 8006c0c:	200011f4 	.word	0x200011f4
 8006c10:	200011e4 	.word	0x200011e4
 8006c14:	200011d8 	.word	0x200011d8
 8006c18:	200011e8 	.word	0x200011e8
 8006c1c:	200011ec 	.word	0x200011ec

08006c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04d      	beq.n	8006cce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c32:	2308      	movs	r3, #8
 8006c34:	425b      	negs	r3, r3
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	4b24      	ldr	r3, [pc, #144]	; (8006cd8 <vPortFree+0xb8>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d10a      	bne.n	8006c64 <vPortFree+0x44>
	__asm volatile
 8006c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c52:	f383 8811 	msr	BASEPRI, r3
 8006c56:	f3bf 8f6f 	isb	sy
 8006c5a:	f3bf 8f4f 	dsb	sy
 8006c5e:	60fb      	str	r3, [r7, #12]
}
 8006c60:	bf00      	nop
 8006c62:	e7fe      	b.n	8006c62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d00a      	beq.n	8006c82 <vPortFree+0x62>
	__asm volatile
 8006c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c70:	f383 8811 	msr	BASEPRI, r3
 8006c74:	f3bf 8f6f 	isb	sy
 8006c78:	f3bf 8f4f 	dsb	sy
 8006c7c:	60bb      	str	r3, [r7, #8]
}
 8006c7e:	bf00      	nop
 8006c80:	e7fe      	b.n	8006c80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <vPortFree+0xb8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4013      	ands	r3, r2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01e      	beq.n	8006cce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d11a      	bne.n	8006cce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <vPortFree+0xb8>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	43db      	mvns	r3, r3
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ca8:	f7ff f9da 	bl	8006060 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <vPortFree+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <vPortFree+0xbc>)
 8006cb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cba:	6938      	ldr	r0, [r7, #16]
 8006cbc:	f000 f874 	bl	8006da8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006cc0:	4b07      	ldr	r3, [pc, #28]	; (8006ce0 <vPortFree+0xc0>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3301      	adds	r3, #1
 8006cc6:	4a06      	ldr	r2, [pc, #24]	; (8006ce0 <vPortFree+0xc0>)
 8006cc8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006cca:	f7ff f9d7 	bl	800607c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200011f4 	.word	0x200011f4
 8006cdc:	200011e4 	.word	0x200011e4
 8006ce0:	200011f0 	.word	0x200011f0

08006ce4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cf0:	4b27      	ldr	r3, [pc, #156]	; (8006d90 <prvHeapInit+0xac>)
 8006cf2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00c      	beq.n	8006d18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3307      	adds	r3, #7
 8006d02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	4a1f      	ldr	r2, [pc, #124]	; (8006d90 <prvHeapInit+0xac>)
 8006d14:	4413      	add	r3, r2
 8006d16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d1c:	4a1d      	ldr	r2, [pc, #116]	; (8006d94 <prvHeapInit+0xb0>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d22:	4b1c      	ldr	r3, [pc, #112]	; (8006d94 <prvHeapInit+0xb0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68ba      	ldr	r2, [r7, #8]
 8006d2c:	4413      	add	r3, r2
 8006d2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d30:	2208      	movs	r2, #8
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	1a9b      	subs	r3, r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4a15      	ldr	r2, [pc, #84]	; (8006d98 <prvHeapInit+0xb4>)
 8006d44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <prvHeapInit+0xb4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <prvHeapInit+0xb4>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	1ad2      	subs	r2, r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d64:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <prvHeapInit+0xb4>)
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	4a0a      	ldr	r2, [pc, #40]	; (8006d9c <prvHeapInit+0xb8>)
 8006d72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4a09      	ldr	r2, [pc, #36]	; (8006da0 <prvHeapInit+0xbc>)
 8006d7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d7c:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <prvHeapInit+0xc0>)
 8006d7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d82:	601a      	str	r2, [r3, #0]
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000620 	.word	0x20000620
 8006d94:	200011d8 	.word	0x200011d8
 8006d98:	200011e0 	.word	0x200011e0
 8006d9c:	200011e8 	.word	0x200011e8
 8006da0:	200011e4 	.word	0x200011e4
 8006da4:	200011f4 	.word	0x200011f4

08006da8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <prvInsertBlockIntoFreeList+0xac>)
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	e002      	b.n	8006dbc <prvInsertBlockIntoFreeList+0x14>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d8f7      	bhi.n	8006db6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	68ba      	ldr	r2, [r7, #8]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d108      	bne.n	8006dea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	441a      	add	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d118      	bne.n	8006e30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b15      	ldr	r3, [pc, #84]	; (8006e58 <prvInsertBlockIntoFreeList+0xb0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d00d      	beq.n	8006e26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	441a      	add	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	e008      	b.n	8006e38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvInsertBlockIntoFreeList+0xb0>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	e003      	b.n	8006e38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d002      	beq.n	8006e46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	200011d8 	.word	0x200011d8
 8006e58:	200011e0 	.word	0x200011e0

08006e5c <__libc_init_array>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	4d0d      	ldr	r5, [pc, #52]	; (8006e94 <__libc_init_array+0x38>)
 8006e60:	4c0d      	ldr	r4, [pc, #52]	; (8006e98 <__libc_init_array+0x3c>)
 8006e62:	1b64      	subs	r4, r4, r5
 8006e64:	10a4      	asrs	r4, r4, #2
 8006e66:	2600      	movs	r6, #0
 8006e68:	42a6      	cmp	r6, r4
 8006e6a:	d109      	bne.n	8006e80 <__libc_init_array+0x24>
 8006e6c:	4d0b      	ldr	r5, [pc, #44]	; (8006e9c <__libc_init_array+0x40>)
 8006e6e:	4c0c      	ldr	r4, [pc, #48]	; (8006ea0 <__libc_init_array+0x44>)
 8006e70:	f000 f8e4 	bl	800703c <_init>
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	2600      	movs	r6, #0
 8006e7a:	42a6      	cmp	r6, r4
 8006e7c:	d105      	bne.n	8006e8a <__libc_init_array+0x2e>
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e84:	4798      	blx	r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	e7ee      	b.n	8006e68 <__libc_init_array+0xc>
 8006e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e8e:	4798      	blx	r3
 8006e90:	3601      	adds	r6, #1
 8006e92:	e7f2      	b.n	8006e7a <__libc_init_array+0x1e>
 8006e94:	0800722c 	.word	0x0800722c
 8006e98:	0800722c 	.word	0x0800722c
 8006e9c:	0800722c 	.word	0x0800722c
 8006ea0:	08007230 	.word	0x08007230

08006ea4 <__retarget_lock_acquire_recursive>:
 8006ea4:	4770      	bx	lr

08006ea6 <__retarget_lock_release_recursive>:
 8006ea6:	4770      	bx	lr

08006ea8 <memset>:
 8006ea8:	4402      	add	r2, r0
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d100      	bne.n	8006eb2 <memset+0xa>
 8006eb0:	4770      	bx	lr
 8006eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006eb6:	e7f9      	b.n	8006eac <memset+0x4>

08006eb8 <cleanup_glue>:
 8006eb8:	b538      	push	{r3, r4, r5, lr}
 8006eba:	460c      	mov	r4, r1
 8006ebc:	6809      	ldr	r1, [r1, #0]
 8006ebe:	4605      	mov	r5, r0
 8006ec0:	b109      	cbz	r1, 8006ec6 <cleanup_glue+0xe>
 8006ec2:	f7ff fff9 	bl	8006eb8 <cleanup_glue>
 8006ec6:	4621      	mov	r1, r4
 8006ec8:	4628      	mov	r0, r5
 8006eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ece:	f000 b869 	b.w	8006fa4 <_free_r>
	...

08006ed4 <_reclaim_reent>:
 8006ed4:	4b2c      	ldr	r3, [pc, #176]	; (8006f88 <_reclaim_reent+0xb4>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4283      	cmp	r3, r0
 8006eda:	b570      	push	{r4, r5, r6, lr}
 8006edc:	4604      	mov	r4, r0
 8006ede:	d051      	beq.n	8006f84 <_reclaim_reent+0xb0>
 8006ee0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ee2:	b143      	cbz	r3, 8006ef6 <_reclaim_reent+0x22>
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d14a      	bne.n	8006f80 <_reclaim_reent+0xac>
 8006eea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eec:	6819      	ldr	r1, [r3, #0]
 8006eee:	b111      	cbz	r1, 8006ef6 <_reclaim_reent+0x22>
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	f000 f857 	bl	8006fa4 <_free_r>
 8006ef6:	6961      	ldr	r1, [r4, #20]
 8006ef8:	b111      	cbz	r1, 8006f00 <_reclaim_reent+0x2c>
 8006efa:	4620      	mov	r0, r4
 8006efc:	f000 f852 	bl	8006fa4 <_free_r>
 8006f00:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f02:	b111      	cbz	r1, 8006f0a <_reclaim_reent+0x36>
 8006f04:	4620      	mov	r0, r4
 8006f06:	f000 f84d 	bl	8006fa4 <_free_r>
 8006f0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f0c:	b111      	cbz	r1, 8006f14 <_reclaim_reent+0x40>
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f848 	bl	8006fa4 <_free_r>
 8006f14:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f16:	b111      	cbz	r1, 8006f1e <_reclaim_reent+0x4a>
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 f843 	bl	8006fa4 <_free_r>
 8006f1e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f20:	b111      	cbz	r1, 8006f28 <_reclaim_reent+0x54>
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f83e 	bl	8006fa4 <_free_r>
 8006f28:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f2a:	b111      	cbz	r1, 8006f32 <_reclaim_reent+0x5e>
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f000 f839 	bl	8006fa4 <_free_r>
 8006f32:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f34:	b111      	cbz	r1, 8006f3c <_reclaim_reent+0x68>
 8006f36:	4620      	mov	r0, r4
 8006f38:	f000 f834 	bl	8006fa4 <_free_r>
 8006f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f3e:	b111      	cbz	r1, 8006f46 <_reclaim_reent+0x72>
 8006f40:	4620      	mov	r0, r4
 8006f42:	f000 f82f 	bl	8006fa4 <_free_r>
 8006f46:	69a3      	ldr	r3, [r4, #24]
 8006f48:	b1e3      	cbz	r3, 8006f84 <_reclaim_reent+0xb0>
 8006f4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4798      	blx	r3
 8006f50:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f52:	b1b9      	cbz	r1, 8006f84 <_reclaim_reent+0xb0>
 8006f54:	4620      	mov	r0, r4
 8006f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f5a:	f7ff bfad 	b.w	8006eb8 <cleanup_glue>
 8006f5e:	5949      	ldr	r1, [r1, r5]
 8006f60:	b941      	cbnz	r1, 8006f74 <_reclaim_reent+0xa0>
 8006f62:	3504      	adds	r5, #4
 8006f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f66:	2d80      	cmp	r5, #128	; 0x80
 8006f68:	68d9      	ldr	r1, [r3, #12]
 8006f6a:	d1f8      	bne.n	8006f5e <_reclaim_reent+0x8a>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 f819 	bl	8006fa4 <_free_r>
 8006f72:	e7ba      	b.n	8006eea <_reclaim_reent+0x16>
 8006f74:	680e      	ldr	r6, [r1, #0]
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f814 	bl	8006fa4 <_free_r>
 8006f7c:	4631      	mov	r1, r6
 8006f7e:	e7ef      	b.n	8006f60 <_reclaim_reent+0x8c>
 8006f80:	2500      	movs	r5, #0
 8006f82:	e7ef      	b.n	8006f64 <_reclaim_reent+0x90>
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	bf00      	nop
 8006f88:	20000010 	.word	0x20000010

08006f8c <__malloc_lock>:
 8006f8c:	4801      	ldr	r0, [pc, #4]	; (8006f94 <__malloc_lock+0x8>)
 8006f8e:	f7ff bf89 	b.w	8006ea4 <__retarget_lock_acquire_recursive>
 8006f92:	bf00      	nop
 8006f94:	200011f8 	.word	0x200011f8

08006f98 <__malloc_unlock>:
 8006f98:	4801      	ldr	r0, [pc, #4]	; (8006fa0 <__malloc_unlock+0x8>)
 8006f9a:	f7ff bf84 	b.w	8006ea6 <__retarget_lock_release_recursive>
 8006f9e:	bf00      	nop
 8006fa0:	200011f8 	.word	0x200011f8

08006fa4 <_free_r>:
 8006fa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d044      	beq.n	8007034 <_free_r+0x90>
 8006faa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fae:	9001      	str	r0, [sp, #4]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fb6:	bfb8      	it	lt
 8006fb8:	18e4      	addlt	r4, r4, r3
 8006fba:	f7ff ffe7 	bl	8006f8c <__malloc_lock>
 8006fbe:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <_free_r+0x94>)
 8006fc0:	9801      	ldr	r0, [sp, #4]
 8006fc2:	6813      	ldr	r3, [r2, #0]
 8006fc4:	b933      	cbnz	r3, 8006fd4 <_free_r+0x30>
 8006fc6:	6063      	str	r3, [r4, #4]
 8006fc8:	6014      	str	r4, [r2, #0]
 8006fca:	b003      	add	sp, #12
 8006fcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fd0:	f7ff bfe2 	b.w	8006f98 <__malloc_unlock>
 8006fd4:	42a3      	cmp	r3, r4
 8006fd6:	d908      	bls.n	8006fea <_free_r+0x46>
 8006fd8:	6825      	ldr	r5, [r4, #0]
 8006fda:	1961      	adds	r1, r4, r5
 8006fdc:	428b      	cmp	r3, r1
 8006fde:	bf01      	itttt	eq
 8006fe0:	6819      	ldreq	r1, [r3, #0]
 8006fe2:	685b      	ldreq	r3, [r3, #4]
 8006fe4:	1949      	addeq	r1, r1, r5
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	e7ed      	b.n	8006fc6 <_free_r+0x22>
 8006fea:	461a      	mov	r2, r3
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	b10b      	cbz	r3, 8006ff4 <_free_r+0x50>
 8006ff0:	42a3      	cmp	r3, r4
 8006ff2:	d9fa      	bls.n	8006fea <_free_r+0x46>
 8006ff4:	6811      	ldr	r1, [r2, #0]
 8006ff6:	1855      	adds	r5, r2, r1
 8006ff8:	42a5      	cmp	r5, r4
 8006ffa:	d10b      	bne.n	8007014 <_free_r+0x70>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	4421      	add	r1, r4
 8007000:	1854      	adds	r4, r2, r1
 8007002:	42a3      	cmp	r3, r4
 8007004:	6011      	str	r1, [r2, #0]
 8007006:	d1e0      	bne.n	8006fca <_free_r+0x26>
 8007008:	681c      	ldr	r4, [r3, #0]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	6053      	str	r3, [r2, #4]
 800700e:	4421      	add	r1, r4
 8007010:	6011      	str	r1, [r2, #0]
 8007012:	e7da      	b.n	8006fca <_free_r+0x26>
 8007014:	d902      	bls.n	800701c <_free_r+0x78>
 8007016:	230c      	movs	r3, #12
 8007018:	6003      	str	r3, [r0, #0]
 800701a:	e7d6      	b.n	8006fca <_free_r+0x26>
 800701c:	6825      	ldr	r5, [r4, #0]
 800701e:	1961      	adds	r1, r4, r5
 8007020:	428b      	cmp	r3, r1
 8007022:	bf04      	itt	eq
 8007024:	6819      	ldreq	r1, [r3, #0]
 8007026:	685b      	ldreq	r3, [r3, #4]
 8007028:	6063      	str	r3, [r4, #4]
 800702a:	bf04      	itt	eq
 800702c:	1949      	addeq	r1, r1, r5
 800702e:	6021      	streq	r1, [r4, #0]
 8007030:	6054      	str	r4, [r2, #4]
 8007032:	e7ca      	b.n	8006fca <_free_r+0x26>
 8007034:	b003      	add	sp, #12
 8007036:	bd30      	pop	{r4, r5, pc}
 8007038:	200011fc 	.word	0x200011fc

0800703c <_init>:
 800703c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703e:	bf00      	nop
 8007040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007042:	bc08      	pop	{r3}
 8007044:	469e      	mov	lr, r3
 8007046:	4770      	bx	lr

08007048 <_fini>:
 8007048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800704a:	bf00      	nop
 800704c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704e:	bc08      	pop	{r3}
 8007050:	469e      	mov	lr, r3
 8007052:	4770      	bx	lr
